
F3RC_keisokurin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054bc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005720  08005720  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005728  08005728  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005728  08005728  00006728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800572c  0800572c  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005730  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000068  08005798  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08005798  000073a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001682e  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b23  00000000  00000000  0001d8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  000203f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbe  00000000  00000000  000217f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c26  00000000  00000000  000227b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187e5  00000000  00000000  0004a3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001009da  00000000  00000000  00062bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016359b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dd8  00000000  00000000  001635e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001693b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005684 	.word	0x08005684

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005684 	.word	0x08005684

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <read_encoder_value>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t read_encoder_value(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
  int16_t count_t = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	80fb      	strh	r3, [r7, #6]
  uint16_t enc_buff = TIM5->CNT;
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <read_encoder_value+0x3c>)
 80005bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005be:	80bb      	strh	r3, [r7, #4]
  TIM5->CNT = 0;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <read_encoder_value+0x3c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (enc_buff > 32767)
 80005c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	da04      	bge.n	80005d8 <read_encoder_value+0x28>
  {
    count_t = (int16_t)enc_buff*-1;
 80005ce:	88bb      	ldrh	r3, [r7, #4]
 80005d0:	425b      	negs	r3, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	80fb      	strh	r3, [r7, #6]
 80005d6:	e001      	b.n	80005dc <read_encoder_value+0x2c>
  }
  else
  {
    count_t = (int16_t)enc_buff;
 80005d8:	88bb      	ldrh	r3, [r7, #4]
 80005da:	80fb      	strh	r3, [r7, #6]
  }
  return count_t;
 80005dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40000c00 	.word	0x40000c00

080005f0 <_write>:

int _write(int file, char *ptr, int len)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	230a      	movs	r3, #10
 8000602:	68b9      	ldr	r1, [r7, #8]
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <_write+0x24>)
 8000606:	f002 fdf8 	bl	80031fa <HAL_UART_Transmit>
    return len;
 800060a:	687b      	ldr	r3, [r7, #4]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200001bc 	.word	0x200001bc

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <main+0x64>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f90c 	bl	8004844 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fd37 	bl	800109e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f82a 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 fa16 	bl	8000a64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000638:	f000 f8a6 	bl	8000788 <MX_TIM2_Init>
  MX_TIM3_Init();
 800063c:	f000 f918 	bl	8000870 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000640:	f000 f96c 	bl	800091c <MX_TIM5_Init>
  MX_I2C1_Init();
 8000644:	f000 f860 	bl	8000708 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f9be 	bl	80009c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t count = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	80fb      	strh	r3, [r7, #6]

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000650:	213c      	movs	r1, #60	@ 0x3c
 8000652:	480b      	ldr	r0, [pc, #44]	@ (8000680 <main+0x68>)
 8000654:	f002 fb28 	bl	8002ca8 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count += read_encoder_value();
 8000658:	f7ff ffaa 	bl	80005b0 <read_encoder_value>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	4413      	add	r3, r2
 8000664:	80fb      	strh	r3, [r7, #6]
	  printf("encoder:%d\n\r", count);
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	@ (8000684 <main+0x6c>)
 800066c:	f004 f8d8 	bl	8004820 <iprintf>
	  HAL_Delay(10);
 8000670:	200a      	movs	r0, #10
 8000672:	f000 fd85 	bl	8001180 <HAL_Delay>
	  count += read_encoder_value();
 8000676:	bf00      	nop
 8000678:	e7ee      	b.n	8000658 <main+0x40>
 800067a:	bf00      	nop
 800067c:	20000018 	.word	0x20000018
 8000680:	20000170 	.word	0x20000170
 8000684:	0800569c 	.word	0x0800569c

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	2238      	movs	r2, #56	@ 0x38
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 f9d3 	bl	8004a42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ae:	f001 fa25 	bl	8001afc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2340      	movs	r3, #64	@ 0x40
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 facb 	bl	8001c64 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006d4:	f000 fa30 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2301      	movs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fdc9 	bl	8002288 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006fc:	f000 fa1c 	bl	8000b38 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	@ 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800070c:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <MX_I2C1_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <MX_I2C1_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_I2C1_Init+0x74>)
 8000714:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_I2C1_Init+0x7c>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_I2C1_Init+0x74>)
 8000720:	2201      	movs	r2, #1
 8000722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_I2C1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_I2C1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	@ (800077c <MX_I2C1_Init+0x74>)
 8000744:	f001 f8a8 	bl	8001898 <HAL_I2C_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800074e:	f000 f9f3 	bl	8000b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <MX_I2C1_Init+0x74>)
 8000756:	f001 f93a 	bl	80019ce <HAL_I2CEx_ConfigAnalogFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 f9ea 	bl	8000b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_I2C1_Init+0x74>)
 8000768:	f001 f97c 	bl	8001a64 <HAL_I2CEx_ConfigDigitalFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f9e1 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084
 8000780:	40005400 	.word	0x40005400
 8000784:	00303d5b 	.word	0x00303d5b

08000788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b092      	sub	sp, #72	@ 0x48
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800078e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000792:	2224      	movs	r2, #36	@ 0x24
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 f953 	bl	8004a42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	f107 0318 	add.w	r3, r7, #24
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b8:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <MX_TIM2_Init+0xe4>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <MX_TIM2_Init+0xe4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b29      	ldr	r3, [pc, #164]	@ (800086c <MX_TIM2_Init+0xe4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007cc:	4b27      	ldr	r3, [pc, #156]	@ (800086c <MX_TIM2_Init+0xe4>)
 80007ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <MX_TIM2_Init+0xe4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <MX_TIM2_Init+0xe4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007f8:	2301      	movs	r3, #1
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	4818      	ldr	r0, [pc, #96]	@ (800086c <MX_TIM2_Init+0xe4>)
 800080c:	f002 f9a6 	bl	8002b5c <HAL_TIM_Encoder_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000816:	f000 f98f 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	4619      	mov	r1, r3
 8000828:	4810      	ldr	r0, [pc, #64]	@ (800086c <MX_TIM2_Init+0xe4>)
 800082a:	f002 fbc5 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000834:	f000 f980 	bl	8000b38 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim2, &sEncoderIndexConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_TIM2_Init+0xe4>)
 8000856:	f002 fc45 	bl	80030e4 <HAL_TIMEx_ConfigEncoderIndex>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000860:	f000 f96a 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3748      	adds	r7, #72	@ 0x48
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000d8 	.word	0x200000d8

08000870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	@ 0x30
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2224      	movs	r2, #36	@ 0x24
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f004 f8df 	bl	8004a42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800088e:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <MX_TIM3_Init+0xa4>)
 8000890:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <MX_TIM3_Init+0xa8>)
 8000892:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000894:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_TIM3_Init+0xa4>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <MX_TIM3_Init+0xa4>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_TIM3_Init+0xa4>)
 80008a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_TIM3_Init+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <MX_TIM3_Init+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008bc:	2301      	movs	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008cc:	2301      	movs	r3, #1
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	480d      	ldr	r0, [pc, #52]	@ (8000914 <MX_TIM3_Init+0xa4>)
 80008e0:	f002 f93c 	bl	8002b5c <HAL_TIM_Encoder_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008ea:	f000 f925 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	@ (8000914 <MX_TIM3_Init+0xa4>)
 80008fc:	f002 fb5c 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000906:	f000 f917 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	@ 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000124 	.word	0x20000124
 8000918:	40000400 	.word	0x40000400

0800091c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	@ 0x30
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2224      	movs	r2, #36	@ 0x24
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 f889 	bl	8004a42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800093a:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_TIM5_Init+0xa4>)
 800093c:	4a21      	ldr	r2, [pc, #132]	@ (80009c4 <MX_TIM5_Init+0xa8>)
 800093e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_TIM5_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_TIM5_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <MX_TIM5_Init+0xa4>)
 800094e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000952:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_TIM5_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_TIM5_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000960:	2301      	movs	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000968:	2301      	movs	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000978:	2301      	movs	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4619      	mov	r1, r3
 800098a:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <MX_TIM5_Init+0xa4>)
 800098c:	f002 f8e6 	bl	8002b5c <HAL_TIM_Encoder_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000996:	f000 f8cf 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <MX_TIM5_Init+0xa4>)
 80009a8:	f002 fb06 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80009b2:	f000 f8c1 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	@ 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000170 	.word	0x20000170
 80009c4:	40000c00 	.word	0x40000c00

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <MX_USART2_UART_Init+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009d4:	4a22      	ldr	r2, [pc, #136]	@ (8000a60 <MX_USART2_UART_Init+0x98>)
 80009d6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009de:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ec:	220c      	movs	r2, #12
 80009ee:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f0:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4812      	ldr	r0, [pc, #72]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a10:	f002 fba3 	bl	800315a <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000a1a:	f000 f88d 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a22:	f003 fd70 	bl	8004506 <HAL_UARTEx_SetTxFifoThreshold>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000a2c:	f000 f884 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a34:	f003 fda5 	bl	8004582 <HAL_UARTEx_SetRxFifoThreshold>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000a3e:	f000 f87b 	bl	8000b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a44:	f003 fd26 	bl	8004494 <HAL_UARTEx_DisableFifoMode>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000a4e:	f000 f873 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001bc 	.word	0x200001bc
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	000f4240 	.word	0x000f4240

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b2c <MX_GPIO_Init+0xc8>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a2b      	ldr	r2, [pc, #172]	@ (8000b2c <MX_GPIO_Init+0xc8>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b29      	ldr	r3, [pc, #164]	@ (8000b2c <MX_GPIO_Init+0xc8>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <MX_GPIO_Init+0xc8>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	4a25      	ldr	r2, [pc, #148]	@ (8000b2c <MX_GPIO_Init+0xc8>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9e:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <MX_GPIO_Init+0xc8>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <MX_GPIO_Init+0xc8>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4a1f      	ldr	r2, [pc, #124]	@ (8000b2c <MX_GPIO_Init+0xc8>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <MX_GPIO_Init+0xc8>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(eno_rst_GPIO_Port, eno_rst_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac8:	4819      	ldr	r0, [pc, #100]	@ (8000b30 <MX_GPIO_Init+0xcc>)
 8000aca:	f000 fecd 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : eno_rst_Pin */
  GPIO_InitStruct.Pin = eno_rst_Pin;
 8000ace:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(eno_rst_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4812      	ldr	r0, [pc, #72]	@ (8000b30 <MX_GPIO_Init+0xcc>)
 8000ae8:	f000 fd3c 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : lmt_sw5_Pin lmt_sw6_Pin lmt_sw7_Pin lmt_sw8_Pin */
  GPIO_InitStruct.Pin = lmt_sw5_Pin|lmt_sw6_Pin|lmt_sw7_Pin|lmt_sw8_Pin;
 8000aec:	233c      	movs	r3, #60	@ 0x3c
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MX_GPIO_Init+0xcc>)
 8000b02:	f000 fd2f 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : lmt_sw1_Pin lmt_sw2_Pin lmt_sw3_Pin lmt_sw4_Pin */
  GPIO_InitStruct.Pin = lmt_sw1_Pin|lmt_sw2_Pin|lmt_sw3_Pin|lmt_sw4_Pin;
 8000b06:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_GPIO_Init+0xd0>)
 8000b1e:	f000 fd21 	bl	8001564 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000800 	.word	0x48000800
 8000b34:	48000400 	.word	0x48000400

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b56:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b66:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_MspInit+0x44>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b7a:	f001 f863 	bl	8001c44 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09e      	sub	sp, #120	@ 0x78
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2254      	movs	r2, #84	@ 0x54
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 ff48 	bl	8004a42 <memset>
  if(hi2c->Instance==I2C1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c34 <HAL_I2C_MspInit+0xa8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d136      	bne.n	8000c2a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bbc:	2340      	movs	r3, #64	@ 0x40
 8000bbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fd79 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bd4:	f7ff ffb0 	bl	8000b38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <HAL_I2C_MspInit+0xac>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bdc:	4a16      	ldr	r2, [pc, #88]	@ (8000c38 <HAL_I2C_MspInit+0xac>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <HAL_I2C_MspInit+0xac>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000bf0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bf4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c02:	2304      	movs	r3, #4
 8000c04:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <HAL_I2C_MspInit+0xb0>)
 8000c0e:	f000 fca9 	bl	8001564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_I2C_MspInit+0xac>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_I2C_MspInit+0xac>)
 8000c18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_I2C_MspInit+0xac>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3778      	adds	r7, #120	@ 0x78
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400

08000c40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c60:	d13a      	bne.n	8000cd8 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c62:	4b5b      	ldr	r3, [pc, #364]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	4a5a      	ldr	r2, [pc, #360]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c6e:	4b58      	ldr	r3, [pc, #352]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b55      	ldr	r3, [pc, #340]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a54      	ldr	r2, [pc, #336]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b52      	ldr	r3, [pc, #328]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8000c92:	2303      	movs	r3, #3
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb0:	f000 fc58 	bl	8001564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd2:	f000 fc47 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000cd6:	e077      	b.n	8000dc8 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd4 <HAL_TIM_Encoder_MspInit+0x194>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d128      	bne.n	8000d34 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cee:	4b38      	ldr	r3, [pc, #224]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b35      	ldr	r3, [pc, #212]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a34      	ldr	r2, [pc, #208]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8000d12:	2330      	movs	r3, #48	@ 0x30
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d22:	2302      	movs	r3, #2
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	482a      	ldr	r0, [pc, #168]	@ (8000dd8 <HAL_TIM_Encoder_MspInit+0x198>)
 8000d2e:	f000 fc19 	bl	8001564 <HAL_GPIO_Init>
}
 8000d32:	e049      	b.n	8000dc8 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a28      	ldr	r2, [pc, #160]	@ (8000ddc <HAL_TIM_Encoder_MspInit+0x19c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d144      	bne.n	8000dc8 <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	4a17      	ldr	r2, [pc, #92]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_TIM_Encoder_MspInit+0x190>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3_A_Pin;
 8000d86:	2304      	movs	r3, #4
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d96:	2302      	movs	r3, #2
 8000d98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <HAL_TIM_Encoder_MspInit+0x198>)
 8000da2:	f000 fbdf 	bl	8001564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC3_B_Pin;
 8000da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8000db8:	2301      	movs	r3, #1
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ENC3_B_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8000dc4:	f000 fbce 	bl	8001564 <HAL_GPIO_Init>
}
 8000dc8:	bf00      	nop
 8000dca:	3738      	adds	r7, #56	@ 0x38
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40000400 	.word	0x40000400
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	40000c00 	.word	0x40000c00
 8000de0:	48000800 	.word	0x48000800

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09e      	sub	sp, #120	@ 0x78
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	2254      	movs	r2, #84	@ 0x54
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 fe1c 	bl	8004a42 <memset>
  if(huart->Instance==USART2)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <HAL_UART_MspInit+0xb8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d13e      	bne.n	8000e92 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fc4d 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e2c:	f7ff fe84 	bl	8000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <HAL_UART_MspInit+0xbc>)
 8000e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e34:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea0 <HAL_UART_MspInit+0xbc>)
 8000e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <HAL_UART_MspInit+0xbc>)
 8000e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_UART_MspInit+0xbc>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <HAL_UART_MspInit+0xbc>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <HAL_UART_MspInit+0xbc>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e60:	230c      	movs	r3, #12
 8000e62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e70:	2307      	movs	r3, #7
 8000e72:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7e:	f000 fb71 	bl	8001564 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2026      	movs	r0, #38	@ 0x26
 8000e88:	f000 fa77 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e8c:	2026      	movs	r0, #38	@ 0x26
 8000e8e:	f000 fa8e 	bl	80013ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3778      	adds	r7, #120	@ 0x78
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f000 f923 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <USART2_IRQHandler+0x10>)
 8000f0a:	f002 fa05 	bl	8003318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001bc 	.word	0x200001bc

08000f18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e00a      	b.n	8000f40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f2a:	f3af 8000 	nop.w
 8000f2e:	4601      	mov	r1, r0
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	60ba      	str	r2, [r7, #8]
 8000f36:	b2ca      	uxtb	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbf0      	blt.n	8000f2a <_read+0x12>
  }

  return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_isatty>:

int _isatty(int file)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f003 fd78 	bl	8004ae0 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20020000 	.word	0x20020000
 800101c:	00000400 	.word	0x00000400
 8001020:	20000250 	.word	0x20000250
 8001024:	200003a8 	.word	0x200003a8

08001028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <SystemInit+0x20>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <SystemInit+0x20>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800104c:	480d      	ldr	r0, [pc, #52]	@ (8001084 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001050:	f7ff ffea 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <LoopForever+0x6>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	@ (800108c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <LoopForever+0xe>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <LoopForever+0x12>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	@ (8001098 <LoopForever+0x16>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f003 fd37 	bl	8004aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800107e:	f7ff facb 	bl	8000618 <main>

08001082 <LoopForever>:

LoopForever:
    b LoopForever
 8001082:	e7fe      	b.n	8001082 <LoopForever>
  ldr   r0, =_estack
 8001084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800108c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001090:	08005730 	.word	0x08005730
  ldr r2, =_sbss
 8001094:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001098:	200003a4 	.word	0x200003a4

0800109c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC1_2_IRQHandler>

0800109e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f95b 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ae:	200f      	movs	r0, #15
 80010b0:	f000 f80e 	bl	80010d0 <HAL_InitTick>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	e001      	b.n	80010c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c0:	f7ff fd40 	bl	8000b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c4:	79fb      	ldrb	r3, [r7, #7]

}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_InitTick+0x68>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d022      	beq.n	800112a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_InitTick+0x6c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_InitTick+0x68>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f966 	bl	80013ca <HAL_SYSTICK_Config>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10f      	bne.n	8001124 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d809      	bhi.n	800111e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110a:	2200      	movs	r2, #0
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	f000 f932 	bl	800137a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <HAL_InitTick+0x70>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e007      	b.n	800112e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e004      	b.n	800112e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e001      	b.n	800112e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000008 	.word	0x20000008
 800113c:	20000000 	.word	0x20000000
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_IncTick+0x1c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_IncTick+0x20>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4413      	add	r3, r2
 8001152:	4a03      	ldr	r2, [pc, #12]	@ (8001160 <HAL_IncTick+0x1c>)
 8001154:	6013      	str	r3, [r2, #0]
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	20000254 	.word	0x20000254
 8001164:	20000008 	.word	0x20000008

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000254 	.word	0x20000254

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d004      	beq.n	80011a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <HAL_Delay+0x40>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a4:	bf00      	nop
 80011a6:	f7ff ffdf 	bl	8001168 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d8f7      	bhi.n	80011a6 <HAL_Delay+0x26>
  {
  }
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000008 	.word	0x20000008

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4907      	ldr	r1, [pc, #28]	@ (8001260 <__NVIC_EnableIRQ+0x38>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	@ (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	@ (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	@ 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff29 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001388:	f7ff ff40 	bl	800120c <__NVIC_GetPriorityGrouping>
 800138c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7ff ff90 	bl	80012b8 <NVIC_EncodePriority>
 8001398:	4602      	mov	r2, r0
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff5f 	bl	8001264 <__NVIC_SetPriority>
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff33 	bl	8001228 <__NVIC_EnableIRQ>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ffa4 	bl	8001320 <SysTick_Config>
 80013d8:	4603      	mov	r3, r0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d005      	beq.n	8001406 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2204      	movs	r2, #4
 80013fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e037      	b.n	8001476 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 020e 	bic.w	r2, r2, #14
 8001414:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001424:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0201 	bic.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f003 021f 	and.w	r2, r3, #31
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	2101      	movs	r1, #1
 8001444:	fa01 f202 	lsl.w	r2, r1, r2
 8001448:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001452:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00c      	beq.n	8001476 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001466:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800146a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001474:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d00d      	beq.n	80014c8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2204      	movs	r2, #4
 80014b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e047      	b.n	8001558 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020e 	bic.w	r2, r2, #14
 80014d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001514:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00c      	beq.n	8001538 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800152c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001536:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	4798      	blx	r3
    }
  }
  return status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001572:	e15a      	b.n	800182a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	4013      	ands	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 814c 	beq.w	8001824 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d005      	beq.n	80015a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d130      	bne.n	8001606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015da:	2201      	movs	r2, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	f003 0201 	and.w	r2, r3, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b03      	cmp	r3, #3
 8001610:	d017      	beq.n	8001642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d123      	bne.n	8001696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	6939      	ldr	r1, [r7, #16]
 8001692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	2203      	movs	r2, #3
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0203 	and.w	r2, r3, #3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80a6 	beq.w	8001824 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001848 <HAL_GPIO_Init+0x2e4>)
 80016da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001848 <HAL_GPIO_Init+0x2e4>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80016e4:	4b58      	ldr	r3, [pc, #352]	@ (8001848 <HAL_GPIO_Init+0x2e4>)
 80016e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f0:	4a56      	ldr	r2, [pc, #344]	@ (800184c <HAL_GPIO_Init+0x2e8>)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800171a:	d01f      	beq.n	800175c <HAL_GPIO_Init+0x1f8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a4c      	ldr	r2, [pc, #304]	@ (8001850 <HAL_GPIO_Init+0x2ec>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d019      	beq.n	8001758 <HAL_GPIO_Init+0x1f4>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a4b      	ldr	r2, [pc, #300]	@ (8001854 <HAL_GPIO_Init+0x2f0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d013      	beq.n	8001754 <HAL_GPIO_Init+0x1f0>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a4a      	ldr	r2, [pc, #296]	@ (8001858 <HAL_GPIO_Init+0x2f4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d00d      	beq.n	8001750 <HAL_GPIO_Init+0x1ec>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a49      	ldr	r2, [pc, #292]	@ (800185c <HAL_GPIO_Init+0x2f8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d007      	beq.n	800174c <HAL_GPIO_Init+0x1e8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a48      	ldr	r2, [pc, #288]	@ (8001860 <HAL_GPIO_Init+0x2fc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d101      	bne.n	8001748 <HAL_GPIO_Init+0x1e4>
 8001744:	2305      	movs	r3, #5
 8001746:	e00a      	b.n	800175e <HAL_GPIO_Init+0x1fa>
 8001748:	2306      	movs	r3, #6
 800174a:	e008      	b.n	800175e <HAL_GPIO_Init+0x1fa>
 800174c:	2304      	movs	r3, #4
 800174e:	e006      	b.n	800175e <HAL_GPIO_Init+0x1fa>
 8001750:	2303      	movs	r3, #3
 8001752:	e004      	b.n	800175e <HAL_GPIO_Init+0x1fa>
 8001754:	2302      	movs	r3, #2
 8001756:	e002      	b.n	800175e <HAL_GPIO_Init+0x1fa>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_GPIO_Init+0x1fa>
 800175c:	2300      	movs	r3, #0
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	f002 0203 	and.w	r2, r2, #3
 8001764:	0092      	lsls	r2, r2, #2
 8001766:	4093      	lsls	r3, r2
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176e:	4937      	ldr	r1, [pc, #220]	@ (800184c <HAL_GPIO_Init+0x2e8>)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800177c:	4b39      	ldr	r3, [pc, #228]	@ (8001864 <HAL_GPIO_Init+0x300>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017a0:	4a30      	ldr	r2, [pc, #192]	@ (8001864 <HAL_GPIO_Init+0x300>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001864 <HAL_GPIO_Init+0x300>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017ca:	4a26      	ldr	r2, [pc, #152]	@ (8001864 <HAL_GPIO_Init+0x300>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_GPIO_Init+0x300>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <HAL_GPIO_Init+0x300>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <HAL_GPIO_Init+0x300>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800181e:	4a11      	ldr	r2, [pc, #68]	@ (8001864 <HAL_GPIO_Init+0x300>)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	f47f ae9d 	bne.w	8001574 <HAL_GPIO_Init+0x10>
  }
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000
 8001850:	48000400 	.word	0x48000400
 8001854:	48000800 	.word	0x48000800
 8001858:	48000c00 	.word	0x48000c00
 800185c:	48001000 	.word	0x48001000
 8001860:	48001400 	.word	0x48001400
 8001864:	40010400 	.word	0x40010400

08001868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
 8001874:	4613      	mov	r3, r2
 8001876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001878:	787b      	ldrb	r3, [r7, #1]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001884:	e002      	b.n	800188c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e08d      	b.n	80019c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff f964 	bl	8000b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	@ 0x24
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	e006      	b.n	8001920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800191e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d108      	bne.n	800193a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	e007      	b.n	800194a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001948:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800195c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800196c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69d9      	ldr	r1, [r3, #28]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b20      	cmp	r3, #32
 80019e2:	d138      	bne.n	8001a56 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e032      	b.n	8001a58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2224      	movs	r2, #36	@ 0x24
 80019fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a20:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0201 	orr.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
  }
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b20      	cmp	r3, #32
 8001a78:	d139      	bne.n	8001aee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e033      	b.n	8001af0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2224      	movs	r2, #36	@ 0x24
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ab6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0201 	orr.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001aee:	2302      	movs	r3, #2
  }
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d141      	bne.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b16:	d131      	bne.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b18:	4b47      	ldr	r3, [pc, #284]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b1e:	4a46      	ldr	r2, [pc, #280]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b28:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b30:	4a41      	ldr	r2, [pc, #260]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b38:	4b40      	ldr	r3, [pc, #256]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2232      	movs	r2, #50	@ 0x32
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	4a3f      	ldr	r2, [pc, #252]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b4e:	e002      	b.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b56:	4b38      	ldr	r3, [pc, #224]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b62:	d102      	bne.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f2      	bne.n	8001b50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b6a:	4b33      	ldr	r3, [pc, #204]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b76:	d158      	bne.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e057      	b.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b82:	4a2d      	ldr	r2, [pc, #180]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b8c:	e04d      	b.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b94:	d141      	bne.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b96:	4b28      	ldr	r3, [pc, #160]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba2:	d131      	bne.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001baa:	4a23      	ldr	r2, [pc, #140]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb4:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2232      	movs	r2, #50	@ 0x32
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	4a1c      	ldr	r2, [pc, #112]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	0c9b      	lsrs	r3, r3, #18
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bda:	e002      	b.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bee:	d102      	bne.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f2      	bne.n	8001bdc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c02:	d112      	bne.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e011      	b.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c18:	e007      	b.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c22:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c28:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	431bde83 	.word	0x431bde83

08001c44 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c52:	6093      	str	r3, [r2, #8]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40007000 	.word	0x40007000

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e2fe      	b.n	8002274 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d075      	beq.n	8001d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4b97      	ldr	r3, [pc, #604]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4b94      	ldr	r3, [pc, #592]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d102      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3e>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x44>
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	4b8d      	ldr	r3, [pc, #564]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d05b      	beq.n	8001d6c <HAL_RCC_OscConfig+0x108>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d157      	bne.n	8001d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e2d9      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x74>
 8001cca:	4b85      	ldr	r3, [pc, #532]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a84      	ldr	r2, [pc, #528]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x98>
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cfc:	4b78      	ldr	r3, [pc, #480]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a77      	ldr	r2, [pc, #476]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b75      	ldr	r3, [pc, #468]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a74      	ldr	r2, [pc, #464]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fa24 	bl	8001168 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fa20 	bl	8001168 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	@ 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e29e      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d36:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xc0>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff fa10 	bl	8001168 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fa0c 	bl	8001168 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	@ 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e28a      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5e:	4b60      	ldr	r3, [pc, #384]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0xe8>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d075      	beq.n	8001e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7a:	4b59      	ldr	r3, [pc, #356]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d84:	4b56      	ldr	r3, [pc, #344]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d102      	bne.n	8001d9a <HAL_RCC_OscConfig+0x136>
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_OscConfig+0x13c>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d11f      	bne.n	8001de0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_OscConfig+0x154>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e25d      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b49      	ldr	r3, [pc, #292]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	4946      	ldr	r1, [pc, #280]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dcc:	4b45      	ldr	r3, [pc, #276]	@ (8001ee4 <HAL_RCC_OscConfig+0x280>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f97d 	bl	80010d0 <HAL_InitTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d043      	beq.n	8001e64 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e249      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f9b8 	bl	8001168 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff f9b4 	bl	8001168 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e232      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	061b      	lsls	r3, r3, #24
 8001e28:	492d      	ldr	r1, [pc, #180]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
 8001e2e:	e01a      	b.n	8001e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f994 	bl	8001168 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff f990 	bl	8001168 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e20e      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1e0>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d041      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e80:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7ff f96d 	bl	8001168 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff f969 	bl	8001168 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1e7      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0ef      	beq.n	8001e92 <HAL_RCC_OscConfig+0x22e>
 8001eb2:	e020      	b.n	8001ef6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eba:	4a09      	ldr	r2, [pc, #36]	@ (8001ee0 <HAL_RCC_OscConfig+0x27c>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f950 	bl	8001168 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eca:	e00d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7ff f94c 	bl	8001168 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d906      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1ca      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ea      	bne.n	8001ecc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80a6 	beq.w	8002050 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f08:	4b84      	ldr	r3, [pc, #528]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2b4>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x2b6>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00d      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f22:	4a7e      	ldr	r2, [pc, #504]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f36:	2301      	movs	r3, #1
 8001f38:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3a:	4b79      	ldr	r3, [pc, #484]	@ (8002120 <HAL_RCC_OscConfig+0x4bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f46:	4b76      	ldr	r3, [pc, #472]	@ (8002120 <HAL_RCC_OscConfig+0x4bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a75      	ldr	r2, [pc, #468]	@ (8002120 <HAL_RCC_OscConfig+0x4bc>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7ff f909 	bl	8001168 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff f905 	bl	8001168 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e183      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002120 <HAL_RCC_OscConfig+0x4bc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d108      	bne.n	8001f92 <HAL_RCC_OscConfig+0x32e>
 8001f80:	4b66      	ldr	r3, [pc, #408]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	4a65      	ldr	r2, [pc, #404]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f90:	e024      	b.n	8001fdc <HAL_RCC_OscConfig+0x378>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d110      	bne.n	8001fbc <HAL_RCC_OscConfig+0x358>
 8001f9a:	4b60      	ldr	r3, [pc, #384]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa0:	4a5e      	ldr	r2, [pc, #376]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001faa:	4b5c      	ldr	r3, [pc, #368]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb0:	4a5a      	ldr	r2, [pc, #360]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fba:	e00f      	b.n	8001fdc <HAL_RCC_OscConfig+0x378>
 8001fbc:	4b57      	ldr	r3, [pc, #348]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc2:	4a56      	ldr	r2, [pc, #344]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fcc:	4b53      	ldr	r3, [pc, #332]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	4a52      	ldr	r2, [pc, #328]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d016      	beq.n	8002012 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f8c0 	bl	8001168 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fec:	f7ff f8bc 	bl	8001168 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e138      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002002:	4b46      	ldr	r3, [pc, #280]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ed      	beq.n	8001fec <HAL_RCC_OscConfig+0x388>
 8002010:	e015      	b.n	800203e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002012:	f7ff f8a9 	bl	8001168 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7ff f8a5 	bl	8001168 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e121      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002030:	4b3a      	ldr	r3, [pc, #232]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ed      	bne.n	800201a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002044:	4b35      	ldr	r3, [pc, #212]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002048:	4a34      	ldr	r2, [pc, #208]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d03c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01c      	beq.n	800209e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002064:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002066:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800206a:	4a2c      	ldr	r2, [pc, #176]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7ff f878 	bl	8001168 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800207c:	f7ff f874 	bl	8001168 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0f2      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800208e:	4b23      	ldr	r3, [pc, #140]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 8002090:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ef      	beq.n	800207c <HAL_RCC_OscConfig+0x418>
 800209c:	e01b      	b.n	80020d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800209e:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020a4:	4a1d      	ldr	r2, [pc, #116]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ae:	f7ff f85b 	bl	8001168 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b6:	f7ff f857 	bl	8001168 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0d5      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c8:	4b14      	ldr	r3, [pc, #80]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ef      	bne.n	80020b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80c9 	beq.w	8002272 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e0:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	f000 8083 	beq.w	80021f4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d15e      	bne.n	80021b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a08      	ldr	r2, [pc, #32]	@ (800211c <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7ff f831 	bl	8001168 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002108:	e00c      	b.n	8002124 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7ff f82d 	bl	8001168 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d905      	bls.n	8002124 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0ab      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002124:	4b55      	ldr	r3, [pc, #340]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ec      	bne.n	800210a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002130:	4b52      	ldr	r3, [pc, #328]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b52      	ldr	r3, [pc, #328]	@ (8002280 <HAL_RCC_OscConfig+0x61c>)
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6a11      	ldr	r1, [r2, #32]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002140:	3a01      	subs	r2, #1
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800214a:	0212      	lsls	r2, r2, #8
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002152:	0852      	lsrs	r2, r2, #1
 8002154:	3a01      	subs	r2, #1
 8002156:	0552      	lsls	r2, r2, #21
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800215e:	0852      	lsrs	r2, r2, #1
 8002160:	3a01      	subs	r2, #1
 8002162:	0652      	lsls	r2, r2, #25
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800216a:	06d2      	lsls	r2, r2, #27
 800216c:	430a      	orrs	r2, r1
 800216e:	4943      	ldr	r1, [pc, #268]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 8002170:	4313      	orrs	r3, r2
 8002172:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a40      	ldr	r2, [pc, #256]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002180:	4b3e      	ldr	r3, [pc, #248]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a3d      	ldr	r2, [pc, #244]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 8002186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800218a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe ffec 	bl	8001168 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7fe ffe8 	bl	8001168 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e066      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	4b35      	ldr	r3, [pc, #212]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x530>
 80021b2:	e05e      	b.n	8002272 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b31      	ldr	r3, [pc, #196]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a30      	ldr	r2, [pc, #192]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 80021ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe ffd2 	bl	8001168 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe ffce 	bl	8001168 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e04c      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021da:	4b28      	ldr	r3, [pc, #160]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021e6:	4b25      	ldr	r3, [pc, #148]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4924      	ldr	r1, [pc, #144]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 80021ec:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <HAL_RCC_OscConfig+0x620>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	60cb      	str	r3, [r1, #12]
 80021f2:	e03e      	b.n	8002272 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e039      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002200:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <HAL_RCC_OscConfig+0x618>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	429a      	cmp	r2, r3
 8002212:	d12c      	bne.n	800226e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	3b01      	subs	r3, #1
 8002220:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d123      	bne.n	800226e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d11b      	bne.n	800226e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002240:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d113      	bne.n	800226e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	3b01      	subs	r3, #1
 8002254:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d109      	bne.n	800226e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	3b01      	subs	r3, #1
 8002268:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	019f800c 	.word	0x019f800c
 8002284:	feeefffc 	.word	0xfeeefffc

08002288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e11e      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b91      	ldr	r3, [pc, #580]	@ (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b8e      	ldr	r3, [pc, #568]	@ (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	498c      	ldr	r1, [pc, #560]	@ (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b8a      	ldr	r3, [pc, #552]	@ (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e106      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d073      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d129      	bne.n	8002338 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e4:	4b81      	ldr	r3, [pc, #516]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0f4      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022f4:	f000 f99e 	bl	8002634 <RCC_GetSysClockFreqFromPLLSource>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4a7c      	ldr	r2, [pc, #496]	@ (80024f0 <HAL_RCC_ClockConfig+0x268>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d93f      	bls.n	8002382 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002302:	4b7a      	ldr	r3, [pc, #488]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002316:	2b00      	cmp	r3, #0
 8002318:	d033      	beq.n	8002382 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800231e:	2b00      	cmp	r3, #0
 8002320:	d12f      	bne.n	8002382 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002322:	4b72      	ldr	r3, [pc, #456]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800232a:	4a70      	ldr	r2, [pc, #448]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 800232c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002330:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002332:	2380      	movs	r3, #128	@ 0x80
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e024      	b.n	8002382 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d107      	bne.n	8002350 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002340:	4b6a      	ldr	r3, [pc, #424]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0c6      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002350:	4b66      	ldr	r3, [pc, #408]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0be      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002360:	f000 f8ce 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002364:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4a61      	ldr	r2, [pc, #388]	@ (80024f0 <HAL_RCC_ClockConfig+0x268>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d909      	bls.n	8002382 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800236e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002376:	4a5d      	ldr	r2, [pc, #372]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800237c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002382:	4b5a      	ldr	r3, [pc, #360]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4957      	ldr	r1, [pc, #348]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002394:	f7fe fee8 	bl	8001168 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fe fee4 	bl	8001168 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e095      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	4b4e      	ldr	r3, [pc, #312]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 020c 	and.w	r2, r3, #12
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1eb      	bne.n	800239c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b43      	ldr	r3, [pc, #268]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a42      	ldr	r2, [pc, #264]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023f4:	4b3d      	ldr	r3, [pc, #244]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80023fc:	4a3b      	ldr	r2, [pc, #236]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 80023fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002402:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4936      	ldr	r1, [pc, #216]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
 8002416:	e008      	b.n	800242a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b80      	cmp	r3, #128	@ 0x80
 800241c:	d105      	bne.n	800242a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800241e:	4b33      	ldr	r3, [pc, #204]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4a32      	ldr	r2, [pc, #200]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002424:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002428:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242a:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <HAL_RCC_ClockConfig+0x260>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d21d      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002438:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_RCC_ClockConfig+0x260>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 020f 	bic.w	r2, r3, #15
 8002440:	4929      	ldr	r1, [pc, #164]	@ (80024e8 <HAL_RCC_ClockConfig+0x260>)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002448:	f7fe fe8e 	bl	8001168 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe fe8a 	bl	8001168 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e03b      	b.n	80024de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <HAL_RCC_ClockConfig+0x260>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d1ed      	bne.n	8002450 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4917      	ldr	r1, [pc, #92]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249e:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490f      	ldr	r1, [pc, #60]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b2:	f000 f825 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <HAL_RCC_ClockConfig+0x264>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490c      	ldr	r1, [pc, #48]	@ (80024f4 <HAL_RCC_ClockConfig+0x26c>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_RCC_ClockConfig+0x270>)
 80024d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_RCC_ClockConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fdfa 	bl	80010d0 <HAL_InitTick>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	04c4b400 	.word	0x04c4b400
 80024f4:	080056ac 	.word	0x080056ac
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002506:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b04      	cmp	r3, #4
 8002510:	d102      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002512:	4b2a      	ldr	r3, [pc, #168]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e047      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002518:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d102      	bne.n	800252a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002524:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e03e      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800252a:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d136      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002540:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3301      	adds	r3, #1
 800254c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d10c      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002554:	4a1a      	ldr	r2, [pc, #104]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	4a16      	ldr	r2, [pc, #88]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	0a12      	lsrs	r2, r2, #8
 8002562:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	617b      	str	r3, [r7, #20]
      break;
 800256c:	e00c      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800256e:	4a13      	ldr	r2, [pc, #76]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4a10      	ldr	r2, [pc, #64]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	0a12      	lsrs	r2, r2, #8
 800257c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
      break;
 8002586:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002588:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0e5b      	lsrs	r3, r3, #25
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e001      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025a8:	693b      	ldr	r3, [r7, #16]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	007a1200 	.word	0x007a1200

080025c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025e0:	f7ff fff0 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4904      	ldr	r1, [pc, #16]	@ (8002604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	080056bc 	.word	0x080056bc

08002608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800260c:	f7ff ffda 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0adb      	lsrs	r3, r3, #11
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4904      	ldr	r1, [pc, #16]	@ (8002630 <HAL_RCC_GetPCLK2Freq+0x28>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	080056bc 	.word	0x080056bc

08002634 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800263a:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002644:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d10c      	bne.n	8002672 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002658:	4a17      	ldr	r2, [pc, #92]	@ (80026b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002662:	68d2      	ldr	r2, [r2, #12]
 8002664:	0a12      	lsrs	r2, r2, #8
 8002666:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
    break;
 8002670:	e00c      	b.n	800268c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002672:	4a12      	ldr	r2, [pc, #72]	@ (80026bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	4a0e      	ldr	r2, [pc, #56]	@ (80026b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800267c:	68d2      	ldr	r2, [r2, #12]
 800267e:	0a12      	lsrs	r2, r2, #8
 8002680:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    break;
 800268a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0e5b      	lsrs	r3, r3, #25
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026a6:	687b      	ldr	r3, [r7, #4]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40021000 	.word	0x40021000
 80026b8:	007a1200 	.word	0x007a1200
 80026bc:	00f42400 	.word	0x00f42400

080026c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026c8:	2300      	movs	r3, #0
 80026ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026cc:	2300      	movs	r3, #0
 80026ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8098 	beq.w	800280e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e2:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10d      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	4b40      	ldr	r3, [pc, #256]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	4a3f      	ldr	r2, [pc, #252]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fa:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002706:	2301      	movs	r3, #1
 8002708:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800270a:	4b3a      	ldr	r3, [pc, #232]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a39      	ldr	r2, [pc, #228]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002716:	f7fe fd27 	bl	8001168 <HAL_GetTick>
 800271a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800271c:	e009      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe fd23 	bl	8001168 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d902      	bls.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	74fb      	strb	r3, [r7, #19]
        break;
 8002730:	e005      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002732:	4b30      	ldr	r3, [pc, #192]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0ef      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d159      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002744:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800274e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01e      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	d019      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002760:	4b23      	ldr	r3, [pc, #140]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800276a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800276c:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002772:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800277c:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	4a1b      	ldr	r2, [pc, #108]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800278c:	4a18      	ldr	r2, [pc, #96]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fce3 	bl	8001168 <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a4:	e00b      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fcdf 	bl	8001168 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d902      	bls.n	80027be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	74fb      	strb	r3, [r7, #19]
            break;
 80027bc:	e006      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027be:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ec      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10b      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d2:	4b07      	ldr	r3, [pc, #28]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e0:	4903      	ldr	r1, [pc, #12]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027e8:	e008      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027ea:	7cfb      	ldrb	r3, [r7, #19]
 80027ec:	74bb      	strb	r3, [r7, #18]
 80027ee:	e005      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027fc:	7c7b      	ldrb	r3, [r7, #17]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002802:	4ba7      	ldr	r3, [pc, #668]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	4aa6      	ldr	r2, [pc, #664]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800280c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800281a:	4ba1      	ldr	r3, [pc, #644]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002820:	f023 0203 	bic.w	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	499d      	ldr	r1, [pc, #628]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800283c:	4b98      	ldr	r3, [pc, #608]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002842:	f023 020c 	bic.w	r2, r3, #12
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4995      	ldr	r1, [pc, #596]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800285e:	4b90      	ldr	r3, [pc, #576]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002864:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	498c      	ldr	r1, [pc, #560]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002880:	4b87      	ldr	r3, [pc, #540]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002886:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	4984      	ldr	r1, [pc, #528]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028a2:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	497b      	ldr	r1, [pc, #492]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c4:	4b76      	ldr	r3, [pc, #472]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	4973      	ldr	r1, [pc, #460]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e6:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	496a      	ldr	r1, [pc, #424]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002908:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4962      	ldr	r1, [pc, #392]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800292a:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002930:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	4959      	ldr	r1, [pc, #356]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800294c:	4b54      	ldr	r3, [pc, #336]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002952:	f023 0203 	bic.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	4951      	ldr	r1, [pc, #324]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800296e:	4b4c      	ldr	r3, [pc, #304]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002974:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	4948      	ldr	r1, [pc, #288]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002990:	4b43      	ldr	r3, [pc, #268]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002996:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4940      	ldr	r1, [pc, #256]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ae:	d105      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b0:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4a3a      	ldr	r2, [pc, #232]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d015      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029c8:	4b35      	ldr	r3, [pc, #212]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d6:	4932      	ldr	r1, [pc, #200]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029e6:	d105      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e8:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d015      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a00:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0e:	4924      	ldr	r1, [pc, #144]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a20:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d015      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a38:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a46:	4916      	ldr	r1, [pc, #88]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a56:	d105      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a10      	ldr	r2, [pc, #64]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d019      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	4908      	ldr	r1, [pc, #32]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a02      	ldr	r2, [pc, #8]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a9a:	60d3      	str	r3, [r2, #12]
 8002a9c:	e002      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ab0:	4b29      	ldr	r3, [pc, #164]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	4926      	ldr	r1, [pc, #152]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ace:	d105      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ad0:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a20      	ldr	r2, [pc, #128]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ada:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af6:	4918      	ldr	r1, [pc, #96]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b06:	d105      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b08:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a12      	ldr	r2, [pc, #72]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b12:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b20:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	490a      	ldr	r1, [pc, #40]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e097      	b.n	8002ca0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe f85b 	bl	8000c40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8002ba0:	f023 0307 	bic.w	r3, r3, #7
 8002ba4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3304      	adds	r3, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f000 f907 	bl	8002dc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002bfc:	f023 030c 	bic.w	r3, r3, #12
 8002c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	011a      	lsls	r2, r3, #4
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	031b      	lsls	r3, r3, #12
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002c3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002c42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d110      	bne.n	8002cfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cde:	7b7b      	ldrb	r3, [r7, #13]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d001      	beq.n	8002ce8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e069      	b.n	8002dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf8:	e031      	b.n	8002d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d110      	bne.n	8002d22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d06:	7b3b      	ldrb	r3, [r7, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d001      	beq.n	8002d10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e055      	b.n	8002dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d20:	e01d      	b.n	8002d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d28:	7bbb      	ldrb	r3, [r7, #14]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d2e:	7b7b      	ldrb	r3, [r7, #13]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d102      	bne.n	8002d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d34:	7b3b      	ldrb	r3, [r7, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e03e      	b.n	8002dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_TIM_Encoder_Start+0xc4>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d008      	beq.n	8002d7c <HAL_TIM_Encoder_Start+0xd4>
 8002d6a:	e00f      	b.n	8002d8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2201      	movs	r2, #1
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 f8f9 	bl	8002f6c <TIM_CCxChannelCmd>
      break;
 8002d7a:	e016      	b.n	8002daa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	2104      	movs	r1, #4
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f8f1 	bl	8002f6c <TIM_CCxChannelCmd>
      break;
 8002d8a:	e00e      	b.n	8002daa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2201      	movs	r2, #1
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f8e9 	bl	8002f6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2104      	movs	r1, #4
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f8e2 	bl	8002f6c <TIM_CCxChannelCmd>
      break;
 8002da8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a4c      	ldr	r2, [pc, #304]	@ (8002f08 <TIM_Base_SetConfig+0x144>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d017      	beq.n	8002e0c <TIM_Base_SetConfig+0x48>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de2:	d013      	beq.n	8002e0c <TIM_Base_SetConfig+0x48>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a49      	ldr	r2, [pc, #292]	@ (8002f0c <TIM_Base_SetConfig+0x148>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00f      	beq.n	8002e0c <TIM_Base_SetConfig+0x48>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a48      	ldr	r2, [pc, #288]	@ (8002f10 <TIM_Base_SetConfig+0x14c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00b      	beq.n	8002e0c <TIM_Base_SetConfig+0x48>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a47      	ldr	r2, [pc, #284]	@ (8002f14 <TIM_Base_SetConfig+0x150>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d007      	beq.n	8002e0c <TIM_Base_SetConfig+0x48>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a46      	ldr	r2, [pc, #280]	@ (8002f18 <TIM_Base_SetConfig+0x154>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_Base_SetConfig+0x48>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a45      	ldr	r2, [pc, #276]	@ (8002f1c <TIM_Base_SetConfig+0x158>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d108      	bne.n	8002e1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a39      	ldr	r2, [pc, #228]	@ (8002f08 <TIM_Base_SetConfig+0x144>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d023      	beq.n	8002e6e <TIM_Base_SetConfig+0xaa>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e2c:	d01f      	beq.n	8002e6e <TIM_Base_SetConfig+0xaa>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a36      	ldr	r2, [pc, #216]	@ (8002f0c <TIM_Base_SetConfig+0x148>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01b      	beq.n	8002e6e <TIM_Base_SetConfig+0xaa>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a35      	ldr	r2, [pc, #212]	@ (8002f10 <TIM_Base_SetConfig+0x14c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d017      	beq.n	8002e6e <TIM_Base_SetConfig+0xaa>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a34      	ldr	r2, [pc, #208]	@ (8002f14 <TIM_Base_SetConfig+0x150>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <TIM_Base_SetConfig+0xaa>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a33      	ldr	r2, [pc, #204]	@ (8002f18 <TIM_Base_SetConfig+0x154>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00f      	beq.n	8002e6e <TIM_Base_SetConfig+0xaa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a33      	ldr	r2, [pc, #204]	@ (8002f20 <TIM_Base_SetConfig+0x15c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0xaa>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a32      	ldr	r2, [pc, #200]	@ (8002f24 <TIM_Base_SetConfig+0x160>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0xaa>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a31      	ldr	r2, [pc, #196]	@ (8002f28 <TIM_Base_SetConfig+0x164>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0xaa>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a2c      	ldr	r2, [pc, #176]	@ (8002f1c <TIM_Base_SetConfig+0x158>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a18      	ldr	r2, [pc, #96]	@ (8002f08 <TIM_Base_SetConfig+0x144>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d013      	beq.n	8002ed4 <TIM_Base_SetConfig+0x110>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a1a      	ldr	r2, [pc, #104]	@ (8002f18 <TIM_Base_SetConfig+0x154>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00f      	beq.n	8002ed4 <TIM_Base_SetConfig+0x110>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f20 <TIM_Base_SetConfig+0x15c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00b      	beq.n	8002ed4 <TIM_Base_SetConfig+0x110>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a19      	ldr	r2, [pc, #100]	@ (8002f24 <TIM_Base_SetConfig+0x160>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d007      	beq.n	8002ed4 <TIM_Base_SetConfig+0x110>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a18      	ldr	r2, [pc, #96]	@ (8002f28 <TIM_Base_SetConfig+0x164>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <TIM_Base_SetConfig+0x110>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a13      	ldr	r2, [pc, #76]	@ (8002f1c <TIM_Base_SetConfig+0x158>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d103      	bne.n	8002edc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f023 0201 	bic.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	611a      	str	r2, [r3, #16]
  }
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40000c00 	.word	0x40000c00
 8002f18:	40013400 	.word	0x40013400
 8002f1c:	40015000 	.word	0x40015000
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800

08002f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	2201      	movs	r2, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	401a      	ands	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	621a      	str	r2, [r3, #32]
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e074      	b.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a34      	ldr	r2, [pc, #208]	@ (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a33      	ldr	r2, [pc, #204]	@ (80030cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a31      	ldr	r2, [pc, #196]	@ (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d108      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003014:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a21      	ldr	r2, [pc, #132]	@ (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003050:	d01d      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1d      	ldr	r2, [pc, #116]	@ (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a15      	ldr	r2, [pc, #84]	@ (80030cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a11      	ldr	r2, [pc, #68]	@ (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10c      	bne.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40013400 	.word	0x40013400
 80030d0:	40015000 	.word	0x40015000
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40014000 	.word	0x40014000

080030e4 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_TIMEx_ConfigEncoderIndex+0x18>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e02a      	b.n	8003152 <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f7ff ff0a 	bl	8002f2c <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311e:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	7b09      	ldrb	r1, [r1, #12]
 800312a:	2901      	cmp	r1, #1
 800312c:	d101      	bne.n	8003132 <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 800312e:	2120      	movs	r1, #32
 8003130:	e000      	b.n	8003134 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 8003132:	2100      	movs	r1, #0
 8003134:	4319      	orrs	r1, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	430b      	orrs	r3, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e042      	b.n	80031f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd fe30 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	@ 0x24
 8003188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fef7 	bl	8003f98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fbf8 	bl	80039a0 <UART_SetConfig>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e01b      	b.n	80031f2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 ff76 	bl	80040dc <UART_CheckIdleState>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b08a      	sub	sp, #40	@ 0x28
 80031fe:	af02      	add	r7, sp, #8
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003210:	2b20      	cmp	r3, #32
 8003212:	d17b      	bne.n	800330c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_UART_Transmit+0x26>
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e074      	b.n	800330e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2221      	movs	r2, #33	@ 0x21
 8003230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003234:	f7fd ff98 	bl	8001168 <HAL_GetTick>
 8003238:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003252:	d108      	bne.n	8003266 <HAL_UART_Transmit+0x6c>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e003      	b.n	800326e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800326e:	e030      	b.n	80032d2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2200      	movs	r2, #0
 8003278:	2180      	movs	r1, #128	@ 0x80
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 ffd8 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e03d      	b.n	800330e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	3302      	adds	r3, #2
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e007      	b.n	80032c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1c8      	bne.n	8003270 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2140      	movs	r1, #64	@ 0x40
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 ffa1 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e006      	b.n	800330e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b0ba      	sub	sp, #232	@ 0xe8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800333e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003342:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003346:	4013      	ands	r3, r2
 8003348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800334c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11b      	bne.n	800338c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d015      	beq.n	800338c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800336c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 82e3 	beq.w	8003948 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
      }
      return;
 800338a:	e2dd      	b.n	8003948 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800338c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8123 	beq.w	80035dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003396:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800339a:	4b8d      	ldr	r3, [pc, #564]	@ (80035d0 <HAL_UART_IRQHandler+0x2b8>)
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80033a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80033a6:	4b8b      	ldr	r3, [pc, #556]	@ (80035d4 <HAL_UART_IRQHandler+0x2bc>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8116 	beq.w	80035dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d011      	beq.n	80033e0 <HAL_UART_IRQHandler+0xc8>
 80033bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d011      	beq.n	8003410 <HAL_UART_IRQHandler+0xf8>
 80033ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2202      	movs	r2, #2
 80033fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d011      	beq.n	8003440 <HAL_UART_IRQHandler+0x128>
 800341c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2204      	movs	r2, #4
 800342e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d017      	beq.n	800347c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d105      	bne.n	8003464 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003458:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800345c:	4b5c      	ldr	r3, [pc, #368]	@ (80035d0 <HAL_UART_IRQHandler+0x2b8>)
 800345e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2208      	movs	r2, #8
 800346a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	f043 0208 	orr.w	r2, r3, #8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800347c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003484:	2b00      	cmp	r3, #0
 8003486:	d012      	beq.n	80034ae <HAL_UART_IRQHandler+0x196>
 8003488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800348c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00c      	beq.n	80034ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800349c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8249 	beq.w	800394c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80034ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d013      	beq.n	80034ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80034c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80034d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003502:	2b40      	cmp	r3, #64	@ 0x40
 8003504:	d005      	beq.n	8003512 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800350a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800350e:	2b00      	cmp	r3, #0
 8003510:	d054      	beq.n	80035bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fef9 	bl	800430a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003522:	2b40      	cmp	r3, #64	@ 0x40
 8003524:	d146      	bne.n	80035b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3308      	adds	r3, #8
 800352c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800353c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003552:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800355e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800356a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1d9      	bne.n	8003526 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d017      	beq.n	80035ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003582:	4a15      	ldr	r2, [pc, #84]	@ (80035d8 <HAL_UART_IRQHandler+0x2c0>)
 8003584:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800358c:	4618      	mov	r0, r3
 800358e:	f7fd ff81 	bl	8001494 <HAL_DMA_Abort_IT>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d019      	beq.n	80035cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80035a6:	4610      	mov	r0, r2
 80035a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035aa:	e00f      	b.n	80035cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f9e1 	bl	8003974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b2:	e00b      	b.n	80035cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f9dd 	bl	8003974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ba:	e007      	b.n	80035cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f9d9 	bl	8003974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80035ca:	e1bf      	b.n	800394c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	bf00      	nop
    return;
 80035ce:	e1bd      	b.n	800394c <HAL_UART_IRQHandler+0x634>
 80035d0:	10000001 	.word	0x10000001
 80035d4:	04000120 	.word	0x04000120
 80035d8:	080043d7 	.word	0x080043d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f040 8153 	bne.w	800388c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 814c 	beq.w	800388c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8145 	beq.w	800388c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2210      	movs	r2, #16
 8003608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	f040 80bb 	bne.w	8003790 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 818f 	beq.w	8003950 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003638:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800363c:	429a      	cmp	r2, r3
 800363e:	f080 8187 	bcs.w	8003950 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003648:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 8087 	bne.w	800376e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800367c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800368a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800368e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1da      	bne.n	8003660 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3308      	adds	r3, #8
 80036b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3308      	adds	r3, #8
 80036ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e1      	bne.n	80036aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3308      	adds	r3, #8
 80036ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3308      	adds	r3, #8
 8003706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800370a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800370c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e3      	bne.n	80036e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800373a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800373c:	f023 0310 	bic.w	r3, r3, #16
 8003740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800374e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800375c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e4      	bne.n	800372c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd fe3a 	bl	80013e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003780:	b29b      	uxth	r3, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	b29b      	uxth	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f8fd 	bl	8003988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800378e:	e0df      	b.n	8003950 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800379c:	b29b      	uxth	r3, r3
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80d1 	beq.w	8003954 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80037b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80cc 	beq.w	8003954 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037de:	647b      	str	r3, [r7, #68]	@ 0x44
 80037e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e4      	bne.n	80037bc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3308      	adds	r3, #8
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	623b      	str	r3, [r7, #32]
   return(result);
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3308      	adds	r3, #8
 8003816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800381a:	633a      	str	r2, [r7, #48]	@ 0x30
 800381c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e1      	bne.n	80037f2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0310 	bic.w	r3, r3, #16
 8003856:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	69b9      	ldr	r1, [r7, #24]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	617b      	str	r3, [r7, #20]
   return(result);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e4      	bne.n	8003842 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800387e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f87f 	bl	8003988 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800388a:	e063      	b.n	8003954 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800388c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_UART_IRQHandler+0x59e>
 8003898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800389c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80038ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fdd2 	bl	8004458 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038b4:	e051      	b.n	800395a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d014      	beq.n	80038ec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80038c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80038ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d03a      	beq.n	8003958 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
    }
    return;
 80038ea:	e035      	b.n	8003958 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <HAL_UART_IRQHandler+0x5f4>
 80038f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fd7c 	bl	8004402 <UART_EndTransmit_IT>
    return;
 800390a:	e026      	b.n	800395a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800390c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d009      	beq.n	800392c <HAL_UART_IRQHandler+0x614>
 8003918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800391c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fdab 	bl	8004480 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800392a:	e016      	b.n	800395a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800392c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d010      	beq.n	800395a <HAL_UART_IRQHandler+0x642>
 8003938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800393c:	2b00      	cmp	r3, #0
 800393e:	da0c      	bge.n	800395a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fd93 	bl	800446c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003946:	e008      	b.n	800395a <HAL_UART_IRQHandler+0x642>
      return;
 8003948:	bf00      	nop
 800394a:	e006      	b.n	800395a <HAL_UART_IRQHandler+0x642>
    return;
 800394c:	bf00      	nop
 800394e:	e004      	b.n	800395a <HAL_UART_IRQHandler+0x642>
      return;
 8003950:	bf00      	nop
 8003952:	e002      	b.n	800395a <HAL_UART_IRQHandler+0x642>
      return;
 8003954:	bf00      	nop
 8003956:	e000      	b.n	800395a <HAL_UART_IRQHandler+0x642>
    return;
 8003958:	bf00      	nop
  }
}
 800395a:	37e8      	adds	r7, #232	@ 0xe8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b08c      	sub	sp, #48	@ 0x30
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	431a      	orrs	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4baa      	ldr	r3, [pc, #680]	@ (8003c78 <UART_SetConfig+0x2d8>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039d8:	430b      	orrs	r3, r1
 80039da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a9f      	ldr	r2, [pc, #636]	@ (8003c7c <UART_SetConfig+0x2dc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003a16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2a:	f023 010f 	bic.w	r1, r3, #15
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a90      	ldr	r2, [pc, #576]	@ (8003c80 <UART_SetConfig+0x2e0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d125      	bne.n	8003a90 <UART_SetConfig+0xf0>
 8003a44:	4b8f      	ldr	r3, [pc, #572]	@ (8003c84 <UART_SetConfig+0x2e4>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d81a      	bhi.n	8003a88 <UART_SetConfig+0xe8>
 8003a52:	a201      	add	r2, pc, #4	@ (adr r2, 8003a58 <UART_SetConfig+0xb8>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a79 	.word	0x08003a79
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a81 	.word	0x08003a81
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e116      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003a70:	2302      	movs	r3, #2
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a76:	e112      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a7e:	e10e      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003a80:	2308      	movs	r3, #8
 8003a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a86:	e10a      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a8e:	e106      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a7c      	ldr	r2, [pc, #496]	@ (8003c88 <UART_SetConfig+0x2e8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d138      	bne.n	8003b0c <UART_SetConfig+0x16c>
 8003a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c84 <UART_SetConfig+0x2e4>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa0:	f003 030c 	and.w	r3, r3, #12
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d82d      	bhi.n	8003b04 <UART_SetConfig+0x164>
 8003aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <UART_SetConfig+0x110>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003b05 	.word	0x08003b05
 8003ab8:	08003b05 	.word	0x08003b05
 8003abc:	08003b05 	.word	0x08003b05
 8003ac0:	08003af5 	.word	0x08003af5
 8003ac4:	08003b05 	.word	0x08003b05
 8003ac8:	08003b05 	.word	0x08003b05
 8003acc:	08003b05 	.word	0x08003b05
 8003ad0:	08003aed 	.word	0x08003aed
 8003ad4:	08003b05 	.word	0x08003b05
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b05 	.word	0x08003b05
 8003ae0:	08003afd 	.word	0x08003afd
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aea:	e0d8      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003aec:	2302      	movs	r3, #2
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003af2:	e0d4      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003af4:	2304      	movs	r3, #4
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003afa:	e0d0      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003afc:	2308      	movs	r3, #8
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e0cc      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003b04:	2310      	movs	r3, #16
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b0a:	e0c8      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5e      	ldr	r2, [pc, #376]	@ (8003c8c <UART_SetConfig+0x2ec>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d125      	bne.n	8003b62 <UART_SetConfig+0x1c2>
 8003b16:	4b5b      	ldr	r3, [pc, #364]	@ (8003c84 <UART_SetConfig+0x2e4>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b20:	2b30      	cmp	r3, #48	@ 0x30
 8003b22:	d016      	beq.n	8003b52 <UART_SetConfig+0x1b2>
 8003b24:	2b30      	cmp	r3, #48	@ 0x30
 8003b26:	d818      	bhi.n	8003b5a <UART_SetConfig+0x1ba>
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d00a      	beq.n	8003b42 <UART_SetConfig+0x1a2>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d814      	bhi.n	8003b5a <UART_SetConfig+0x1ba>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <UART_SetConfig+0x19a>
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d008      	beq.n	8003b4a <UART_SetConfig+0x1aa>
 8003b38:	e00f      	b.n	8003b5a <UART_SetConfig+0x1ba>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b40:	e0ad      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003b42:	2302      	movs	r3, #2
 8003b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b48:	e0a9      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b50:	e0a5      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003b52:	2308      	movs	r3, #8
 8003b54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b58:	e0a1      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b60:	e09d      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a4a      	ldr	r2, [pc, #296]	@ (8003c90 <UART_SetConfig+0x2f0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d125      	bne.n	8003bb8 <UART_SetConfig+0x218>
 8003b6c:	4b45      	ldr	r3, [pc, #276]	@ (8003c84 <UART_SetConfig+0x2e4>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b78:	d016      	beq.n	8003ba8 <UART_SetConfig+0x208>
 8003b7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b7c:	d818      	bhi.n	8003bb0 <UART_SetConfig+0x210>
 8003b7e:	2b80      	cmp	r3, #128	@ 0x80
 8003b80:	d00a      	beq.n	8003b98 <UART_SetConfig+0x1f8>
 8003b82:	2b80      	cmp	r3, #128	@ 0x80
 8003b84:	d814      	bhi.n	8003bb0 <UART_SetConfig+0x210>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <UART_SetConfig+0x1f0>
 8003b8a:	2b40      	cmp	r3, #64	@ 0x40
 8003b8c:	d008      	beq.n	8003ba0 <UART_SetConfig+0x200>
 8003b8e:	e00f      	b.n	8003bb0 <UART_SetConfig+0x210>
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b96:	e082      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9e:	e07e      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ba6:	e07a      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003ba8:	2308      	movs	r3, #8
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bae:	e076      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bb6:	e072      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a35      	ldr	r2, [pc, #212]	@ (8003c94 <UART_SetConfig+0x2f4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d12a      	bne.n	8003c18 <UART_SetConfig+0x278>
 8003bc2:	4b30      	ldr	r3, [pc, #192]	@ (8003c84 <UART_SetConfig+0x2e4>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd0:	d01a      	beq.n	8003c08 <UART_SetConfig+0x268>
 8003bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd6:	d81b      	bhi.n	8003c10 <UART_SetConfig+0x270>
 8003bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bdc:	d00c      	beq.n	8003bf8 <UART_SetConfig+0x258>
 8003bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be2:	d815      	bhi.n	8003c10 <UART_SetConfig+0x270>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <UART_SetConfig+0x250>
 8003be8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bec:	d008      	beq.n	8003c00 <UART_SetConfig+0x260>
 8003bee:	e00f      	b.n	8003c10 <UART_SetConfig+0x270>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf6:	e052      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfe:	e04e      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003c00:	2304      	movs	r3, #4
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c06:	e04a      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003c08:	2308      	movs	r3, #8
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c0e:	e046      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003c10:	2310      	movs	r3, #16
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c16:	e042      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	@ (8003c7c <UART_SetConfig+0x2dc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d13a      	bne.n	8003c98 <UART_SetConfig+0x2f8>
 8003c22:	4b18      	ldr	r3, [pc, #96]	@ (8003c84 <UART_SetConfig+0x2e4>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c30:	d01a      	beq.n	8003c68 <UART_SetConfig+0x2c8>
 8003c32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c36:	d81b      	bhi.n	8003c70 <UART_SetConfig+0x2d0>
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c3c:	d00c      	beq.n	8003c58 <UART_SetConfig+0x2b8>
 8003c3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c42:	d815      	bhi.n	8003c70 <UART_SetConfig+0x2d0>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <UART_SetConfig+0x2b0>
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4c:	d008      	beq.n	8003c60 <UART_SetConfig+0x2c0>
 8003c4e:	e00f      	b.n	8003c70 <UART_SetConfig+0x2d0>
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c56:	e022      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5e:	e01e      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003c60:	2304      	movs	r3, #4
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c66:	e01a      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c6e:	e016      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003c70:	2310      	movs	r3, #16
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c76:	e012      	b.n	8003c9e <UART_SetConfig+0x2fe>
 8003c78:	cfff69f3 	.word	0xcfff69f3
 8003c7c:	40008000 	.word	0x40008000
 8003c80:	40013800 	.word	0x40013800
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40004400 	.word	0x40004400
 8003c8c:	40004800 	.word	0x40004800
 8003c90:	40004c00 	.word	0x40004c00
 8003c94:	40005000 	.word	0x40005000
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4aae      	ldr	r2, [pc, #696]	@ (8003f5c <UART_SetConfig+0x5bc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	f040 8097 	bne.w	8003dd8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003caa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d823      	bhi.n	8003cfa <UART_SetConfig+0x35a>
 8003cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb8 <UART_SetConfig+0x318>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cdd 	.word	0x08003cdd
 8003cbc:	08003cfb 	.word	0x08003cfb
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003ceb 	.word	0x08003ceb
 8003ccc:	08003cfb 	.word	0x08003cfb
 8003cd0:	08003cfb 	.word	0x08003cfb
 8003cd4:	08003cfb 	.word	0x08003cfb
 8003cd8:	08003cf3 	.word	0x08003cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cdc:	f7fe fc7e 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8003ce0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ce2:	e010      	b.n	8003d06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b9e      	ldr	r3, [pc, #632]	@ (8003f60 <UART_SetConfig+0x5c0>)
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ce8:	e00d      	b.n	8003d06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7fe fc09 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8003cee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cf0:	e009      	b.n	8003d06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cf8:	e005      	b.n	8003d06 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8130 	beq.w	8003f6e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	4a94      	ldr	r2, [pc, #592]	@ (8003f64 <UART_SetConfig+0x5c4>)
 8003d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d305      	bcc.n	8003d3e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d903      	bls.n	8003d46 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d44:	e113      	b.n	8003f6e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	60fa      	str	r2, [r7, #12]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	4a84      	ldr	r2, [pc, #528]	@ (8003f64 <UART_SetConfig+0x5c4>)
 8003d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d68:	f7fc faaa 	bl	80002c0 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	020b      	lsls	r3, r1, #8
 8003d7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d82:	0202      	lsls	r2, r0, #8
 8003d84:	6979      	ldr	r1, [r7, #20]
 8003d86:	6849      	ldr	r1, [r1, #4]
 8003d88:	0849      	lsrs	r1, r1, #1
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	4605      	mov	r5, r0
 8003d90:	eb12 0804 	adds.w	r8, r2, r4
 8003d94:	eb43 0905 	adc.w	r9, r3, r5
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	469a      	mov	sl, r3
 8003da0:	4693      	mov	fp, r2
 8003da2:	4652      	mov	r2, sl
 8003da4:	465b      	mov	r3, fp
 8003da6:	4640      	mov	r0, r8
 8003da8:	4649      	mov	r1, r9
 8003daa:	f7fc fa89 	bl	80002c0 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4613      	mov	r3, r2
 8003db4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dbc:	d308      	bcc.n	8003dd0 <UART_SetConfig+0x430>
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dc4:	d204      	bcs.n	8003dd0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	e0ce      	b.n	8003f6e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003dd6:	e0ca      	b.n	8003f6e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de0:	d166      	bne.n	8003eb0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003de2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d827      	bhi.n	8003e3a <UART_SetConfig+0x49a>
 8003dea:	a201      	add	r2, pc, #4	@ (adr r2, 8003df0 <UART_SetConfig+0x450>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e2b 	.word	0x08003e2b
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7fe fbe2 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8003e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e1a:	e014      	b.n	8003e46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe fbf4 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8003e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e22:	e010      	b.n	8003e46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b4e      	ldr	r3, [pc, #312]	@ (8003f60 <UART_SetConfig+0x5c0>)
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e28:	e00d      	b.n	8003e46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe fb69 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8003e2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e30:	e009      	b.n	8003e46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e38:	e005      	b.n	8003e46 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8090 	beq.w	8003f6e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	4a44      	ldr	r2, [pc, #272]	@ (8003f64 <UART_SetConfig+0x5c4>)
 8003e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e60:	005a      	lsls	r2, r3, #1
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	441a      	add	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2b0f      	cmp	r3, #15
 8003e78:	d916      	bls.n	8003ea8 <UART_SetConfig+0x508>
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e80:	d212      	bcs.n	8003ea8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f023 030f 	bic.w	r3, r3, #15
 8003e8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	8bfb      	ldrh	r3, [r7, #30]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	8bfa      	ldrh	r2, [r7, #30]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	e062      	b.n	8003f6e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003eae:	e05e      	b.n	8003f6e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eb0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d828      	bhi.n	8003f0a <UART_SetConfig+0x56a>
 8003eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <UART_SetConfig+0x520>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003ef5 	.word	0x08003ef5
 8003ecc:	08003f0b 	.word	0x08003f0b
 8003ed0:	08003efb 	.word	0x08003efb
 8003ed4:	08003f0b 	.word	0x08003f0b
 8003ed8:	08003f0b 	.word	0x08003f0b
 8003edc:	08003f0b 	.word	0x08003f0b
 8003ee0:	08003f03 	.word	0x08003f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee4:	f7fe fb7a 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8003ee8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eea:	e014      	b.n	8003f16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eec:	f7fe fb8c 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8003ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ef2:	e010      	b.n	8003f16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <UART_SetConfig+0x5c0>)
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ef8:	e00d      	b.n	8003f16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efa:	f7fe fb01 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8003efe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f00:	e009      	b.n	8003f16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f08:	e005      	b.n	8003f16 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f14:	bf00      	nop
    }

    if (pclk != 0U)
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d028      	beq.n	8003f6e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	4a10      	ldr	r2, [pc, #64]	@ (8003f64 <UART_SetConfig+0x5c4>)
 8003f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f26:	461a      	mov	r2, r3
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	441a      	add	r2, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2b0f      	cmp	r3, #15
 8003f44:	d910      	bls.n	8003f68 <UART_SetConfig+0x5c8>
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f4c:	d20c      	bcs.n	8003f68 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	e009      	b.n	8003f6e <UART_SetConfig+0x5ce>
 8003f5a:	bf00      	nop
 8003f5c:	40008000 	.word	0x40008000
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	080056c4 	.word	0x080056c4
      }
      else
      {
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2200      	movs	r2, #0
 8003f88:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f8a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3730      	adds	r7, #48	@ 0x30
 8003f92:	46bd      	mov	sp, r7
 8003f94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01a      	beq.n	80040ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004096:	d10a      	bne.n	80040ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b098      	sub	sp, #96	@ 0x60
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040ec:	f7fd f83c 	bl	8001168 <HAL_GetTick>
 80040f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d12f      	bne.n	8004160 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004100:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f88e 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d022      	beq.n	8004160 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004138:	647b      	str	r3, [r7, #68]	@ 0x44
 800413a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800413e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e6      	bne.n	800411a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e063      	b.n	8004228 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d149      	bne.n	8004202 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004176:	2200      	movs	r2, #0
 8004178:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f857 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d03c      	beq.n	8004202 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	623b      	str	r3, [r7, #32]
   return(result);
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800419c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e6      	bne.n	8004188 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041da:	61fa      	str	r2, [r7, #28]
 80041dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	617b      	str	r3, [r7, #20]
   return(result);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e5      	bne.n	80041ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e012      	b.n	8004228 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3758      	adds	r7, #88	@ 0x58
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004240:	e04f      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d04b      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fc ff8d 	bl	8001168 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <UART_WaitOnFlagUntilTimeout+0x30>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e04e      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d037      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b80      	cmp	r3, #128	@ 0x80
 8004276:	d034      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b40      	cmp	r3, #64	@ 0x40
 800427c:	d031      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d110      	bne.n	80042ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2208      	movs	r2, #8
 8004292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f838 	bl	800430a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2208      	movs	r2, #8
 800429e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e029      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042bc:	d111      	bne.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f81e 	bl	800430a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e00f      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d0a0      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800430a:	b480      	push	{r7}
 800430c:	b095      	sub	sp, #84	@ 0x54
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004330:	643b      	str	r3, [r7, #64]	@ 0x40
 8004332:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004336:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800433e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	61fb      	str	r3, [r7, #28]
   return(result);
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004368:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800436a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800436e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e3      	bne.n	8004344 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d118      	bne.n	80043b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	60bb      	str	r3, [r7, #8]
   return(result);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f023 0310 	bic.w	r3, r3, #16
 8004398:	647b      	str	r3, [r7, #68]	@ 0x44
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6979      	ldr	r1, [r7, #20]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	613b      	str	r3, [r7, #16]
   return(result);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e6      	bne.n	8004384 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043ca:	bf00      	nop
 80043cc:	3754      	adds	r7, #84	@ 0x54
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff fabd 	bl	8003974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b088      	sub	sp, #32
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	60bb      	str	r3, [r7, #8]
   return(result);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6979      	ldr	r1, [r7, #20]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	613b      	str	r3, [r7, #16]
   return(result);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e6      	bne.n	800440a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fa88 	bl	8003960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004450:	bf00      	nop
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_UARTEx_DisableFifoMode+0x16>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e027      	b.n	80044fa <HAL_UARTEx_DisableFifoMode+0x66>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2224      	movs	r2, #36	@ 0x24
 80044b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80044d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800451a:	2302      	movs	r3, #2
 800451c:	e02d      	b.n	800457a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2224      	movs	r2, #36	@ 0x24
 800452a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0201 	bic.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f850 	bl	8004600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004596:	2302      	movs	r3, #2
 8004598:	e02d      	b.n	80045f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2224      	movs	r2, #36	@ 0x24
 80045a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f812 	bl	8004600 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800460c:	2b00      	cmp	r3, #0
 800460e:	d108      	bne.n	8004622 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004620:	e031      	b.n	8004686 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004622:	2308      	movs	r3, #8
 8004624:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004626:	2308      	movs	r3, #8
 8004628:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	0e5b      	lsrs	r3, r3, #25
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	0f5b      	lsrs	r3, r3, #29
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800464a:	7bbb      	ldrb	r3, [r7, #14]
 800464c:	7b3a      	ldrb	r2, [r7, #12]
 800464e:	4911      	ldr	r1, [pc, #68]	@ (8004694 <UARTEx_SetNbDataToProcess+0x94>)
 8004650:	5c8a      	ldrb	r2, [r1, r2]
 8004652:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004656:	7b3a      	ldrb	r2, [r7, #12]
 8004658:	490f      	ldr	r1, [pc, #60]	@ (8004698 <UARTEx_SetNbDataToProcess+0x98>)
 800465a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800465c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	7b7a      	ldrb	r2, [r7, #13]
 800466c:	4909      	ldr	r1, [pc, #36]	@ (8004694 <UARTEx_SetNbDataToProcess+0x94>)
 800466e:	5c8a      	ldrb	r2, [r1, r2]
 8004670:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004674:	7b7a      	ldrb	r2, [r7, #13]
 8004676:	4908      	ldr	r1, [pc, #32]	@ (8004698 <UARTEx_SetNbDataToProcess+0x98>)
 8004678:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800467a:	fb93 f3f2 	sdiv	r3, r3, r2
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	080056dc 	.word	0x080056dc
 8004698:	080056e4 	.word	0x080056e4

0800469c <std>:
 800469c:	2300      	movs	r3, #0
 800469e:	b510      	push	{r4, lr}
 80046a0:	4604      	mov	r4, r0
 80046a2:	e9c0 3300 	strd	r3, r3, [r0]
 80046a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046aa:	6083      	str	r3, [r0, #8]
 80046ac:	8181      	strh	r1, [r0, #12]
 80046ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80046b0:	81c2      	strh	r2, [r0, #14]
 80046b2:	6183      	str	r3, [r0, #24]
 80046b4:	4619      	mov	r1, r3
 80046b6:	2208      	movs	r2, #8
 80046b8:	305c      	adds	r0, #92	@ 0x5c
 80046ba:	f000 f9c2 	bl	8004a42 <memset>
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <std+0x58>)
 80046c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80046c2:	4b0d      	ldr	r3, [pc, #52]	@ (80046f8 <std+0x5c>)
 80046c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <std+0x60>)
 80046c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <std+0x64>)
 80046cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80046ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004704 <std+0x68>)
 80046d0:	6224      	str	r4, [r4, #32]
 80046d2:	429c      	cmp	r4, r3
 80046d4:	d006      	beq.n	80046e4 <std+0x48>
 80046d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046da:	4294      	cmp	r4, r2
 80046dc:	d002      	beq.n	80046e4 <std+0x48>
 80046de:	33d0      	adds	r3, #208	@ 0xd0
 80046e0:	429c      	cmp	r4, r3
 80046e2:	d105      	bne.n	80046f0 <std+0x54>
 80046e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ec:	f000 ba22 	b.w	8004b34 <__retarget_lock_init_recursive>
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	bf00      	nop
 80046f4:	080049bd 	.word	0x080049bd
 80046f8:	080049df 	.word	0x080049df
 80046fc:	08004a17 	.word	0x08004a17
 8004700:	08004a3b 	.word	0x08004a3b
 8004704:	20000258 	.word	0x20000258

08004708 <stdio_exit_handler>:
 8004708:	4a02      	ldr	r2, [pc, #8]	@ (8004714 <stdio_exit_handler+0xc>)
 800470a:	4903      	ldr	r1, [pc, #12]	@ (8004718 <stdio_exit_handler+0x10>)
 800470c:	4803      	ldr	r0, [pc, #12]	@ (800471c <stdio_exit_handler+0x14>)
 800470e:	f000 b869 	b.w	80047e4 <_fwalk_sglue>
 8004712:	bf00      	nop
 8004714:	2000000c 	.word	0x2000000c
 8004718:	080053e5 	.word	0x080053e5
 800471c:	2000001c 	.word	0x2000001c

08004720 <cleanup_stdio>:
 8004720:	6841      	ldr	r1, [r0, #4]
 8004722:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <cleanup_stdio+0x34>)
 8004724:	4299      	cmp	r1, r3
 8004726:	b510      	push	{r4, lr}
 8004728:	4604      	mov	r4, r0
 800472a:	d001      	beq.n	8004730 <cleanup_stdio+0x10>
 800472c:	f000 fe5a 	bl	80053e4 <_fflush_r>
 8004730:	68a1      	ldr	r1, [r4, #8]
 8004732:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <cleanup_stdio+0x38>)
 8004734:	4299      	cmp	r1, r3
 8004736:	d002      	beq.n	800473e <cleanup_stdio+0x1e>
 8004738:	4620      	mov	r0, r4
 800473a:	f000 fe53 	bl	80053e4 <_fflush_r>
 800473e:	68e1      	ldr	r1, [r4, #12]
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <cleanup_stdio+0x3c>)
 8004742:	4299      	cmp	r1, r3
 8004744:	d004      	beq.n	8004750 <cleanup_stdio+0x30>
 8004746:	4620      	mov	r0, r4
 8004748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800474c:	f000 be4a 	b.w	80053e4 <_fflush_r>
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	20000258 	.word	0x20000258
 8004758:	200002c0 	.word	0x200002c0
 800475c:	20000328 	.word	0x20000328

08004760 <global_stdio_init.part.0>:
 8004760:	b510      	push	{r4, lr}
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <global_stdio_init.part.0+0x30>)
 8004764:	4c0b      	ldr	r4, [pc, #44]	@ (8004794 <global_stdio_init.part.0+0x34>)
 8004766:	4a0c      	ldr	r2, [pc, #48]	@ (8004798 <global_stdio_init.part.0+0x38>)
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	4620      	mov	r0, r4
 800476c:	2200      	movs	r2, #0
 800476e:	2104      	movs	r1, #4
 8004770:	f7ff ff94 	bl	800469c <std>
 8004774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004778:	2201      	movs	r2, #1
 800477a:	2109      	movs	r1, #9
 800477c:	f7ff ff8e 	bl	800469c <std>
 8004780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004784:	2202      	movs	r2, #2
 8004786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800478a:	2112      	movs	r1, #18
 800478c:	f7ff bf86 	b.w	800469c <std>
 8004790:	20000390 	.word	0x20000390
 8004794:	20000258 	.word	0x20000258
 8004798:	08004709 	.word	0x08004709

0800479c <__sfp_lock_acquire>:
 800479c:	4801      	ldr	r0, [pc, #4]	@ (80047a4 <__sfp_lock_acquire+0x8>)
 800479e:	f000 b9ca 	b.w	8004b36 <__retarget_lock_acquire_recursive>
 80047a2:	bf00      	nop
 80047a4:	20000399 	.word	0x20000399

080047a8 <__sfp_lock_release>:
 80047a8:	4801      	ldr	r0, [pc, #4]	@ (80047b0 <__sfp_lock_release+0x8>)
 80047aa:	f000 b9c5 	b.w	8004b38 <__retarget_lock_release_recursive>
 80047ae:	bf00      	nop
 80047b0:	20000399 	.word	0x20000399

080047b4 <__sinit>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4604      	mov	r4, r0
 80047b8:	f7ff fff0 	bl	800479c <__sfp_lock_acquire>
 80047bc:	6a23      	ldr	r3, [r4, #32]
 80047be:	b11b      	cbz	r3, 80047c8 <__sinit+0x14>
 80047c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c4:	f7ff bff0 	b.w	80047a8 <__sfp_lock_release>
 80047c8:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <__sinit+0x28>)
 80047ca:	6223      	str	r3, [r4, #32]
 80047cc:	4b04      	ldr	r3, [pc, #16]	@ (80047e0 <__sinit+0x2c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f5      	bne.n	80047c0 <__sinit+0xc>
 80047d4:	f7ff ffc4 	bl	8004760 <global_stdio_init.part.0>
 80047d8:	e7f2      	b.n	80047c0 <__sinit+0xc>
 80047da:	bf00      	nop
 80047dc:	08004721 	.word	0x08004721
 80047e0:	20000390 	.word	0x20000390

080047e4 <_fwalk_sglue>:
 80047e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e8:	4607      	mov	r7, r0
 80047ea:	4688      	mov	r8, r1
 80047ec:	4614      	mov	r4, r2
 80047ee:	2600      	movs	r6, #0
 80047f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047f4:	f1b9 0901 	subs.w	r9, r9, #1
 80047f8:	d505      	bpl.n	8004806 <_fwalk_sglue+0x22>
 80047fa:	6824      	ldr	r4, [r4, #0]
 80047fc:	2c00      	cmp	r4, #0
 80047fe:	d1f7      	bne.n	80047f0 <_fwalk_sglue+0xc>
 8004800:	4630      	mov	r0, r6
 8004802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004806:	89ab      	ldrh	r3, [r5, #12]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d907      	bls.n	800481c <_fwalk_sglue+0x38>
 800480c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004810:	3301      	adds	r3, #1
 8004812:	d003      	beq.n	800481c <_fwalk_sglue+0x38>
 8004814:	4629      	mov	r1, r5
 8004816:	4638      	mov	r0, r7
 8004818:	47c0      	blx	r8
 800481a:	4306      	orrs	r6, r0
 800481c:	3568      	adds	r5, #104	@ 0x68
 800481e:	e7e9      	b.n	80047f4 <_fwalk_sglue+0x10>

08004820 <iprintf>:
 8004820:	b40f      	push	{r0, r1, r2, r3}
 8004822:	b507      	push	{r0, r1, r2, lr}
 8004824:	4906      	ldr	r1, [pc, #24]	@ (8004840 <iprintf+0x20>)
 8004826:	ab04      	add	r3, sp, #16
 8004828:	6808      	ldr	r0, [r1, #0]
 800482a:	f853 2b04 	ldr.w	r2, [r3], #4
 800482e:	6881      	ldr	r1, [r0, #8]
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	f000 faad 	bl	8004d90 <_vfiprintf_r>
 8004836:	b003      	add	sp, #12
 8004838:	f85d eb04 	ldr.w	lr, [sp], #4
 800483c:	b004      	add	sp, #16
 800483e:	4770      	bx	lr
 8004840:	20000018 	.word	0x20000018

08004844 <setbuf>:
 8004844:	fab1 f281 	clz	r2, r1
 8004848:	0952      	lsrs	r2, r2, #5
 800484a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800484e:	0052      	lsls	r2, r2, #1
 8004850:	f000 b800 	b.w	8004854 <setvbuf>

08004854 <setvbuf>:
 8004854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004858:	461d      	mov	r5, r3
 800485a:	4b57      	ldr	r3, [pc, #348]	@ (80049b8 <setvbuf+0x164>)
 800485c:	681f      	ldr	r7, [r3, #0]
 800485e:	4604      	mov	r4, r0
 8004860:	460e      	mov	r6, r1
 8004862:	4690      	mov	r8, r2
 8004864:	b127      	cbz	r7, 8004870 <setvbuf+0x1c>
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	b913      	cbnz	r3, 8004870 <setvbuf+0x1c>
 800486a:	4638      	mov	r0, r7
 800486c:	f7ff ffa2 	bl	80047b4 <__sinit>
 8004870:	f1b8 0f02 	cmp.w	r8, #2
 8004874:	d006      	beq.n	8004884 <setvbuf+0x30>
 8004876:	f1b8 0f01 	cmp.w	r8, #1
 800487a:	f200 809a 	bhi.w	80049b2 <setvbuf+0x15e>
 800487e:	2d00      	cmp	r5, #0
 8004880:	f2c0 8097 	blt.w	80049b2 <setvbuf+0x15e>
 8004884:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004886:	07d9      	lsls	r1, r3, #31
 8004888:	d405      	bmi.n	8004896 <setvbuf+0x42>
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	059a      	lsls	r2, r3, #22
 800488e:	d402      	bmi.n	8004896 <setvbuf+0x42>
 8004890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004892:	f000 f950 	bl	8004b36 <__retarget_lock_acquire_recursive>
 8004896:	4621      	mov	r1, r4
 8004898:	4638      	mov	r0, r7
 800489a:	f000 fda3 	bl	80053e4 <_fflush_r>
 800489e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048a0:	b141      	cbz	r1, 80048b4 <setvbuf+0x60>
 80048a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048a6:	4299      	cmp	r1, r3
 80048a8:	d002      	beq.n	80048b0 <setvbuf+0x5c>
 80048aa:	4638      	mov	r0, r7
 80048ac:	f000 f946 	bl	8004b3c <_free_r>
 80048b0:	2300      	movs	r3, #0
 80048b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80048b4:	2300      	movs	r3, #0
 80048b6:	61a3      	str	r3, [r4, #24]
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	d503      	bpl.n	80048c8 <setvbuf+0x74>
 80048c0:	6921      	ldr	r1, [r4, #16]
 80048c2:	4638      	mov	r0, r7
 80048c4:	f000 f93a 	bl	8004b3c <_free_r>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	f1b8 0f02 	cmp.w	r8, #2
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	d061      	beq.n	800499e <setvbuf+0x14a>
 80048da:	ab01      	add	r3, sp, #4
 80048dc:	466a      	mov	r2, sp
 80048de:	4621      	mov	r1, r4
 80048e0:	4638      	mov	r0, r7
 80048e2:	f000 fda7 	bl	8005434 <__swhatbuf_r>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	4318      	orrs	r0, r3
 80048ea:	81a0      	strh	r0, [r4, #12]
 80048ec:	bb2d      	cbnz	r5, 800493a <setvbuf+0xe6>
 80048ee:	9d00      	ldr	r5, [sp, #0]
 80048f0:	4628      	mov	r0, r5
 80048f2:	f000 f96d 	bl	8004bd0 <malloc>
 80048f6:	4606      	mov	r6, r0
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d152      	bne.n	80049a2 <setvbuf+0x14e>
 80048fc:	f8dd 9000 	ldr.w	r9, [sp]
 8004900:	45a9      	cmp	r9, r5
 8004902:	d140      	bne.n	8004986 <setvbuf+0x132>
 8004904:	f04f 35ff 	mov.w	r5, #4294967295
 8004908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490c:	f043 0202 	orr.w	r2, r3, #2
 8004910:	81a2      	strh	r2, [r4, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	60a2      	str	r2, [r4, #8]
 8004916:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800491a:	6022      	str	r2, [r4, #0]
 800491c:	6122      	str	r2, [r4, #16]
 800491e:	2201      	movs	r2, #1
 8004920:	6162      	str	r2, [r4, #20]
 8004922:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004924:	07d6      	lsls	r6, r2, #31
 8004926:	d404      	bmi.n	8004932 <setvbuf+0xde>
 8004928:	0598      	lsls	r0, r3, #22
 800492a:	d402      	bmi.n	8004932 <setvbuf+0xde>
 800492c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800492e:	f000 f903 	bl	8004b38 <__retarget_lock_release_recursive>
 8004932:	4628      	mov	r0, r5
 8004934:	b003      	add	sp, #12
 8004936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800493a:	2e00      	cmp	r6, #0
 800493c:	d0d8      	beq.n	80048f0 <setvbuf+0x9c>
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	b913      	cbnz	r3, 8004948 <setvbuf+0xf4>
 8004942:	4638      	mov	r0, r7
 8004944:	f7ff ff36 	bl	80047b4 <__sinit>
 8004948:	f1b8 0f01 	cmp.w	r8, #1
 800494c:	bf08      	it	eq
 800494e:	89a3      	ldrheq	r3, [r4, #12]
 8004950:	6026      	str	r6, [r4, #0]
 8004952:	bf04      	itt	eq
 8004954:	f043 0301 	orreq.w	r3, r3, #1
 8004958:	81a3      	strheq	r3, [r4, #12]
 800495a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800495e:	f013 0208 	ands.w	r2, r3, #8
 8004962:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004966:	d01e      	beq.n	80049a6 <setvbuf+0x152>
 8004968:	07d9      	lsls	r1, r3, #31
 800496a:	bf41      	itttt	mi
 800496c:	2200      	movmi	r2, #0
 800496e:	426d      	negmi	r5, r5
 8004970:	60a2      	strmi	r2, [r4, #8]
 8004972:	61a5      	strmi	r5, [r4, #24]
 8004974:	bf58      	it	pl
 8004976:	60a5      	strpl	r5, [r4, #8]
 8004978:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800497a:	07d2      	lsls	r2, r2, #31
 800497c:	d401      	bmi.n	8004982 <setvbuf+0x12e>
 800497e:	059b      	lsls	r3, r3, #22
 8004980:	d513      	bpl.n	80049aa <setvbuf+0x156>
 8004982:	2500      	movs	r5, #0
 8004984:	e7d5      	b.n	8004932 <setvbuf+0xde>
 8004986:	4648      	mov	r0, r9
 8004988:	f000 f922 	bl	8004bd0 <malloc>
 800498c:	4606      	mov	r6, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	d0b8      	beq.n	8004904 <setvbuf+0xb0>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004998:	81a3      	strh	r3, [r4, #12]
 800499a:	464d      	mov	r5, r9
 800499c:	e7cf      	b.n	800493e <setvbuf+0xea>
 800499e:	2500      	movs	r5, #0
 80049a0:	e7b2      	b.n	8004908 <setvbuf+0xb4>
 80049a2:	46a9      	mov	r9, r5
 80049a4:	e7f5      	b.n	8004992 <setvbuf+0x13e>
 80049a6:	60a2      	str	r2, [r4, #8]
 80049a8:	e7e6      	b.n	8004978 <setvbuf+0x124>
 80049aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ac:	f000 f8c4 	bl	8004b38 <__retarget_lock_release_recursive>
 80049b0:	e7e7      	b.n	8004982 <setvbuf+0x12e>
 80049b2:	f04f 35ff 	mov.w	r5, #4294967295
 80049b6:	e7bc      	b.n	8004932 <setvbuf+0xde>
 80049b8:	20000018 	.word	0x20000018

080049bc <__sread>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	460c      	mov	r4, r1
 80049c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c4:	f000 f868 	bl	8004a98 <_read_r>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	bfab      	itete	ge
 80049cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049ce:	89a3      	ldrhlt	r3, [r4, #12]
 80049d0:	181b      	addge	r3, r3, r0
 80049d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049d6:	bfac      	ite	ge
 80049d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049da:	81a3      	strhlt	r3, [r4, #12]
 80049dc:	bd10      	pop	{r4, pc}

080049de <__swrite>:
 80049de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e2:	461f      	mov	r7, r3
 80049e4:	898b      	ldrh	r3, [r1, #12]
 80049e6:	05db      	lsls	r3, r3, #23
 80049e8:	4605      	mov	r5, r0
 80049ea:	460c      	mov	r4, r1
 80049ec:	4616      	mov	r6, r2
 80049ee:	d505      	bpl.n	80049fc <__swrite+0x1e>
 80049f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f4:	2302      	movs	r3, #2
 80049f6:	2200      	movs	r2, #0
 80049f8:	f000 f83c 	bl	8004a74 <_lseek_r>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	4632      	mov	r2, r6
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	f000 b853 	b.w	8004abc <_write_r>

08004a16 <__sseek>:
 8004a16:	b510      	push	{r4, lr}
 8004a18:	460c      	mov	r4, r1
 8004a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1e:	f000 f829 	bl	8004a74 <_lseek_r>
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	bf15      	itete	ne
 8004a28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a32:	81a3      	strheq	r3, [r4, #12]
 8004a34:	bf18      	it	ne
 8004a36:	81a3      	strhne	r3, [r4, #12]
 8004a38:	bd10      	pop	{r4, pc}

08004a3a <__sclose>:
 8004a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3e:	f000 b809 	b.w	8004a54 <_close_r>

08004a42 <memset>:
 8004a42:	4402      	add	r2, r0
 8004a44:	4603      	mov	r3, r0
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d100      	bne.n	8004a4c <memset+0xa>
 8004a4a:	4770      	bx	lr
 8004a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a50:	e7f9      	b.n	8004a46 <memset+0x4>
	...

08004a54 <_close_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d06      	ldr	r5, [pc, #24]	@ (8004a70 <_close_r+0x1c>)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	f7fc fa77 	bl	8000f52 <_close>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_close_r+0x1a>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_close_r+0x1a>
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	20000394 	.word	0x20000394

08004a74 <_lseek_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d07      	ldr	r5, [pc, #28]	@ (8004a94 <_lseek_r+0x20>)
 8004a78:	4604      	mov	r4, r0
 8004a7a:	4608      	mov	r0, r1
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	602a      	str	r2, [r5, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f7fc fa8c 	bl	8000fa0 <_lseek>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_lseek_r+0x1e>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_lseek_r+0x1e>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	20000394 	.word	0x20000394

08004a98 <_read_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d07      	ldr	r5, [pc, #28]	@ (8004ab8 <_read_r+0x20>)
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	4608      	mov	r0, r1
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	602a      	str	r2, [r5, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f7fc fa36 	bl	8000f18 <_read>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d102      	bne.n	8004ab6 <_read_r+0x1e>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b103      	cbz	r3, 8004ab6 <_read_r+0x1e>
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	20000394 	.word	0x20000394

08004abc <_write_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4d07      	ldr	r5, [pc, #28]	@ (8004adc <_write_r+0x20>)
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	4608      	mov	r0, r1
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	602a      	str	r2, [r5, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f7fb fd90 	bl	80005f0 <_write>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_write_r+0x1e>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_write_r+0x1e>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	20000394 	.word	0x20000394

08004ae0 <__errno>:
 8004ae0:	4b01      	ldr	r3, [pc, #4]	@ (8004ae8 <__errno+0x8>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000018 	.word	0x20000018

08004aec <__libc_init_array>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	4d0d      	ldr	r5, [pc, #52]	@ (8004b24 <__libc_init_array+0x38>)
 8004af0:	4c0d      	ldr	r4, [pc, #52]	@ (8004b28 <__libc_init_array+0x3c>)
 8004af2:	1b64      	subs	r4, r4, r5
 8004af4:	10a4      	asrs	r4, r4, #2
 8004af6:	2600      	movs	r6, #0
 8004af8:	42a6      	cmp	r6, r4
 8004afa:	d109      	bne.n	8004b10 <__libc_init_array+0x24>
 8004afc:	4d0b      	ldr	r5, [pc, #44]	@ (8004b2c <__libc_init_array+0x40>)
 8004afe:	4c0c      	ldr	r4, [pc, #48]	@ (8004b30 <__libc_init_array+0x44>)
 8004b00:	f000 fdc0 	bl	8005684 <_init>
 8004b04:	1b64      	subs	r4, r4, r5
 8004b06:	10a4      	asrs	r4, r4, #2
 8004b08:	2600      	movs	r6, #0
 8004b0a:	42a6      	cmp	r6, r4
 8004b0c:	d105      	bne.n	8004b1a <__libc_init_array+0x2e>
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}
 8004b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b14:	4798      	blx	r3
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7ee      	b.n	8004af8 <__libc_init_array+0xc>
 8004b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1e:	4798      	blx	r3
 8004b20:	3601      	adds	r6, #1
 8004b22:	e7f2      	b.n	8004b0a <__libc_init_array+0x1e>
 8004b24:	08005728 	.word	0x08005728
 8004b28:	08005728 	.word	0x08005728
 8004b2c:	08005728 	.word	0x08005728
 8004b30:	0800572c 	.word	0x0800572c

08004b34 <__retarget_lock_init_recursive>:
 8004b34:	4770      	bx	lr

08004b36 <__retarget_lock_acquire_recursive>:
 8004b36:	4770      	bx	lr

08004b38 <__retarget_lock_release_recursive>:
 8004b38:	4770      	bx	lr
	...

08004b3c <_free_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4605      	mov	r5, r0
 8004b40:	2900      	cmp	r1, #0
 8004b42:	d041      	beq.n	8004bc8 <_free_r+0x8c>
 8004b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b48:	1f0c      	subs	r4, r1, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bfb8      	it	lt
 8004b4e:	18e4      	addlt	r4, r4, r3
 8004b50:	f000 f8e8 	bl	8004d24 <__malloc_lock>
 8004b54:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <_free_r+0x90>)
 8004b56:	6813      	ldr	r3, [r2, #0]
 8004b58:	b933      	cbnz	r3, 8004b68 <_free_r+0x2c>
 8004b5a:	6063      	str	r3, [r4, #4]
 8004b5c:	6014      	str	r4, [r2, #0]
 8004b5e:	4628      	mov	r0, r5
 8004b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b64:	f000 b8e4 	b.w	8004d30 <__malloc_unlock>
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	d908      	bls.n	8004b7e <_free_r+0x42>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	1821      	adds	r1, r4, r0
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf01      	itttt	eq
 8004b74:	6819      	ldreq	r1, [r3, #0]
 8004b76:	685b      	ldreq	r3, [r3, #4]
 8004b78:	1809      	addeq	r1, r1, r0
 8004b7a:	6021      	streq	r1, [r4, #0]
 8004b7c:	e7ed      	b.n	8004b5a <_free_r+0x1e>
 8004b7e:	461a      	mov	r2, r3
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	b10b      	cbz	r3, 8004b88 <_free_r+0x4c>
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	d9fa      	bls.n	8004b7e <_free_r+0x42>
 8004b88:	6811      	ldr	r1, [r2, #0]
 8004b8a:	1850      	adds	r0, r2, r1
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d10b      	bne.n	8004ba8 <_free_r+0x6c>
 8004b90:	6820      	ldr	r0, [r4, #0]
 8004b92:	4401      	add	r1, r0
 8004b94:	1850      	adds	r0, r2, r1
 8004b96:	4283      	cmp	r3, r0
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	d1e0      	bne.n	8004b5e <_free_r+0x22>
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	6053      	str	r3, [r2, #4]
 8004ba2:	4408      	add	r0, r1
 8004ba4:	6010      	str	r0, [r2, #0]
 8004ba6:	e7da      	b.n	8004b5e <_free_r+0x22>
 8004ba8:	d902      	bls.n	8004bb0 <_free_r+0x74>
 8004baa:	230c      	movs	r3, #12
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	e7d6      	b.n	8004b5e <_free_r+0x22>
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	1821      	adds	r1, r4, r0
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	bf04      	itt	eq
 8004bb8:	6819      	ldreq	r1, [r3, #0]
 8004bba:	685b      	ldreq	r3, [r3, #4]
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	bf04      	itt	eq
 8004bc0:	1809      	addeq	r1, r1, r0
 8004bc2:	6021      	streq	r1, [r4, #0]
 8004bc4:	6054      	str	r4, [r2, #4]
 8004bc6:	e7ca      	b.n	8004b5e <_free_r+0x22>
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	bf00      	nop
 8004bcc:	200003a0 	.word	0x200003a0

08004bd0 <malloc>:
 8004bd0:	4b02      	ldr	r3, [pc, #8]	@ (8004bdc <malloc+0xc>)
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	f000 b825 	b.w	8004c24 <_malloc_r>
 8004bda:	bf00      	nop
 8004bdc:	20000018 	.word	0x20000018

08004be0 <sbrk_aligned>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4e0f      	ldr	r6, [pc, #60]	@ (8004c20 <sbrk_aligned+0x40>)
 8004be4:	460c      	mov	r4, r1
 8004be6:	6831      	ldr	r1, [r6, #0]
 8004be8:	4605      	mov	r5, r0
 8004bea:	b911      	cbnz	r1, 8004bf2 <sbrk_aligned+0x12>
 8004bec:	f000 fd3a 	bl	8005664 <_sbrk_r>
 8004bf0:	6030      	str	r0, [r6, #0]
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	f000 fd35 	bl	8005664 <_sbrk_r>
 8004bfa:	1c43      	adds	r3, r0, #1
 8004bfc:	d103      	bne.n	8004c06 <sbrk_aligned+0x26>
 8004bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8004c02:	4620      	mov	r0, r4
 8004c04:	bd70      	pop	{r4, r5, r6, pc}
 8004c06:	1cc4      	adds	r4, r0, #3
 8004c08:	f024 0403 	bic.w	r4, r4, #3
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d0f8      	beq.n	8004c02 <sbrk_aligned+0x22>
 8004c10:	1a21      	subs	r1, r4, r0
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 fd26 	bl	8005664 <_sbrk_r>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d1f2      	bne.n	8004c02 <sbrk_aligned+0x22>
 8004c1c:	e7ef      	b.n	8004bfe <sbrk_aligned+0x1e>
 8004c1e:	bf00      	nop
 8004c20:	2000039c 	.word	0x2000039c

08004c24 <_malloc_r>:
 8004c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c28:	1ccd      	adds	r5, r1, #3
 8004c2a:	f025 0503 	bic.w	r5, r5, #3
 8004c2e:	3508      	adds	r5, #8
 8004c30:	2d0c      	cmp	r5, #12
 8004c32:	bf38      	it	cc
 8004c34:	250c      	movcc	r5, #12
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	4606      	mov	r6, r0
 8004c3a:	db01      	blt.n	8004c40 <_malloc_r+0x1c>
 8004c3c:	42a9      	cmp	r1, r5
 8004c3e:	d904      	bls.n	8004c4a <_malloc_r+0x26>
 8004c40:	230c      	movs	r3, #12
 8004c42:	6033      	str	r3, [r6, #0]
 8004c44:	2000      	movs	r0, #0
 8004c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d20 <_malloc_r+0xfc>
 8004c4e:	f000 f869 	bl	8004d24 <__malloc_lock>
 8004c52:	f8d8 3000 	ldr.w	r3, [r8]
 8004c56:	461c      	mov	r4, r3
 8004c58:	bb44      	cbnz	r4, 8004cac <_malloc_r+0x88>
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f7ff ffbf 	bl	8004be0 <sbrk_aligned>
 8004c62:	1c43      	adds	r3, r0, #1
 8004c64:	4604      	mov	r4, r0
 8004c66:	d158      	bne.n	8004d1a <_malloc_r+0xf6>
 8004c68:	f8d8 4000 	ldr.w	r4, [r8]
 8004c6c:	4627      	mov	r7, r4
 8004c6e:	2f00      	cmp	r7, #0
 8004c70:	d143      	bne.n	8004cfa <_malloc_r+0xd6>
 8004c72:	2c00      	cmp	r4, #0
 8004c74:	d04b      	beq.n	8004d0e <_malloc_r+0xea>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	4639      	mov	r1, r7
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	eb04 0903 	add.w	r9, r4, r3
 8004c80:	f000 fcf0 	bl	8005664 <_sbrk_r>
 8004c84:	4581      	cmp	r9, r0
 8004c86:	d142      	bne.n	8004d0e <_malloc_r+0xea>
 8004c88:	6821      	ldr	r1, [r4, #0]
 8004c8a:	1a6d      	subs	r5, r5, r1
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	4630      	mov	r0, r6
 8004c90:	f7ff ffa6 	bl	8004be0 <sbrk_aligned>
 8004c94:	3001      	adds	r0, #1
 8004c96:	d03a      	beq.n	8004d0e <_malloc_r+0xea>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	442b      	add	r3, r5
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	bb62      	cbnz	r2, 8004d00 <_malloc_r+0xdc>
 8004ca6:	f8c8 7000 	str.w	r7, [r8]
 8004caa:	e00f      	b.n	8004ccc <_malloc_r+0xa8>
 8004cac:	6822      	ldr	r2, [r4, #0]
 8004cae:	1b52      	subs	r2, r2, r5
 8004cb0:	d420      	bmi.n	8004cf4 <_malloc_r+0xd0>
 8004cb2:	2a0b      	cmp	r2, #11
 8004cb4:	d917      	bls.n	8004ce6 <_malloc_r+0xc2>
 8004cb6:	1961      	adds	r1, r4, r5
 8004cb8:	42a3      	cmp	r3, r4
 8004cba:	6025      	str	r5, [r4, #0]
 8004cbc:	bf18      	it	ne
 8004cbe:	6059      	strne	r1, [r3, #4]
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	bf08      	it	eq
 8004cc4:	f8c8 1000 	streq.w	r1, [r8]
 8004cc8:	5162      	str	r2, [r4, r5]
 8004cca:	604b      	str	r3, [r1, #4]
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f000 f82f 	bl	8004d30 <__malloc_unlock>
 8004cd2:	f104 000b 	add.w	r0, r4, #11
 8004cd6:	1d23      	adds	r3, r4, #4
 8004cd8:	f020 0007 	bic.w	r0, r0, #7
 8004cdc:	1ac2      	subs	r2, r0, r3
 8004cde:	bf1c      	itt	ne
 8004ce0:	1a1b      	subne	r3, r3, r0
 8004ce2:	50a3      	strne	r3, [r4, r2]
 8004ce4:	e7af      	b.n	8004c46 <_malloc_r+0x22>
 8004ce6:	6862      	ldr	r2, [r4, #4]
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	bf0c      	ite	eq
 8004cec:	f8c8 2000 	streq.w	r2, [r8]
 8004cf0:	605a      	strne	r2, [r3, #4]
 8004cf2:	e7eb      	b.n	8004ccc <_malloc_r+0xa8>
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	6864      	ldr	r4, [r4, #4]
 8004cf8:	e7ae      	b.n	8004c58 <_malloc_r+0x34>
 8004cfa:	463c      	mov	r4, r7
 8004cfc:	687f      	ldr	r7, [r7, #4]
 8004cfe:	e7b6      	b.n	8004c6e <_malloc_r+0x4a>
 8004d00:	461a      	mov	r2, r3
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	d1fb      	bne.n	8004d00 <_malloc_r+0xdc>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6053      	str	r3, [r2, #4]
 8004d0c:	e7de      	b.n	8004ccc <_malloc_r+0xa8>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	6033      	str	r3, [r6, #0]
 8004d12:	4630      	mov	r0, r6
 8004d14:	f000 f80c 	bl	8004d30 <__malloc_unlock>
 8004d18:	e794      	b.n	8004c44 <_malloc_r+0x20>
 8004d1a:	6005      	str	r5, [r0, #0]
 8004d1c:	e7d6      	b.n	8004ccc <_malloc_r+0xa8>
 8004d1e:	bf00      	nop
 8004d20:	200003a0 	.word	0x200003a0

08004d24 <__malloc_lock>:
 8004d24:	4801      	ldr	r0, [pc, #4]	@ (8004d2c <__malloc_lock+0x8>)
 8004d26:	f7ff bf06 	b.w	8004b36 <__retarget_lock_acquire_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	20000398 	.word	0x20000398

08004d30 <__malloc_unlock>:
 8004d30:	4801      	ldr	r0, [pc, #4]	@ (8004d38 <__malloc_unlock+0x8>)
 8004d32:	f7ff bf01 	b.w	8004b38 <__retarget_lock_release_recursive>
 8004d36:	bf00      	nop
 8004d38:	20000398 	.word	0x20000398

08004d3c <__sfputc_r>:
 8004d3c:	6893      	ldr	r3, [r2, #8]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	b410      	push	{r4}
 8004d44:	6093      	str	r3, [r2, #8]
 8004d46:	da08      	bge.n	8004d5a <__sfputc_r+0x1e>
 8004d48:	6994      	ldr	r4, [r2, #24]
 8004d4a:	42a3      	cmp	r3, r4
 8004d4c:	db01      	blt.n	8004d52 <__sfputc_r+0x16>
 8004d4e:	290a      	cmp	r1, #10
 8004d50:	d103      	bne.n	8004d5a <__sfputc_r+0x1e>
 8004d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d56:	f000 bbcf 	b.w	80054f8 <__swbuf_r>
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	1c58      	adds	r0, r3, #1
 8004d5e:	6010      	str	r0, [r2, #0]
 8004d60:	7019      	strb	r1, [r3, #0]
 8004d62:	4608      	mov	r0, r1
 8004d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <__sfputs_r>:
 8004d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	460f      	mov	r7, r1
 8004d70:	4614      	mov	r4, r2
 8004d72:	18d5      	adds	r5, r2, r3
 8004d74:	42ac      	cmp	r4, r5
 8004d76:	d101      	bne.n	8004d7c <__sfputs_r+0x12>
 8004d78:	2000      	movs	r0, #0
 8004d7a:	e007      	b.n	8004d8c <__sfputs_r+0x22>
 8004d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d80:	463a      	mov	r2, r7
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7ff ffda 	bl	8004d3c <__sfputc_r>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d1f3      	bne.n	8004d74 <__sfputs_r+0xa>
 8004d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d90 <_vfiprintf_r>:
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	460d      	mov	r5, r1
 8004d96:	b09d      	sub	sp, #116	@ 0x74
 8004d98:	4614      	mov	r4, r2
 8004d9a:	4698      	mov	r8, r3
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	b118      	cbz	r0, 8004da8 <_vfiprintf_r+0x18>
 8004da0:	6a03      	ldr	r3, [r0, #32]
 8004da2:	b90b      	cbnz	r3, 8004da8 <_vfiprintf_r+0x18>
 8004da4:	f7ff fd06 	bl	80047b4 <__sinit>
 8004da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004daa:	07d9      	lsls	r1, r3, #31
 8004dac:	d405      	bmi.n	8004dba <_vfiprintf_r+0x2a>
 8004dae:	89ab      	ldrh	r3, [r5, #12]
 8004db0:	059a      	lsls	r2, r3, #22
 8004db2:	d402      	bmi.n	8004dba <_vfiprintf_r+0x2a>
 8004db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004db6:	f7ff febe 	bl	8004b36 <__retarget_lock_acquire_recursive>
 8004dba:	89ab      	ldrh	r3, [r5, #12]
 8004dbc:	071b      	lsls	r3, r3, #28
 8004dbe:	d501      	bpl.n	8004dc4 <_vfiprintf_r+0x34>
 8004dc0:	692b      	ldr	r3, [r5, #16]
 8004dc2:	b99b      	cbnz	r3, 8004dec <_vfiprintf_r+0x5c>
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f000 fbd4 	bl	8005574 <__swsetup_r>
 8004dcc:	b170      	cbz	r0, 8004dec <_vfiprintf_r+0x5c>
 8004dce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dd0:	07dc      	lsls	r4, r3, #31
 8004dd2:	d504      	bpl.n	8004dde <_vfiprintf_r+0x4e>
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	b01d      	add	sp, #116	@ 0x74
 8004dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dde:	89ab      	ldrh	r3, [r5, #12]
 8004de0:	0598      	lsls	r0, r3, #22
 8004de2:	d4f7      	bmi.n	8004dd4 <_vfiprintf_r+0x44>
 8004de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004de6:	f7ff fea7 	bl	8004b38 <__retarget_lock_release_recursive>
 8004dea:	e7f3      	b.n	8004dd4 <_vfiprintf_r+0x44>
 8004dec:	2300      	movs	r3, #0
 8004dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8004df0:	2320      	movs	r3, #32
 8004df2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dfa:	2330      	movs	r3, #48	@ 0x30
 8004dfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004fac <_vfiprintf_r+0x21c>
 8004e00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e04:	f04f 0901 	mov.w	r9, #1
 8004e08:	4623      	mov	r3, r4
 8004e0a:	469a      	mov	sl, r3
 8004e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e10:	b10a      	cbz	r2, 8004e16 <_vfiprintf_r+0x86>
 8004e12:	2a25      	cmp	r2, #37	@ 0x25
 8004e14:	d1f9      	bne.n	8004e0a <_vfiprintf_r+0x7a>
 8004e16:	ebba 0b04 	subs.w	fp, sl, r4
 8004e1a:	d00b      	beq.n	8004e34 <_vfiprintf_r+0xa4>
 8004e1c:	465b      	mov	r3, fp
 8004e1e:	4622      	mov	r2, r4
 8004e20:	4629      	mov	r1, r5
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7ff ffa1 	bl	8004d6a <__sfputs_r>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	f000 80a7 	beq.w	8004f7c <_vfiprintf_r+0x1ec>
 8004e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e30:	445a      	add	r2, fp
 8004e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e34:	f89a 3000 	ldrb.w	r3, [sl]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 809f 	beq.w	8004f7c <_vfiprintf_r+0x1ec>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e48:	f10a 0a01 	add.w	sl, sl, #1
 8004e4c:	9304      	str	r3, [sp, #16]
 8004e4e:	9307      	str	r3, [sp, #28]
 8004e50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e56:	4654      	mov	r4, sl
 8004e58:	2205      	movs	r2, #5
 8004e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5e:	4853      	ldr	r0, [pc, #332]	@ (8004fac <_vfiprintf_r+0x21c>)
 8004e60:	f7fb f9de 	bl	8000220 <memchr>
 8004e64:	9a04      	ldr	r2, [sp, #16]
 8004e66:	b9d8      	cbnz	r0, 8004ea0 <_vfiprintf_r+0x110>
 8004e68:	06d1      	lsls	r1, r2, #27
 8004e6a:	bf44      	itt	mi
 8004e6c:	2320      	movmi	r3, #32
 8004e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e72:	0713      	lsls	r3, r2, #28
 8004e74:	bf44      	itt	mi
 8004e76:	232b      	movmi	r3, #43	@ 0x2b
 8004e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e82:	d015      	beq.n	8004eb0 <_vfiprintf_r+0x120>
 8004e84:	9a07      	ldr	r2, [sp, #28]
 8004e86:	4654      	mov	r4, sl
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f04f 0c0a 	mov.w	ip, #10
 8004e8e:	4621      	mov	r1, r4
 8004e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e94:	3b30      	subs	r3, #48	@ 0x30
 8004e96:	2b09      	cmp	r3, #9
 8004e98:	d94b      	bls.n	8004f32 <_vfiprintf_r+0x1a2>
 8004e9a:	b1b0      	cbz	r0, 8004eca <_vfiprintf_r+0x13a>
 8004e9c:	9207      	str	r2, [sp, #28]
 8004e9e:	e014      	b.n	8004eca <_vfiprintf_r+0x13a>
 8004ea0:	eba0 0308 	sub.w	r3, r0, r8
 8004ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	9304      	str	r3, [sp, #16]
 8004eac:	46a2      	mov	sl, r4
 8004eae:	e7d2      	b.n	8004e56 <_vfiprintf_r+0xc6>
 8004eb0:	9b03      	ldr	r3, [sp, #12]
 8004eb2:	1d19      	adds	r1, r3, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	9103      	str	r1, [sp, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bfbb      	ittet	lt
 8004ebc:	425b      	neglt	r3, r3
 8004ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8004ec2:	9307      	strge	r3, [sp, #28]
 8004ec4:	9307      	strlt	r3, [sp, #28]
 8004ec6:	bfb8      	it	lt
 8004ec8:	9204      	strlt	r2, [sp, #16]
 8004eca:	7823      	ldrb	r3, [r4, #0]
 8004ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ece:	d10a      	bne.n	8004ee6 <_vfiprintf_r+0x156>
 8004ed0:	7863      	ldrb	r3, [r4, #1]
 8004ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed4:	d132      	bne.n	8004f3c <_vfiprintf_r+0x1ac>
 8004ed6:	9b03      	ldr	r3, [sp, #12]
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	9203      	str	r2, [sp, #12]
 8004ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ee2:	3402      	adds	r4, #2
 8004ee4:	9305      	str	r3, [sp, #20]
 8004ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004fbc <_vfiprintf_r+0x22c>
 8004eea:	7821      	ldrb	r1, [r4, #0]
 8004eec:	2203      	movs	r2, #3
 8004eee:	4650      	mov	r0, sl
 8004ef0:	f7fb f996 	bl	8000220 <memchr>
 8004ef4:	b138      	cbz	r0, 8004f06 <_vfiprintf_r+0x176>
 8004ef6:	9b04      	ldr	r3, [sp, #16]
 8004ef8:	eba0 000a 	sub.w	r0, r0, sl
 8004efc:	2240      	movs	r2, #64	@ 0x40
 8004efe:	4082      	lsls	r2, r0
 8004f00:	4313      	orrs	r3, r2
 8004f02:	3401      	adds	r4, #1
 8004f04:	9304      	str	r3, [sp, #16]
 8004f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f0a:	4829      	ldr	r0, [pc, #164]	@ (8004fb0 <_vfiprintf_r+0x220>)
 8004f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f10:	2206      	movs	r2, #6
 8004f12:	f7fb f985 	bl	8000220 <memchr>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d03f      	beq.n	8004f9a <_vfiprintf_r+0x20a>
 8004f1a:	4b26      	ldr	r3, [pc, #152]	@ (8004fb4 <_vfiprintf_r+0x224>)
 8004f1c:	bb1b      	cbnz	r3, 8004f66 <_vfiprintf_r+0x1d6>
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	3307      	adds	r3, #7
 8004f22:	f023 0307 	bic.w	r3, r3, #7
 8004f26:	3308      	adds	r3, #8
 8004f28:	9303      	str	r3, [sp, #12]
 8004f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f2c:	443b      	add	r3, r7
 8004f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f30:	e76a      	b.n	8004e08 <_vfiprintf_r+0x78>
 8004f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f36:	460c      	mov	r4, r1
 8004f38:	2001      	movs	r0, #1
 8004f3a:	e7a8      	b.n	8004e8e <_vfiprintf_r+0xfe>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	3401      	adds	r4, #1
 8004f40:	9305      	str	r3, [sp, #20]
 8004f42:	4619      	mov	r1, r3
 8004f44:	f04f 0c0a 	mov.w	ip, #10
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f4e:	3a30      	subs	r2, #48	@ 0x30
 8004f50:	2a09      	cmp	r2, #9
 8004f52:	d903      	bls.n	8004f5c <_vfiprintf_r+0x1cc>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0c6      	beq.n	8004ee6 <_vfiprintf_r+0x156>
 8004f58:	9105      	str	r1, [sp, #20]
 8004f5a:	e7c4      	b.n	8004ee6 <_vfiprintf_r+0x156>
 8004f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f60:	4604      	mov	r4, r0
 8004f62:	2301      	movs	r3, #1
 8004f64:	e7f0      	b.n	8004f48 <_vfiprintf_r+0x1b8>
 8004f66:	ab03      	add	r3, sp, #12
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	462a      	mov	r2, r5
 8004f6c:	4b12      	ldr	r3, [pc, #72]	@ (8004fb8 <_vfiprintf_r+0x228>)
 8004f6e:	a904      	add	r1, sp, #16
 8004f70:	4630      	mov	r0, r6
 8004f72:	f3af 8000 	nop.w
 8004f76:	4607      	mov	r7, r0
 8004f78:	1c78      	adds	r0, r7, #1
 8004f7a:	d1d6      	bne.n	8004f2a <_vfiprintf_r+0x19a>
 8004f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f7e:	07d9      	lsls	r1, r3, #31
 8004f80:	d405      	bmi.n	8004f8e <_vfiprintf_r+0x1fe>
 8004f82:	89ab      	ldrh	r3, [r5, #12]
 8004f84:	059a      	lsls	r2, r3, #22
 8004f86:	d402      	bmi.n	8004f8e <_vfiprintf_r+0x1fe>
 8004f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f8a:	f7ff fdd5 	bl	8004b38 <__retarget_lock_release_recursive>
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	065b      	lsls	r3, r3, #25
 8004f92:	f53f af1f 	bmi.w	8004dd4 <_vfiprintf_r+0x44>
 8004f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f98:	e71e      	b.n	8004dd8 <_vfiprintf_r+0x48>
 8004f9a:	ab03      	add	r3, sp, #12
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	462a      	mov	r2, r5
 8004fa0:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <_vfiprintf_r+0x228>)
 8004fa2:	a904      	add	r1, sp, #16
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f000 f879 	bl	800509c <_printf_i>
 8004faa:	e7e4      	b.n	8004f76 <_vfiprintf_r+0x1e6>
 8004fac:	080056ec 	.word	0x080056ec
 8004fb0:	080056f6 	.word	0x080056f6
 8004fb4:	00000000 	.word	0x00000000
 8004fb8:	08004d6b 	.word	0x08004d6b
 8004fbc:	080056f2 	.word	0x080056f2

08004fc0 <_printf_common>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	4698      	mov	r8, r3
 8004fc8:	688a      	ldr	r2, [r1, #8]
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	bfb8      	it	lt
 8004fd4:	4613      	movlt	r3, r2
 8004fd6:	6033      	str	r3, [r6, #0]
 8004fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fdc:	4607      	mov	r7, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	b10a      	cbz	r2, 8004fe6 <_printf_common+0x26>
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	6033      	str	r3, [r6, #0]
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	0699      	lsls	r1, r3, #26
 8004fea:	bf42      	ittt	mi
 8004fec:	6833      	ldrmi	r3, [r6, #0]
 8004fee:	3302      	addmi	r3, #2
 8004ff0:	6033      	strmi	r3, [r6, #0]
 8004ff2:	6825      	ldr	r5, [r4, #0]
 8004ff4:	f015 0506 	ands.w	r5, r5, #6
 8004ff8:	d106      	bne.n	8005008 <_printf_common+0x48>
 8004ffa:	f104 0a19 	add.w	sl, r4, #25
 8004ffe:	68e3      	ldr	r3, [r4, #12]
 8005000:	6832      	ldr	r2, [r6, #0]
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	42ab      	cmp	r3, r5
 8005006:	dc26      	bgt.n	8005056 <_printf_common+0x96>
 8005008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800500c:	6822      	ldr	r2, [r4, #0]
 800500e:	3b00      	subs	r3, #0
 8005010:	bf18      	it	ne
 8005012:	2301      	movne	r3, #1
 8005014:	0692      	lsls	r2, r2, #26
 8005016:	d42b      	bmi.n	8005070 <_printf_common+0xb0>
 8005018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800501c:	4641      	mov	r1, r8
 800501e:	4638      	mov	r0, r7
 8005020:	47c8      	blx	r9
 8005022:	3001      	adds	r0, #1
 8005024:	d01e      	beq.n	8005064 <_printf_common+0xa4>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	6922      	ldr	r2, [r4, #16]
 800502a:	f003 0306 	and.w	r3, r3, #6
 800502e:	2b04      	cmp	r3, #4
 8005030:	bf02      	ittt	eq
 8005032:	68e5      	ldreq	r5, [r4, #12]
 8005034:	6833      	ldreq	r3, [r6, #0]
 8005036:	1aed      	subeq	r5, r5, r3
 8005038:	68a3      	ldr	r3, [r4, #8]
 800503a:	bf0c      	ite	eq
 800503c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005040:	2500      	movne	r5, #0
 8005042:	4293      	cmp	r3, r2
 8005044:	bfc4      	itt	gt
 8005046:	1a9b      	subgt	r3, r3, r2
 8005048:	18ed      	addgt	r5, r5, r3
 800504a:	2600      	movs	r6, #0
 800504c:	341a      	adds	r4, #26
 800504e:	42b5      	cmp	r5, r6
 8005050:	d11a      	bne.n	8005088 <_printf_common+0xc8>
 8005052:	2000      	movs	r0, #0
 8005054:	e008      	b.n	8005068 <_printf_common+0xa8>
 8005056:	2301      	movs	r3, #1
 8005058:	4652      	mov	r2, sl
 800505a:	4641      	mov	r1, r8
 800505c:	4638      	mov	r0, r7
 800505e:	47c8      	blx	r9
 8005060:	3001      	adds	r0, #1
 8005062:	d103      	bne.n	800506c <_printf_common+0xac>
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506c:	3501      	adds	r5, #1
 800506e:	e7c6      	b.n	8004ffe <_printf_common+0x3e>
 8005070:	18e1      	adds	r1, r4, r3
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	2030      	movs	r0, #48	@ 0x30
 8005076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800507a:	4422      	add	r2, r4
 800507c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005084:	3302      	adds	r3, #2
 8005086:	e7c7      	b.n	8005018 <_printf_common+0x58>
 8005088:	2301      	movs	r3, #1
 800508a:	4622      	mov	r2, r4
 800508c:	4641      	mov	r1, r8
 800508e:	4638      	mov	r0, r7
 8005090:	47c8      	blx	r9
 8005092:	3001      	adds	r0, #1
 8005094:	d0e6      	beq.n	8005064 <_printf_common+0xa4>
 8005096:	3601      	adds	r6, #1
 8005098:	e7d9      	b.n	800504e <_printf_common+0x8e>
	...

0800509c <_printf_i>:
 800509c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	7e0f      	ldrb	r7, [r1, #24]
 80050a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050a4:	2f78      	cmp	r7, #120	@ 0x78
 80050a6:	4691      	mov	r9, r2
 80050a8:	4680      	mov	r8, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	469a      	mov	sl, r3
 80050ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050b2:	d807      	bhi.n	80050c4 <_printf_i+0x28>
 80050b4:	2f62      	cmp	r7, #98	@ 0x62
 80050b6:	d80a      	bhi.n	80050ce <_printf_i+0x32>
 80050b8:	2f00      	cmp	r7, #0
 80050ba:	f000 80d2 	beq.w	8005262 <_printf_i+0x1c6>
 80050be:	2f58      	cmp	r7, #88	@ 0x58
 80050c0:	f000 80b9 	beq.w	8005236 <_printf_i+0x19a>
 80050c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050cc:	e03a      	b.n	8005144 <_printf_i+0xa8>
 80050ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050d2:	2b15      	cmp	r3, #21
 80050d4:	d8f6      	bhi.n	80050c4 <_printf_i+0x28>
 80050d6:	a101      	add	r1, pc, #4	@ (adr r1, 80050dc <_printf_i+0x40>)
 80050d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050dc:	08005135 	.word	0x08005135
 80050e0:	08005149 	.word	0x08005149
 80050e4:	080050c5 	.word	0x080050c5
 80050e8:	080050c5 	.word	0x080050c5
 80050ec:	080050c5 	.word	0x080050c5
 80050f0:	080050c5 	.word	0x080050c5
 80050f4:	08005149 	.word	0x08005149
 80050f8:	080050c5 	.word	0x080050c5
 80050fc:	080050c5 	.word	0x080050c5
 8005100:	080050c5 	.word	0x080050c5
 8005104:	080050c5 	.word	0x080050c5
 8005108:	08005249 	.word	0x08005249
 800510c:	08005173 	.word	0x08005173
 8005110:	08005203 	.word	0x08005203
 8005114:	080050c5 	.word	0x080050c5
 8005118:	080050c5 	.word	0x080050c5
 800511c:	0800526b 	.word	0x0800526b
 8005120:	080050c5 	.word	0x080050c5
 8005124:	08005173 	.word	0x08005173
 8005128:	080050c5 	.word	0x080050c5
 800512c:	080050c5 	.word	0x080050c5
 8005130:	0800520b 	.word	0x0800520b
 8005134:	6833      	ldr	r3, [r6, #0]
 8005136:	1d1a      	adds	r2, r3, #4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6032      	str	r2, [r6, #0]
 800513c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005144:	2301      	movs	r3, #1
 8005146:	e09d      	b.n	8005284 <_printf_i+0x1e8>
 8005148:	6833      	ldr	r3, [r6, #0]
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	1d19      	adds	r1, r3, #4
 800514e:	6031      	str	r1, [r6, #0]
 8005150:	0606      	lsls	r6, r0, #24
 8005152:	d501      	bpl.n	8005158 <_printf_i+0xbc>
 8005154:	681d      	ldr	r5, [r3, #0]
 8005156:	e003      	b.n	8005160 <_printf_i+0xc4>
 8005158:	0645      	lsls	r5, r0, #25
 800515a:	d5fb      	bpl.n	8005154 <_printf_i+0xb8>
 800515c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005160:	2d00      	cmp	r5, #0
 8005162:	da03      	bge.n	800516c <_printf_i+0xd0>
 8005164:	232d      	movs	r3, #45	@ 0x2d
 8005166:	426d      	negs	r5, r5
 8005168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800516c:	4859      	ldr	r0, [pc, #356]	@ (80052d4 <_printf_i+0x238>)
 800516e:	230a      	movs	r3, #10
 8005170:	e011      	b.n	8005196 <_printf_i+0xfa>
 8005172:	6821      	ldr	r1, [r4, #0]
 8005174:	6833      	ldr	r3, [r6, #0]
 8005176:	0608      	lsls	r0, r1, #24
 8005178:	f853 5b04 	ldr.w	r5, [r3], #4
 800517c:	d402      	bmi.n	8005184 <_printf_i+0xe8>
 800517e:	0649      	lsls	r1, r1, #25
 8005180:	bf48      	it	mi
 8005182:	b2ad      	uxthmi	r5, r5
 8005184:	2f6f      	cmp	r7, #111	@ 0x6f
 8005186:	4853      	ldr	r0, [pc, #332]	@ (80052d4 <_printf_i+0x238>)
 8005188:	6033      	str	r3, [r6, #0]
 800518a:	bf14      	ite	ne
 800518c:	230a      	movne	r3, #10
 800518e:	2308      	moveq	r3, #8
 8005190:	2100      	movs	r1, #0
 8005192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005196:	6866      	ldr	r6, [r4, #4]
 8005198:	60a6      	str	r6, [r4, #8]
 800519a:	2e00      	cmp	r6, #0
 800519c:	bfa2      	ittt	ge
 800519e:	6821      	ldrge	r1, [r4, #0]
 80051a0:	f021 0104 	bicge.w	r1, r1, #4
 80051a4:	6021      	strge	r1, [r4, #0]
 80051a6:	b90d      	cbnz	r5, 80051ac <_printf_i+0x110>
 80051a8:	2e00      	cmp	r6, #0
 80051aa:	d04b      	beq.n	8005244 <_printf_i+0x1a8>
 80051ac:	4616      	mov	r6, r2
 80051ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80051b2:	fb03 5711 	mls	r7, r3, r1, r5
 80051b6:	5dc7      	ldrb	r7, [r0, r7]
 80051b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051bc:	462f      	mov	r7, r5
 80051be:	42bb      	cmp	r3, r7
 80051c0:	460d      	mov	r5, r1
 80051c2:	d9f4      	bls.n	80051ae <_printf_i+0x112>
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d10b      	bne.n	80051e0 <_printf_i+0x144>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	07df      	lsls	r7, r3, #31
 80051cc:	d508      	bpl.n	80051e0 <_printf_i+0x144>
 80051ce:	6923      	ldr	r3, [r4, #16]
 80051d0:	6861      	ldr	r1, [r4, #4]
 80051d2:	4299      	cmp	r1, r3
 80051d4:	bfde      	ittt	le
 80051d6:	2330      	movle	r3, #48	@ 0x30
 80051d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051e0:	1b92      	subs	r2, r2, r6
 80051e2:	6122      	str	r2, [r4, #16]
 80051e4:	f8cd a000 	str.w	sl, [sp]
 80051e8:	464b      	mov	r3, r9
 80051ea:	aa03      	add	r2, sp, #12
 80051ec:	4621      	mov	r1, r4
 80051ee:	4640      	mov	r0, r8
 80051f0:	f7ff fee6 	bl	8004fc0 <_printf_common>
 80051f4:	3001      	adds	r0, #1
 80051f6:	d14a      	bne.n	800528e <_printf_i+0x1f2>
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295
 80051fc:	b004      	add	sp, #16
 80051fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f043 0320 	orr.w	r3, r3, #32
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	4833      	ldr	r0, [pc, #204]	@ (80052d8 <_printf_i+0x23c>)
 800520c:	2778      	movs	r7, #120	@ 0x78
 800520e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	6831      	ldr	r1, [r6, #0]
 8005216:	061f      	lsls	r7, r3, #24
 8005218:	f851 5b04 	ldr.w	r5, [r1], #4
 800521c:	d402      	bmi.n	8005224 <_printf_i+0x188>
 800521e:	065f      	lsls	r7, r3, #25
 8005220:	bf48      	it	mi
 8005222:	b2ad      	uxthmi	r5, r5
 8005224:	6031      	str	r1, [r6, #0]
 8005226:	07d9      	lsls	r1, r3, #31
 8005228:	bf44      	itt	mi
 800522a:	f043 0320 	orrmi.w	r3, r3, #32
 800522e:	6023      	strmi	r3, [r4, #0]
 8005230:	b11d      	cbz	r5, 800523a <_printf_i+0x19e>
 8005232:	2310      	movs	r3, #16
 8005234:	e7ac      	b.n	8005190 <_printf_i+0xf4>
 8005236:	4827      	ldr	r0, [pc, #156]	@ (80052d4 <_printf_i+0x238>)
 8005238:	e7e9      	b.n	800520e <_printf_i+0x172>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f023 0320 	bic.w	r3, r3, #32
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	e7f6      	b.n	8005232 <_printf_i+0x196>
 8005244:	4616      	mov	r6, r2
 8005246:	e7bd      	b.n	80051c4 <_printf_i+0x128>
 8005248:	6833      	ldr	r3, [r6, #0]
 800524a:	6825      	ldr	r5, [r4, #0]
 800524c:	6961      	ldr	r1, [r4, #20]
 800524e:	1d18      	adds	r0, r3, #4
 8005250:	6030      	str	r0, [r6, #0]
 8005252:	062e      	lsls	r6, r5, #24
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	d501      	bpl.n	800525c <_printf_i+0x1c0>
 8005258:	6019      	str	r1, [r3, #0]
 800525a:	e002      	b.n	8005262 <_printf_i+0x1c6>
 800525c:	0668      	lsls	r0, r5, #25
 800525e:	d5fb      	bpl.n	8005258 <_printf_i+0x1bc>
 8005260:	8019      	strh	r1, [r3, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	6123      	str	r3, [r4, #16]
 8005266:	4616      	mov	r6, r2
 8005268:	e7bc      	b.n	80051e4 <_printf_i+0x148>
 800526a:	6833      	ldr	r3, [r6, #0]
 800526c:	1d1a      	adds	r2, r3, #4
 800526e:	6032      	str	r2, [r6, #0]
 8005270:	681e      	ldr	r6, [r3, #0]
 8005272:	6862      	ldr	r2, [r4, #4]
 8005274:	2100      	movs	r1, #0
 8005276:	4630      	mov	r0, r6
 8005278:	f7fa ffd2 	bl	8000220 <memchr>
 800527c:	b108      	cbz	r0, 8005282 <_printf_i+0x1e6>
 800527e:	1b80      	subs	r0, r0, r6
 8005280:	6060      	str	r0, [r4, #4]
 8005282:	6863      	ldr	r3, [r4, #4]
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	2300      	movs	r3, #0
 8005288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800528c:	e7aa      	b.n	80051e4 <_printf_i+0x148>
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	4632      	mov	r2, r6
 8005292:	4649      	mov	r1, r9
 8005294:	4640      	mov	r0, r8
 8005296:	47d0      	blx	sl
 8005298:	3001      	adds	r0, #1
 800529a:	d0ad      	beq.n	80051f8 <_printf_i+0x15c>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	079b      	lsls	r3, r3, #30
 80052a0:	d413      	bmi.n	80052ca <_printf_i+0x22e>
 80052a2:	68e0      	ldr	r0, [r4, #12]
 80052a4:	9b03      	ldr	r3, [sp, #12]
 80052a6:	4298      	cmp	r0, r3
 80052a8:	bfb8      	it	lt
 80052aa:	4618      	movlt	r0, r3
 80052ac:	e7a6      	b.n	80051fc <_printf_i+0x160>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4632      	mov	r2, r6
 80052b2:	4649      	mov	r1, r9
 80052b4:	4640      	mov	r0, r8
 80052b6:	47d0      	blx	sl
 80052b8:	3001      	adds	r0, #1
 80052ba:	d09d      	beq.n	80051f8 <_printf_i+0x15c>
 80052bc:	3501      	adds	r5, #1
 80052be:	68e3      	ldr	r3, [r4, #12]
 80052c0:	9903      	ldr	r1, [sp, #12]
 80052c2:	1a5b      	subs	r3, r3, r1
 80052c4:	42ab      	cmp	r3, r5
 80052c6:	dcf2      	bgt.n	80052ae <_printf_i+0x212>
 80052c8:	e7eb      	b.n	80052a2 <_printf_i+0x206>
 80052ca:	2500      	movs	r5, #0
 80052cc:	f104 0619 	add.w	r6, r4, #25
 80052d0:	e7f5      	b.n	80052be <_printf_i+0x222>
 80052d2:	bf00      	nop
 80052d4:	080056fd 	.word	0x080056fd
 80052d8:	0800570e 	.word	0x0800570e

080052dc <__sflush_r>:
 80052dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e4:	0716      	lsls	r6, r2, #28
 80052e6:	4605      	mov	r5, r0
 80052e8:	460c      	mov	r4, r1
 80052ea:	d454      	bmi.n	8005396 <__sflush_r+0xba>
 80052ec:	684b      	ldr	r3, [r1, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	dc02      	bgt.n	80052f8 <__sflush_r+0x1c>
 80052f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	dd48      	ble.n	800538a <__sflush_r+0xae>
 80052f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052fa:	2e00      	cmp	r6, #0
 80052fc:	d045      	beq.n	800538a <__sflush_r+0xae>
 80052fe:	2300      	movs	r3, #0
 8005300:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005304:	682f      	ldr	r7, [r5, #0]
 8005306:	6a21      	ldr	r1, [r4, #32]
 8005308:	602b      	str	r3, [r5, #0]
 800530a:	d030      	beq.n	800536e <__sflush_r+0x92>
 800530c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	0759      	lsls	r1, r3, #29
 8005312:	d505      	bpl.n	8005320 <__sflush_r+0x44>
 8005314:	6863      	ldr	r3, [r4, #4]
 8005316:	1ad2      	subs	r2, r2, r3
 8005318:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800531a:	b10b      	cbz	r3, 8005320 <__sflush_r+0x44>
 800531c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	2300      	movs	r3, #0
 8005322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005324:	6a21      	ldr	r1, [r4, #32]
 8005326:	4628      	mov	r0, r5
 8005328:	47b0      	blx	r6
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	89a3      	ldrh	r3, [r4, #12]
 800532e:	d106      	bne.n	800533e <__sflush_r+0x62>
 8005330:	6829      	ldr	r1, [r5, #0]
 8005332:	291d      	cmp	r1, #29
 8005334:	d82b      	bhi.n	800538e <__sflush_r+0xb2>
 8005336:	4a2a      	ldr	r2, [pc, #168]	@ (80053e0 <__sflush_r+0x104>)
 8005338:	410a      	asrs	r2, r1
 800533a:	07d6      	lsls	r6, r2, #31
 800533c:	d427      	bmi.n	800538e <__sflush_r+0xb2>
 800533e:	2200      	movs	r2, #0
 8005340:	6062      	str	r2, [r4, #4]
 8005342:	04d9      	lsls	r1, r3, #19
 8005344:	6922      	ldr	r2, [r4, #16]
 8005346:	6022      	str	r2, [r4, #0]
 8005348:	d504      	bpl.n	8005354 <__sflush_r+0x78>
 800534a:	1c42      	adds	r2, r0, #1
 800534c:	d101      	bne.n	8005352 <__sflush_r+0x76>
 800534e:	682b      	ldr	r3, [r5, #0]
 8005350:	b903      	cbnz	r3, 8005354 <__sflush_r+0x78>
 8005352:	6560      	str	r0, [r4, #84]	@ 0x54
 8005354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005356:	602f      	str	r7, [r5, #0]
 8005358:	b1b9      	cbz	r1, 800538a <__sflush_r+0xae>
 800535a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800535e:	4299      	cmp	r1, r3
 8005360:	d002      	beq.n	8005368 <__sflush_r+0x8c>
 8005362:	4628      	mov	r0, r5
 8005364:	f7ff fbea 	bl	8004b3c <_free_r>
 8005368:	2300      	movs	r3, #0
 800536a:	6363      	str	r3, [r4, #52]	@ 0x34
 800536c:	e00d      	b.n	800538a <__sflush_r+0xae>
 800536e:	2301      	movs	r3, #1
 8005370:	4628      	mov	r0, r5
 8005372:	47b0      	blx	r6
 8005374:	4602      	mov	r2, r0
 8005376:	1c50      	adds	r0, r2, #1
 8005378:	d1c9      	bne.n	800530e <__sflush_r+0x32>
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0c6      	beq.n	800530e <__sflush_r+0x32>
 8005380:	2b1d      	cmp	r3, #29
 8005382:	d001      	beq.n	8005388 <__sflush_r+0xac>
 8005384:	2b16      	cmp	r3, #22
 8005386:	d11e      	bne.n	80053c6 <__sflush_r+0xea>
 8005388:	602f      	str	r7, [r5, #0]
 800538a:	2000      	movs	r0, #0
 800538c:	e022      	b.n	80053d4 <__sflush_r+0xf8>
 800538e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005392:	b21b      	sxth	r3, r3
 8005394:	e01b      	b.n	80053ce <__sflush_r+0xf2>
 8005396:	690f      	ldr	r7, [r1, #16]
 8005398:	2f00      	cmp	r7, #0
 800539a:	d0f6      	beq.n	800538a <__sflush_r+0xae>
 800539c:	0793      	lsls	r3, r2, #30
 800539e:	680e      	ldr	r6, [r1, #0]
 80053a0:	bf08      	it	eq
 80053a2:	694b      	ldreq	r3, [r1, #20]
 80053a4:	600f      	str	r7, [r1, #0]
 80053a6:	bf18      	it	ne
 80053a8:	2300      	movne	r3, #0
 80053aa:	eba6 0807 	sub.w	r8, r6, r7
 80053ae:	608b      	str	r3, [r1, #8]
 80053b0:	f1b8 0f00 	cmp.w	r8, #0
 80053b4:	dde9      	ble.n	800538a <__sflush_r+0xae>
 80053b6:	6a21      	ldr	r1, [r4, #32]
 80053b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80053ba:	4643      	mov	r3, r8
 80053bc:	463a      	mov	r2, r7
 80053be:	4628      	mov	r0, r5
 80053c0:	47b0      	blx	r6
 80053c2:	2800      	cmp	r0, #0
 80053c4:	dc08      	bgt.n	80053d8 <__sflush_r+0xfc>
 80053c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ce:	81a3      	strh	r3, [r4, #12]
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295
 80053d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d8:	4407      	add	r7, r0
 80053da:	eba8 0800 	sub.w	r8, r8, r0
 80053de:	e7e7      	b.n	80053b0 <__sflush_r+0xd4>
 80053e0:	dfbffffe 	.word	0xdfbffffe

080053e4 <_fflush_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	690b      	ldr	r3, [r1, #16]
 80053e8:	4605      	mov	r5, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	b913      	cbnz	r3, 80053f4 <_fflush_r+0x10>
 80053ee:	2500      	movs	r5, #0
 80053f0:	4628      	mov	r0, r5
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	b118      	cbz	r0, 80053fe <_fflush_r+0x1a>
 80053f6:	6a03      	ldr	r3, [r0, #32]
 80053f8:	b90b      	cbnz	r3, 80053fe <_fflush_r+0x1a>
 80053fa:	f7ff f9db 	bl	80047b4 <__sinit>
 80053fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f3      	beq.n	80053ee <_fflush_r+0xa>
 8005406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005408:	07d0      	lsls	r0, r2, #31
 800540a:	d404      	bmi.n	8005416 <_fflush_r+0x32>
 800540c:	0599      	lsls	r1, r3, #22
 800540e:	d402      	bmi.n	8005416 <_fflush_r+0x32>
 8005410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005412:	f7ff fb90 	bl	8004b36 <__retarget_lock_acquire_recursive>
 8005416:	4628      	mov	r0, r5
 8005418:	4621      	mov	r1, r4
 800541a:	f7ff ff5f 	bl	80052dc <__sflush_r>
 800541e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005420:	07da      	lsls	r2, r3, #31
 8005422:	4605      	mov	r5, r0
 8005424:	d4e4      	bmi.n	80053f0 <_fflush_r+0xc>
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	059b      	lsls	r3, r3, #22
 800542a:	d4e1      	bmi.n	80053f0 <_fflush_r+0xc>
 800542c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800542e:	f7ff fb83 	bl	8004b38 <__retarget_lock_release_recursive>
 8005432:	e7dd      	b.n	80053f0 <_fflush_r+0xc>

08005434 <__swhatbuf_r>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	460c      	mov	r4, r1
 8005438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543c:	2900      	cmp	r1, #0
 800543e:	b096      	sub	sp, #88	@ 0x58
 8005440:	4615      	mov	r5, r2
 8005442:	461e      	mov	r6, r3
 8005444:	da0d      	bge.n	8005462 <__swhatbuf_r+0x2e>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800544c:	f04f 0100 	mov.w	r1, #0
 8005450:	bf14      	ite	ne
 8005452:	2340      	movne	r3, #64	@ 0x40
 8005454:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005458:	2000      	movs	r0, #0
 800545a:	6031      	str	r1, [r6, #0]
 800545c:	602b      	str	r3, [r5, #0]
 800545e:	b016      	add	sp, #88	@ 0x58
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	466a      	mov	r2, sp
 8005464:	f000 f8dc 	bl	8005620 <_fstat_r>
 8005468:	2800      	cmp	r0, #0
 800546a:	dbec      	blt.n	8005446 <__swhatbuf_r+0x12>
 800546c:	9901      	ldr	r1, [sp, #4]
 800546e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005472:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005476:	4259      	negs	r1, r3
 8005478:	4159      	adcs	r1, r3
 800547a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800547e:	e7eb      	b.n	8005458 <__swhatbuf_r+0x24>

08005480 <__smakebuf_r>:
 8005480:	898b      	ldrh	r3, [r1, #12]
 8005482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005484:	079d      	lsls	r5, r3, #30
 8005486:	4606      	mov	r6, r0
 8005488:	460c      	mov	r4, r1
 800548a:	d507      	bpl.n	800549c <__smakebuf_r+0x1c>
 800548c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	2301      	movs	r3, #1
 8005496:	6163      	str	r3, [r4, #20]
 8005498:	b003      	add	sp, #12
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549c:	ab01      	add	r3, sp, #4
 800549e:	466a      	mov	r2, sp
 80054a0:	f7ff ffc8 	bl	8005434 <__swhatbuf_r>
 80054a4:	9f00      	ldr	r7, [sp, #0]
 80054a6:	4605      	mov	r5, r0
 80054a8:	4639      	mov	r1, r7
 80054aa:	4630      	mov	r0, r6
 80054ac:	f7ff fbba 	bl	8004c24 <_malloc_r>
 80054b0:	b948      	cbnz	r0, 80054c6 <__smakebuf_r+0x46>
 80054b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b6:	059a      	lsls	r2, r3, #22
 80054b8:	d4ee      	bmi.n	8005498 <__smakebuf_r+0x18>
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	f043 0302 	orr.w	r3, r3, #2
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	e7e2      	b.n	800548c <__smakebuf_r+0xc>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	6020      	str	r0, [r4, #0]
 80054ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	9b01      	ldr	r3, [sp, #4]
 80054d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054d6:	b15b      	cbz	r3, 80054f0 <__smakebuf_r+0x70>
 80054d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054dc:	4630      	mov	r0, r6
 80054de:	f000 f8b1 	bl	8005644 <_isatty_r>
 80054e2:	b128      	cbz	r0, 80054f0 <__smakebuf_r+0x70>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	431d      	orrs	r5, r3
 80054f4:	81a5      	strh	r5, [r4, #12]
 80054f6:	e7cf      	b.n	8005498 <__smakebuf_r+0x18>

080054f8 <__swbuf_r>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	460e      	mov	r6, r1
 80054fc:	4614      	mov	r4, r2
 80054fe:	4605      	mov	r5, r0
 8005500:	b118      	cbz	r0, 800550a <__swbuf_r+0x12>
 8005502:	6a03      	ldr	r3, [r0, #32]
 8005504:	b90b      	cbnz	r3, 800550a <__swbuf_r+0x12>
 8005506:	f7ff f955 	bl	80047b4 <__sinit>
 800550a:	69a3      	ldr	r3, [r4, #24]
 800550c:	60a3      	str	r3, [r4, #8]
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	071a      	lsls	r2, r3, #28
 8005512:	d501      	bpl.n	8005518 <__swbuf_r+0x20>
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	b943      	cbnz	r3, 800552a <__swbuf_r+0x32>
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f000 f82a 	bl	8005574 <__swsetup_r>
 8005520:	b118      	cbz	r0, 800552a <__swbuf_r+0x32>
 8005522:	f04f 37ff 	mov.w	r7, #4294967295
 8005526:	4638      	mov	r0, r7
 8005528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	6922      	ldr	r2, [r4, #16]
 800552e:	1a98      	subs	r0, r3, r2
 8005530:	6963      	ldr	r3, [r4, #20]
 8005532:	b2f6      	uxtb	r6, r6
 8005534:	4283      	cmp	r3, r0
 8005536:	4637      	mov	r7, r6
 8005538:	dc05      	bgt.n	8005546 <__swbuf_r+0x4e>
 800553a:	4621      	mov	r1, r4
 800553c:	4628      	mov	r0, r5
 800553e:	f7ff ff51 	bl	80053e4 <_fflush_r>
 8005542:	2800      	cmp	r0, #0
 8005544:	d1ed      	bne.n	8005522 <__swbuf_r+0x2a>
 8005546:	68a3      	ldr	r3, [r4, #8]
 8005548:	3b01      	subs	r3, #1
 800554a:	60a3      	str	r3, [r4, #8]
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	701e      	strb	r6, [r3, #0]
 8005554:	6962      	ldr	r2, [r4, #20]
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	429a      	cmp	r2, r3
 800555a:	d004      	beq.n	8005566 <__swbuf_r+0x6e>
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	07db      	lsls	r3, r3, #31
 8005560:	d5e1      	bpl.n	8005526 <__swbuf_r+0x2e>
 8005562:	2e0a      	cmp	r6, #10
 8005564:	d1df      	bne.n	8005526 <__swbuf_r+0x2e>
 8005566:	4621      	mov	r1, r4
 8005568:	4628      	mov	r0, r5
 800556a:	f7ff ff3b 	bl	80053e4 <_fflush_r>
 800556e:	2800      	cmp	r0, #0
 8005570:	d0d9      	beq.n	8005526 <__swbuf_r+0x2e>
 8005572:	e7d6      	b.n	8005522 <__swbuf_r+0x2a>

08005574 <__swsetup_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4b29      	ldr	r3, [pc, #164]	@ (800561c <__swsetup_r+0xa8>)
 8005578:	4605      	mov	r5, r0
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	460c      	mov	r4, r1
 800557e:	b118      	cbz	r0, 8005588 <__swsetup_r+0x14>
 8005580:	6a03      	ldr	r3, [r0, #32]
 8005582:	b90b      	cbnz	r3, 8005588 <__swsetup_r+0x14>
 8005584:	f7ff f916 	bl	80047b4 <__sinit>
 8005588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558c:	0719      	lsls	r1, r3, #28
 800558e:	d422      	bmi.n	80055d6 <__swsetup_r+0x62>
 8005590:	06da      	lsls	r2, r3, #27
 8005592:	d407      	bmi.n	80055a4 <__swsetup_r+0x30>
 8005594:	2209      	movs	r2, #9
 8005596:	602a      	str	r2, [r5, #0]
 8005598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800559c:	81a3      	strh	r3, [r4, #12]
 800559e:	f04f 30ff 	mov.w	r0, #4294967295
 80055a2:	e033      	b.n	800560c <__swsetup_r+0x98>
 80055a4:	0758      	lsls	r0, r3, #29
 80055a6:	d512      	bpl.n	80055ce <__swsetup_r+0x5a>
 80055a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055aa:	b141      	cbz	r1, 80055be <__swsetup_r+0x4a>
 80055ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d002      	beq.n	80055ba <__swsetup_r+0x46>
 80055b4:	4628      	mov	r0, r5
 80055b6:	f7ff fac1 	bl	8004b3c <_free_r>
 80055ba:	2300      	movs	r3, #0
 80055bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	2300      	movs	r3, #0
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f043 0308 	orr.w	r3, r3, #8
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	b94b      	cbnz	r3, 80055ee <__swsetup_r+0x7a>
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e4:	d003      	beq.n	80055ee <__swsetup_r+0x7a>
 80055e6:	4621      	mov	r1, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	f7ff ff49 	bl	8005480 <__smakebuf_r>
 80055ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f2:	f013 0201 	ands.w	r2, r3, #1
 80055f6:	d00a      	beq.n	800560e <__swsetup_r+0x9a>
 80055f8:	2200      	movs	r2, #0
 80055fa:	60a2      	str	r2, [r4, #8]
 80055fc:	6962      	ldr	r2, [r4, #20]
 80055fe:	4252      	negs	r2, r2
 8005600:	61a2      	str	r2, [r4, #24]
 8005602:	6922      	ldr	r2, [r4, #16]
 8005604:	b942      	cbnz	r2, 8005618 <__swsetup_r+0xa4>
 8005606:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800560a:	d1c5      	bne.n	8005598 <__swsetup_r+0x24>
 800560c:	bd38      	pop	{r3, r4, r5, pc}
 800560e:	0799      	lsls	r1, r3, #30
 8005610:	bf58      	it	pl
 8005612:	6962      	ldrpl	r2, [r4, #20]
 8005614:	60a2      	str	r2, [r4, #8]
 8005616:	e7f4      	b.n	8005602 <__swsetup_r+0x8e>
 8005618:	2000      	movs	r0, #0
 800561a:	e7f7      	b.n	800560c <__swsetup_r+0x98>
 800561c:	20000018 	.word	0x20000018

08005620 <_fstat_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d07      	ldr	r5, [pc, #28]	@ (8005640 <_fstat_r+0x20>)
 8005624:	2300      	movs	r3, #0
 8005626:	4604      	mov	r4, r0
 8005628:	4608      	mov	r0, r1
 800562a:	4611      	mov	r1, r2
 800562c:	602b      	str	r3, [r5, #0]
 800562e:	f7fb fc9c 	bl	8000f6a <_fstat>
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	d102      	bne.n	800563c <_fstat_r+0x1c>
 8005636:	682b      	ldr	r3, [r5, #0]
 8005638:	b103      	cbz	r3, 800563c <_fstat_r+0x1c>
 800563a:	6023      	str	r3, [r4, #0]
 800563c:	bd38      	pop	{r3, r4, r5, pc}
 800563e:	bf00      	nop
 8005640:	20000394 	.word	0x20000394

08005644 <_isatty_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4d06      	ldr	r5, [pc, #24]	@ (8005660 <_isatty_r+0x1c>)
 8005648:	2300      	movs	r3, #0
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	f7fb fc9b 	bl	8000f8a <_isatty>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_isatty_r+0x1a>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	b103      	cbz	r3, 800565e <_isatty_r+0x1a>
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	20000394 	.word	0x20000394

08005664 <_sbrk_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	4d06      	ldr	r5, [pc, #24]	@ (8005680 <_sbrk_r+0x1c>)
 8005668:	2300      	movs	r3, #0
 800566a:	4604      	mov	r4, r0
 800566c:	4608      	mov	r0, r1
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	f7fb fca4 	bl	8000fbc <_sbrk>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_sbrk_r+0x1a>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_sbrk_r+0x1a>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	20000394 	.word	0x20000394

08005684 <_init>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr

08005690 <_fini>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr
