
F3RC_keisokurin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08008c98  08008c98  00009c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc0  08008fc0  0000a08c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc0  08008fc0  00009fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fc8  08008fc8  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc8  08008fc8  00009fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fcc  08008fcc  00009fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008fd0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  2000008c  0800905c  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  0800905c  0000a4b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ad4  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbb  00000000  00000000  00023b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00026950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a5  00000000  00000000  00027fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002885c  00000000  00000000  00029175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8bc  00000000  00000000  000519d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001066f7  00000000  00000000  0006c28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172984  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e00  00000000  00000000  001729c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001797c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008c80 	.word	0x08008c80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	08008c80 	.word	0x08008c80

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__gedf2>:
 800088c:	f04f 3cff 	mov.w	ip, #4294967295
 8000890:	e006      	b.n	80008a0 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__ledf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	e002      	b.n	80008a0 <__cmpdf2+0x4>
 800089a:	bf00      	nop

0800089c <__cmpdf2>:
 800089c:	f04f 0c01 	mov.w	ip, #1
 80008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b0:	bf18      	it	ne
 80008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008b6:	d01b      	beq.n	80008f0 <__cmpdf2+0x54>
 80008b8:	b001      	add	sp, #4
 80008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008be:	bf0c      	ite	eq
 80008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008c4:	ea91 0f03 	teqne	r1, r3
 80008c8:	bf02      	ittt	eq
 80008ca:	ea90 0f02 	teqeq	r0, r2
 80008ce:	2000      	moveq	r0, #0
 80008d0:	4770      	bxeq	lr
 80008d2:	f110 0f00 	cmn.w	r0, #0
 80008d6:	ea91 0f03 	teq	r1, r3
 80008da:	bf58      	it	pl
 80008dc:	4299      	cmppl	r1, r3
 80008de:	bf08      	it	eq
 80008e0:	4290      	cmpeq	r0, r2
 80008e2:	bf2c      	ite	cs
 80008e4:	17d8      	asrcs	r0, r3, #31
 80008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ea:	f040 0001 	orr.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d102      	bne.n	8000900 <__cmpdf2+0x64>
 80008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008fe:	d107      	bne.n	8000910 <__cmpdf2+0x74>
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d1d6      	bne.n	80008b8 <__cmpdf2+0x1c>
 800090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800090e:	d0d3      	beq.n	80008b8 <__cmpdf2+0x1c>
 8000910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_cdrcmple>:
 8000918:	4684      	mov	ip, r0
 800091a:	4610      	mov	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	468c      	mov	ip, r1
 8000920:	4619      	mov	r1, r3
 8000922:	4663      	mov	r3, ip
 8000924:	e000      	b.n	8000928 <__aeabi_cdcmpeq>
 8000926:	bf00      	nop

08000928 <__aeabi_cdcmpeq>:
 8000928:	b501      	push	{r0, lr}
 800092a:	f7ff ffb7 	bl	800089c <__cmpdf2>
 800092e:	2800      	cmp	r0, #0
 8000930:	bf48      	it	mi
 8000932:	f110 0f00 	cmnmi.w	r0, #0
 8000936:	bd01      	pop	{r0, pc}

08000938 <__aeabi_dcmpeq>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff fff4 	bl	8000928 <__aeabi_cdcmpeq>
 8000940:	bf0c      	ite	eq
 8000942:	2001      	moveq	r0, #1
 8000944:	2000      	movne	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmplt>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffea 	bl	8000928 <__aeabi_cdcmpeq>
 8000954:	bf34      	ite	cc
 8000956:	2001      	movcc	r0, #1
 8000958:	2000      	movcs	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmple>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffe0 	bl	8000928 <__aeabi_cdcmpeq>
 8000968:	bf94      	ite	ls
 800096a:	2001      	movls	r0, #1
 800096c:	2000      	movhi	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_dcmpge>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff ffce 	bl	8000918 <__aeabi_cdrcmple>
 800097c:	bf94      	ite	ls
 800097e:	2001      	movls	r0, #1
 8000980:	2000      	movhi	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_dcmpgt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffc4 	bl	8000918 <__aeabi_cdrcmple>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <read_encoder_value_1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t read_encoder_value_1(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  int32_t count_t = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  uint32_t enc_buff = TIM2->CNT;
 8000d86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8c:	603b      	str	r3, [r7, #0]
  TIM2->CNT = 0;
 8000d8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (enc_buff > 0x8fffffff)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f1b3 4f10 	cmp.w	r3, #2415919104	@ 0x90000000
 8000d9c:	d303      	bcc.n	8000da6 <read_encoder_value_1+0x2a>
  {
    count_t = (int32_t)enc_buff*-1;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	425b      	negs	r3, r3
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	e001      	b.n	8000daa <read_encoder_value_1+0x2e>
  }
  else
  {
    count_t = (int32_t)enc_buff;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	607b      	str	r3, [r7, #4]
  }
  return (int16_t)count_t;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	b21b      	sxth	r3, r3
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <read_encoder_value_2>:

int16_t read_encoder_value_2(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  int32_t count_t = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
  uint32_t enc_buff = TIM3->CNT;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <read_encoder_value_2+0x3c>)
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dca:	603b      	str	r3, [r7, #0]
  TIM3->CNT = 0;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <read_encoder_value_2+0x3c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (enc_buff > 0x8fffffff)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	f1b3 4f10 	cmp.w	r3, #2415919104	@ 0x90000000
 8000dd8:	d303      	bcc.n	8000de2 <read_encoder_value_2+0x26>
  {
    count_t = (int32_t)enc_buff*-1;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	425b      	negs	r3, r3
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	e001      	b.n	8000de6 <read_encoder_value_2+0x2a>
  }
  else
  {
    count_t = (int32_t)enc_buff;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	607b      	str	r3, [r7, #4]
  }
  return (int16_t)count_t;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	b21b      	sxth	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40000400 	.word	0x40000400

08000dfc <read_encoder_value_3>:

int16_t read_encoder_value_3(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  int32_t count_t = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  uint32_t enc_buff = TIM5->CNT;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <read_encoder_value_3+0x3c>)
 8000e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0a:	603b      	str	r3, [r7, #0]
  TIM5->CNT = 0;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <read_encoder_value_3+0x3c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (enc_buff > 0x8fffffff)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f1b3 4f10 	cmp.w	r3, #2415919104	@ 0x90000000
 8000e18:	d303      	bcc.n	8000e22 <read_encoder_value_3+0x26>
  {
    count_t = (int32_t)enc_buff*-1;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	e001      	b.n	8000e26 <read_encoder_value_3+0x2a>
  }
  else
  {
    count_t = (int32_t)enc_buff;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	607b      	str	r3, [r7, #4]
  }
  return (int16_t)count_t;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	b21b      	sxth	r3, r3
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40000c00 	.word	0x40000c00

08000e3c <vel_calc>:

void vel_calc(float theta, float w1, float w2, float w3, float *Vx, float *Vy, float *Omega){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0a0      	sub	sp, #128	@ 0x80
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	ed87 0a07 	vstr	s0, [r7, #28]
 8000e46:	edc7 0a06 	vstr	s1, [r7, #24]
 8000e4a:	ed87 1a05 	vstr	s2, [r7, #20]
 8000e4e:	edc7 1a04 	vstr	s3, [r7, #16]
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]

	float w[3] = {w1, w2, w3};
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	673b      	str	r3, [r7, #112]	@ 0x70

	float sint = sin(theta);
 8000e64:	69f8      	ldr	r0, [r7, #28]
 8000e66:	f7ff fcb9 	bl	80007dc <__aeabi_f2d>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	ec43 2b10 	vmov	d0, r2, r3
 8000e72:	f006 fe31 	bl	8007ad8 <sin>
 8000e76:	ec53 2b10 	vmov	r2, r3, d0
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f7ff fdb5 	bl	80009ec <__aeabi_d2f>
 8000e82:	4603      	mov	r3, r0
 8000e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
	float cost = cos(theta);
 8000e86:	69f8      	ldr	r0, [r7, #28]
 8000e88:	f7ff fca8 	bl	80007dc <__aeabi_f2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	ec43 2b10 	vmov	d0, r2, r3
 8000e94:	f006 fdcc 	bl	8007a30 <cos>
 8000e98:	ec53 2b10 	vmov	r2, r3, d0
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff fda4 	bl	80009ec <__aeabi_d2f>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	67bb      	str	r3, [r7, #120]	@ 0x78

	float a[3][3] = {
			{-sint, cost, R1},
 8000ea8:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8000eac:	eef1 7a67 	vneg.f32	s15, s15
	float a[3][3] = {
 8000eb0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8000eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000eb8:	4bc2      	ldr	r3, [pc, #776]	@ (80011c4 <vel_calc+0x388>)
 8000eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ebc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ebe:	653b      	str	r3, [r7, #80]	@ 0x50
			{sint, -cost, R1},
 8000ec0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8000ec4:	eef1 7a67 	vneg.f32	s15, s15
	float a[3][3] = {
 8000ec8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
 8000ecc:	4bbd      	ldr	r3, [pc, #756]	@ (80011c4 <vel_calc+0x388>)
 8000ece:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ed6:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ed8:	4bbb      	ldr	r3, [pc, #748]	@ (80011c8 <vel_calc+0x38c>)
 8000eda:	667b      	str	r3, [r7, #100]	@ 0x64
			{cost, sint, R2}
	};

	float det = a[0][0]*a[1][1]*a[2][2];
 8000edc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000ee0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef0:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	det += a[1][0]*a[2][1]*a[0][2];
 8000ef4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000ef8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f00:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f08:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f10:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	det += a[2][0]*a[0][1]*a[1][2];
 8000f14:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8000f18:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f20:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f28:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f30:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	det -= a[2][0]*a[1][1]*a[0][2];
 8000f34:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8000f38:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f40:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f50:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	det -= a[1][0]*a[0][1]*a[2][2];
 8000f54:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000f58:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f60:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f68:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f70:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	det -= a[0][0]*a[2][1]*a[1][2];
 8000f74:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000f78:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f80:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f88:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f90:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

	float a_in[3][3] = {
			{( a[1][1]*a[2][2]-a[1][2]*a[2][1])/det, (-a[0][1]*a[2][2]+a[0][2]*a[2][1])/det, ( a[0][1]*a[1][2]-a[0][2]*a[1][1])/det},
 8000f94:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000f98:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa0:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8000fa4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fac:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000fb0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float a_in[3][3] = {
 8000fb8:	edc7 7a08 	vstr	s15, [r7, #32]
			{( a[1][1]*a[2][2]-a[1][2]*a[2][1])/det, (-a[0][1]*a[2][2]+a[0][2]*a[2][1])/det, ( a[0][1]*a[1][2]-a[0][2]*a[1][1])/det},
 8000fbc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000fc0:	eeb1 7a67 	vneg.f32	s14, s15
 8000fc4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fcc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8000fd0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000fdc:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float a_in[3][3] = {
 8000fe4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			{( a[1][1]*a[2][2]-a[1][2]*a[2][1])/det, (-a[0][1]*a[2][2]+a[0][2]*a[2][1])/det, ( a[0][1]*a[1][2]-a[0][2]*a[1][1])/det},
 8000fe8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000fec:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000ff0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff4:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8000ff8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001000:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001004:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001008:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float a_in[3][3] = {
 800100c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			{(-a[1][0]*a[2][2]+a[1][2]*a[2][0])/det, ( a[0][0]*a[2][2]-a[0][2]*a[2][0])/det, (-a[0][0]*a[1][2]+a[0][2]*a[1][0])/det},
 8001010:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001014:	eeb1 7a67 	vneg.f32	s14, s15
 8001018:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800101c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001020:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001024:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001030:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001034:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float a_in[3][3] = {
 8001038:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			{(-a[1][0]*a[2][2]+a[1][2]*a[2][0])/det, ( a[0][0]*a[2][2]-a[0][2]*a[2][0])/det, (-a[0][0]*a[1][2]+a[0][2]*a[1][0])/det},
 800103c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001040:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001048:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800104c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001054:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001058:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800105c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float a_in[3][3] = {
 8001060:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			{(-a[1][0]*a[2][2]+a[1][2]*a[2][0])/det, ( a[0][0]*a[2][2]-a[0][2]*a[2][0])/det, (-a[0][0]*a[1][2]+a[0][2]*a[1][0])/det},
 8001064:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001068:	eeb1 7a67 	vneg.f32	s14, s15
 800106c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001074:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001078:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800107c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001080:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001084:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001088:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float a_in[3][3] = {
 800108c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
			{( a[1][0]*a[2][1]-a[1][1]*a[2][0])/det, (-a[0][0]*a[2][1]+a[0][1]*a[2][0])/det, ( a[0][0]*a[1][1]-a[0][1]*a[1][0])/det}
 8001090:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001094:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800109c:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80010a0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80010a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010ac:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80010b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float a_in[3][3] = {
 80010b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
			{( a[1][0]*a[2][1]-a[1][1]*a[2][0])/det, (-a[0][0]*a[2][1]+a[0][1]*a[2][0])/det, ( a[0][0]*a[1][1]-a[0][1]*a[1][0])/det}
 80010b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80010bc:	eeb1 7a67 	vneg.f32	s14, s15
 80010c0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80010cc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80010d8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80010dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float a_in[3][3] = {
 80010e0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
			{( a[1][0]*a[2][1]-a[1][1]*a[2][0])/det, (-a[0][0]*a[2][1]+a[0][1]*a[2][0])/det, ( a[0][0]*a[1][1]-a[0][1]*a[1][0])/det}
 80010e4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80010e8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80010ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f0:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80010f4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80010f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001100:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001104:	eec6 7a87 	vdiv.f32	s15, s13, s14
	float a_in[3][3] = {
 8001108:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	};

	*Vx =    r*(a_in[0][0]*w[0]+a_in[0][1]*w[1]+a_in[0][2]*w[2]);
 800110c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001110:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001118:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800111c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001128:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800112c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80011cc <vel_calc+0x390>
 800113c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	edc3 7a00 	vstr	s15, [r3]
	*Vy =    r*(a_in[1][0]*w[0]+a_in[1][1]*w[1]+a_in[1][2]*w[2]);
 8001146:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800114a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800114e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001152:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001156:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800115a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001162:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001166:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800116a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001172:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80011cc <vel_calc+0x390>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	edc3 7a00 	vstr	s15, [r3]
	*Omega = r*(a_in[2][0]*w[0]+a_in[2][1]*w[1]+a_in[2][2]*w[2]);
 8001180:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001184:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800118c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001190:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80011a0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80011a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ac:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011cc <vel_calc+0x390>
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edc3 7a00 	vstr	s15, [r3]
}
 80011ba:	bf00      	nop
 80011bc:	3780      	adds	r7, #128	@ 0x80
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	433b0000 	.word	0x433b0000
 80011c8:	42920000 	.word	0x42920000
 80011cc:	42700000 	.word	0x42700000

080011d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4aad      	ldr	r2, [pc, #692]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	f040 814e 	bne.w	800147e <HAL_TIM_PeriodElapsedCallback+0x2ae>
		float vx = 0, vy = 0;//mm/ms
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
		float omega = 0;//rad/ms
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
		encoder[0].count = read_encoder_value_1();
 80011f4:	f7ff fdc2 	bl	8000d7c <read_encoder_value_1>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4ba5      	ldr	r3, [pc, #660]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80011fe:	805a      	strh	r2, [r3, #2]
		encoder[1].count = read_encoder_value_2();
 8001200:	f7ff fddc 	bl	8000dbc <read_encoder_value_2>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4ba2      	ldr	r3, [pc, #648]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800120a:	81da      	strh	r2, [r3, #14]
		encoder[2].count = read_encoder_value_3();
 800120c:	f7ff fdf6 	bl	8000dfc <read_encoder_value_3>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b9f      	ldr	r3, [pc, #636]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001216:	835a      	strh	r2, [r3, #26]

		for (int i = 0; i < 3;i++) {
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
 800121c:	e029      	b.n	8001272 <HAL_TIM_PeriodElapsedCallback+0xa2>
			encoder[i].vel = 2*PI*(encoder[i].count/ppr);
 800121e:	499d      	ldr	r1, [pc, #628]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3302      	adds	r3, #2
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	b21b      	sxth	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001238:	fb92 f3f3 	sdiv	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fabb 	bl	80007b8 <__aeabi_i2d>
 8001242:	a391      	add	r3, pc, #580	@ (adr r3, 8001488 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	f7ff f83a 	bl	80002c0 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fbca 	bl	80009ec <__aeabi_d2f>
 8001258:	4601      	mov	r1, r0
 800125a:	488e      	ldr	r0, [pc, #568]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800125c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4403      	add	r3, r0
 8001268:	3308      	adds	r3, #8
 800126a:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < 3;i++) {
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	3301      	adds	r3, #1
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	2b02      	cmp	r3, #2
 8001276:	ddd2      	ble.n	800121e <HAL_TIM_PeriodElapsedCallback+0x4e>
		}

		vel_calc(theta, encoder[0].vel, encoder[1].vel, encoder[2].vel, &vx, &vy, &omega);
 8001278:	4b87      	ldr	r3, [pc, #540]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	4b85      	ldr	r3, [pc, #532]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001280:	ed93 7a02 	vldr	s14, [r3, #8]
 8001284:	4b83      	ldr	r3, [pc, #524]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001286:	edd3 6a05 	vldr	s13, [r3, #20]
 800128a:	4b82      	ldr	r3, [pc, #520]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800128c:	ed93 6a08 	vldr	s12, [r3, #32]
 8001290:	f107 0208 	add.w	r2, r7, #8
 8001294:	f107 010c 	add.w	r1, r7, #12
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4618      	mov	r0, r3
 800129e:	eef0 1a46 	vmov.f32	s3, s12
 80012a2:	eeb0 1a66 	vmov.f32	s2, s13
 80012a6:	eef0 0a47 	vmov.f32	s1, s14
 80012aa:	eeb0 0a67 	vmov.f32	s0, s15
 80012ae:	f7ff fdc5 	bl	8000e3c <vel_calc>

		x += vx * 10;
 80012b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012be:	4b77      	ldr	r3, [pc, #476]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	4b74      	ldr	r3, [pc, #464]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80012ca:	edc3 7a00 	vstr	s15, [r3]
		y += vy * 10;
 80012ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012da:	4b71      	ldr	r3, [pc, #452]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e4:	4b6e      	ldr	r3, [pc, #440]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80012e6:	edc3 7a00 	vstr	s15, [r3]
		theta += omega * 10;
 80012ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012f6:	4b68      	ldr	r3, [pc, #416]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	4b65      	ldr	r3, [pc, #404]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001302:	edc3 7a00 	vstr	s15, [r3]

		theta = fmodf(theta, 2*PI);
 8001306:	4b64      	ldr	r3, [pc, #400]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	eddf 0a65 	vldr	s1, [pc, #404]	@ 80014a4 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	f006 fc34 	bl	8007b80 <fmodf>
 8001318:	eef0 7a40 	vmov.f32	s15, s0
 800131c:	4b5e      	ldr	r3, [pc, #376]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800131e:	edc3 7a00 	vstr	s15, [r3]

		uint16_t theta_syi;
		uint8_t theta_se;
		if (theta > 0){
 8001322:	4b5d      	ldr	r3, [pc, #372]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	dd28      	ble.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x1b4>
			theta_se = (int16_t)theta;
 8001332:	4b59      	ldr	r3, [pc, #356]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133c:	ee17 3a90 	vmov	r3, s15
 8001340:	b21b      	sxth	r3, r3
 8001342:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			float theta_syf = theta - (int16_t)theta;
 8001346:	4b54      	ldr	r3, [pc, #336]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	4b52      	ldr	r3, [pc, #328]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001356:	ee17 3a90 	vmov	r3, s15
 800135a:	b21b      	sxth	r3, r3
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001368:	edc7 7a05 	vstr	s15, [r7, #20]
			theta_syi = (uint16_t)(theta_syf*10000);
 800136c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001370:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80014a8 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800137c:	ee17 3a90 	vmov	r3, s15
 8001380:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001382:	e02c      	b.n	80013de <HAL_TIM_PeriodElapsedCallback+0x20e>
		}
		else{
			theta_se = (int16_t)theta;
 8001384:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	b21b      	sxth	r3, r3
 8001394:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			float theta_k = -theta;
 8001398:	4b3f      	ldr	r3, [pc, #252]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eef1 7a67 	vneg.f32	s15, s15
 80013a2:	edc7 7a07 	vstr	s15, [r7, #28]
			float theta_syf = theta_k - (int16_t)theta_k;
 80013a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ae:	ee17 3a90 	vmov	r3, s15
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c4:	edc7 7a06 	vstr	s15, [r7, #24]
			theta_syi = (uint16_t)(theta_syf*10000);
 80013c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013cc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80014a8 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80013d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d8:	ee17 3a90 	vmov	r3, s15
 80013dc:	847b      	strh	r3, [r7, #34]	@ 0x22

		}


		TxData[0] = (int16_t)(x) >> 8;
 80013de:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e8:	ee17 3a90 	vmov	r3, s15
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	121b      	asrs	r3, r3, #8
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80013f6:	701a      	strb	r2, [r3, #0]
		TxData[1] = (uint8_t)((int16_t)(x) & 0xff);
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	ee17 3a90 	vmov	r3, s15
 8001406:	b21b      	sxth	r3, r3
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800140c:	705a      	strb	r2, [r3, #1]
		TxData[2] = (int16_t)(y) >> 8;
 800140e:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001418:	ee17 3a90 	vmov	r3, s15
 800141c:	b21b      	sxth	r3, r3
 800141e:	121b      	asrs	r3, r3, #8
 8001420:	b21b      	sxth	r3, r3
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001426:	709a      	strb	r2, [r3, #2]
		TxData[3] = (uint8_t)((int16_t)(y) & 0xff);
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001432:	ee17 3a90 	vmov	r3, s15
 8001436:	b21b      	sxth	r3, r3
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800143c:	70da      	strb	r2, [r3, #3]
		TxData[4] = (int16_t)(theta_syi) >> 8;
 800143e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001442:	121b      	asrs	r3, r3, #8
 8001444:	b21b      	sxth	r3, r3
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800144a:	711a      	strb	r2, [r3, #4]
		TxData[5] = (uint8_t)((int16_t)(theta_syi) & 0xff);
 800144c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001452:	715a      	strb	r2, [r3, #5]
		TxData[6] = theta_se;
 8001454:	4a15      	ldr	r2, [pc, #84]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001456:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800145a:	7193      	strb	r3, [r2, #6]
		TxHeader.Identifier = 0x400;
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800145e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001462:	601a      	str	r2, [r3, #0]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8001464:	4a11      	ldr	r2, [pc, #68]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001466:	4912      	ldr	r1, [pc, #72]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001468:	4812      	ldr	r0, [pc, #72]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800146a:	f001 fbba 	bl	8002be2 <HAL_FDCAN_AddMessageToTxFifoQ>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <HAL_TIM_PeriodElapsedCallback+0x2ae>
			printf("add_message is error\r\n");
 8001474:	4810      	ldr	r0, [pc, #64]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001476:	f005 fbb3 	bl	8006be0 <puts>
			Error_Handler();
 800147a:	f000 fbdb 	bl	8001c34 <Error_Handler>
		}
	}
}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	@ 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	c083126f 	.word	0xc083126f
 800148c:	401921ca 	.word	0x401921ca
 8001490:	20000244 	.word	0x20000244
 8001494:	20000000 	.word	0x20000000
 8001498:	20000358 	.word	0x20000358
 800149c:	20000350 	.word	0x20000350
 80014a0:	20000354 	.word	0x20000354
 80014a4:	40c90e56 	.word	0x40c90e56
 80014a8:	461c4000 	.word	0x461c4000
 80014ac:	20000348 	.word	0x20000348
 80014b0:	20000324 	.word	0x20000324
 80014b4:	200000a8 	.word	0x200000a8
 80014b8:	08008c98 	.word	0x08008c98

080014bc <FDCAN_RxTxSettings>:


void FDCAN_RxTxSettings(void){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef FDCAN_Filter_settings;
	FDCAN_Filter_settings.IdType = FDCAN_STANDARD_ID;
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
	FDCAN_Filter_settings.FilterIndex = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
	FDCAN_Filter_settings.FilterType = FDCAN_FILTER_RANGE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
	FDCAN_Filter_settings.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80014ce:	2302      	movs	r3, #2
 80014d0:	60fb      	str	r3, [r7, #12]
	FDCAN_Filter_settings.FilterID1 = 0x200;
 80014d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d6:	613b      	str	r3, [r7, #16]
	FDCAN_Filter_settings.FilterID2 = 0x310;
 80014d8:	f44f 7344 	mov.w	r3, #784	@ 0x310
 80014dc:	617b      	str	r3, [r7, #20]

	TxHeader.Identifier = 0x400;
 80014de:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <FDCAN_RxTxSettings+0xd0>)
 80014e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e4:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <FDCAN_RxTxSettings+0xd0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80014ec:	4b27      	ldr	r3, [pc, #156]	@ (800158c <FDCAN_RxTxSettings+0xd0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80014f2:	4b26      	ldr	r3, [pc, #152]	@ (800158c <FDCAN_RxTxSettings+0xd0>)
 80014f4:	2208      	movs	r2, #8
 80014f6:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80014f8:	4b24      	ldr	r3, [pc, #144]	@ (800158c <FDCAN_RxTxSettings+0xd0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80014fe:	4b23      	ldr	r3, [pc, #140]	@ (800158c <FDCAN_RxTxSettings+0xd0>)
 8001500:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001504:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <FDCAN_RxTxSettings+0xd0>)
 8001508:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800150c:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800150e:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <FDCAN_RxTxSettings+0xd0>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001514:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <FDCAN_RxTxSettings+0xd0>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]


	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &FDCAN_Filter_settings) != HAL_OK){
 800151a:	463b      	mov	r3, r7
 800151c:	4619      	mov	r1, r3
 800151e:	481c      	ldr	r0, [pc, #112]	@ (8001590 <FDCAN_RxTxSettings+0xd4>)
 8001520:	f001 faac 	bl	8002a7c <HAL_FDCAN_ConfigFilter>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <FDCAN_RxTxSettings+0x78>
		printf("fdcan_configfilter is error\r\n");
 800152a:	481a      	ldr	r0, [pc, #104]	@ (8001594 <FDCAN_RxTxSettings+0xd8>)
 800152c:	f005 fb58 	bl	8006be0 <puts>
		Error_Handler();
 8001530:	f000 fb80 	bl	8001c34 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_FILTER_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK){
 8001534:	2300      	movs	r3, #0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2300      	movs	r3, #0
 800153a:	2203      	movs	r2, #3
 800153c:	2102      	movs	r1, #2
 800153e:	4814      	ldr	r0, [pc, #80]	@ (8001590 <FDCAN_RxTxSettings+0xd4>)
 8001540:	f001 faf6 	bl	8002b30 <HAL_FDCAN_ConfigGlobalFilter>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <FDCAN_RxTxSettings+0x98>
		printf("fdcan_configglobalfilter is error\r\n");
 800154a:	4813      	ldr	r0, [pc, #76]	@ (8001598 <FDCAN_RxTxSettings+0xdc>)
 800154c:	f005 fb48 	bl	8006be0 <puts>
		Error_Handler();
 8001550:	f000 fb70 	bl	8001c34 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001554:	480e      	ldr	r0, [pc, #56]	@ (8001590 <FDCAN_RxTxSettings+0xd4>)
 8001556:	f001 fb1c 	bl	8002b92 <HAL_FDCAN_Start>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <FDCAN_RxTxSettings+0xae>
		printf("fdcan_start is error\r\n");
 8001560:	480e      	ldr	r0, [pc, #56]	@ (800159c <FDCAN_RxTxSettings+0xe0>)
 8001562:	f005 fb3d 	bl	8006be0 <puts>
		Error_Handler();
 8001566:	f000 fb65 	bl	8001c34 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK){
 800156a:	2200      	movs	r2, #0
 800156c:	2108      	movs	r1, #8
 800156e:	4808      	ldr	r0, [pc, #32]	@ (8001590 <FDCAN_RxTxSettings+0xd4>)
 8001570:	f001 fb7b 	bl	8002c6a <HAL_FDCAN_ActivateNotification>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <FDCAN_RxTxSettings+0xc8>
		printf("fdcan_activatenotification is error\r\n");
 800157a:	4809      	ldr	r0, [pc, #36]	@ (80015a0 <FDCAN_RxTxSettings+0xe4>)
 800157c:	f005 fb30 	bl	8006be0 <puts>
		Error_Handler();
 8001580:	f000 fb58 	bl	8001c34 <Error_Handler>
	}
}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000324 	.word	0x20000324
 8001590:	200000a8 	.word	0x200000a8
 8001594:	08008cb0 	.word	0x08008cb0
 8001598:	08008cd0 	.word	0x08008cd0
 800159c:	08008cf4 	.word	0x08008cf4
 80015a0:	08008d0c 	.word	0x08008d0c

080015a4 <_write>:


int _write(int file, char *ptr, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	230a      	movs	r3, #10
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <_write+0x24>)
 80015ba:	f003 ff96 	bl	80054ea <HAL_UART_Transmit>
    return len;
 80015be:	687b      	ldr	r3, [r7, #4]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000290 	.word	0x20000290

080015cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80015d0:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <main+0x80>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 fb09 	bl	8006bf0 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015de:	f000 fe90 	bl	8002302 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e2:	f000 f845 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e6:	f000 fabb 	bl	8001b60 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015ea:	f000 f915 	bl	8001818 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015ee:	f000 f987 	bl	8001900 <MX_TIM3_Init>
  MX_TIM5_Init();
 80015f2:	f000 f9db 	bl	80019ac <MX_TIM5_Init>
  MX_I2C1_Init();
 80015f6:	f000 f8cf 	bl	8001798 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015fa:	f000 fa63 	bl	8001ac4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80015fe:	f000 fa2b 	bl	8001a58 <MX_TIM6_Init>
  MX_FDCAN1_Init();
 8001602:	f000 f881 	bl	8001708 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  printf("start\r\n");
 8001606:	4812      	ldr	r0, [pc, #72]	@ (8001650 <main+0x84>)
 8001608:	f005 faea 	bl	8006be0 <puts>
  printf("can tx start\r\n");
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <main+0x88>)
 800160e:	f005 fae7 	bl	8006be0 <puts>
  FDCAN_RxTxSettings();
 8001612:	f7ff ff53 	bl	80014bc <FDCAN_RxTxSettings>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001616:	213c      	movs	r1, #60	@ 0x3c
 8001618:	480f      	ldr	r0, [pc, #60]	@ (8001658 <main+0x8c>)
 800161a:	f003 faff 	bl	8004c1c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800161e:	213c      	movs	r1, #60	@ 0x3c
 8001620:	480e      	ldr	r0, [pc, #56]	@ (800165c <main+0x90>)
 8001622:	f003 fafb 	bl	8004c1c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001626:	213c      	movs	r1, #60	@ 0x3c
 8001628:	480d      	ldr	r0, [pc, #52]	@ (8001660 <main+0x94>)
 800162a:	f003 faf7 	bl	8004c1c <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim6);
 800162e:	480d      	ldr	r0, [pc, #52]	@ (8001664 <main+0x98>)
 8001630:	f003 f9d6 	bl	80049e0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  //int16_t count = read_encoder_value_1();
	  //printf("%d\r\n", count);
	  printf("%d\r\n", encoder[0].count);
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <main+0x9c>)
 8001636:	885b      	ldrh	r3, [r3, #2]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4619      	mov	r1, r3
 800163c:	480b      	ldr	r0, [pc, #44]	@ (800166c <main+0xa0>)
 800163e:	f005 fa67 	bl	8006b10 <iprintf>
	  //printf("(%d, %d, %d)\r\n", (int16_t)x, (int16_t)y, (int16_t)theta);
	  HAL_Delay(1);
 8001642:	2001      	movs	r0, #1
 8001644:	f000 fece 	bl	80023e4 <HAL_Delay>
	  printf("%d\r\n", encoder[0].count);
 8001648:	bf00      	nop
 800164a:	e7f3      	b.n	8001634 <main+0x68>
 800164c:	2000003c 	.word	0x2000003c
 8001650:	08008d34 	.word	0x08008d34
 8001654:	08008d3c 	.word	0x08008d3c
 8001658:	20000160 	.word	0x20000160
 800165c:	200001ac 	.word	0x200001ac
 8001660:	200001f8 	.word	0x200001f8
 8001664:	20000244 	.word	0x20000244
 8001668:	20000000 	.word	0x20000000
 800166c:	08008d4c 	.word	0x08008d4c

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b094      	sub	sp, #80	@ 0x50
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0318 	add.w	r3, r7, #24
 800167a:	2238      	movs	r2, #56	@ 0x38
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f005 fc4a 	bl	8006f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001692:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001696:	f002 f91b 	bl	80038d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a4:	2340      	movs	r3, #64	@ 0x40
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a8:	2302      	movs	r3, #2
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ac:	2302      	movs	r3, #2
 80016ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016b4:	230a      	movs	r3, #10
 80016b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016bc:	2302      	movs	r3, #2
 80016be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 f9b5 	bl	8003a38 <HAL_RCC_OscConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80016d4:	f000 faae 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d8:	230f      	movs	r3, #15
 80016da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016dc:	2303      	movs	r3, #3
 80016de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2102      	movs	r1, #2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fcb3 	bl	800405c <HAL_RCC_ClockConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80016fc:	f000 fa9a 	bl	8001c34 <Error_Handler>
  }
}
 8001700:	bf00      	nop
 8001702:	3750      	adds	r7, #80	@ 0x50
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800170c:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 800170e:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <MX_FDCAN1_Init+0x8c>)
 8001710:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001712:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 800171a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800171e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001728:	2200      	movs	r2, #0
 800172a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 800172e:	2200      	movs	r2, #0
 8001730:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001732:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001734:	2200      	movs	r2, #0
 8001736:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 800173a:	2204      	movs	r2, #4
 800173c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001740:	2201      	movs	r2, #1
 8001742:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001746:	220f      	movs	r2, #15
 8001748:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2*2;
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 800174c:	2204      	movs	r2, #4
 800174e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001752:	2202      	movs	r2, #2
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001758:	2201      	movs	r2, #1
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 800175e:	220f      	movs	r2, #15
 8001760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001764:	2204      	movs	r2, #4
 8001766:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 800176a:	2201      	movs	r2, #1
 800176c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001770:	2200      	movs	r2, #0
 8001772:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 8001776:	2200      	movs	r2, #0
 8001778:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_FDCAN1_Init+0x88>)
 800177c:	f001 f824 	bl	80027c8 <HAL_FDCAN_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001786:	f000 fa55 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000a8 	.word	0x200000a8
 8001794:	40006400 	.word	0x40006400

08001798 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <MX_I2C1_Init+0x74>)
 800179e:	4a1c      	ldr	r2, [pc, #112]	@ (8001810 <MX_I2C1_Init+0x78>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <MX_I2C1_Init+0x74>)
 80017a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001814 <MX_I2C1_Init+0x7c>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017a8:	4b18      	ldr	r3, [pc, #96]	@ (800180c <MX_I2C1_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ae:	4b17      	ldr	r3, [pc, #92]	@ (800180c <MX_I2C1_Init+0x74>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <MX_I2C1_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <MX_I2C1_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <MX_I2C1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <MX_I2C1_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <MX_I2C1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d2:	480e      	ldr	r0, [pc, #56]	@ (800180c <MX_I2C1_Init+0x74>)
 80017d4:	f001 ff4a 	bl	800366c <HAL_I2C_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017de:	f000 fa29 	bl	8001c34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4809      	ldr	r0, [pc, #36]	@ (800180c <MX_I2C1_Init+0x74>)
 80017e6:	f001 ffdc 	bl	80037a2 <HAL_I2CEx_ConfigAnalogFilter>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017f0:	f000 fa20 	bl	8001c34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_I2C1_Init+0x74>)
 80017f8:	f002 f81e 	bl	8003838 <HAL_I2CEx_ConfigDigitalFilter>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001802:	f000 fa17 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000010c 	.word	0x2000010c
 8001810:	40005400 	.word	0x40005400
 8001814:	10909cec 	.word	0x10909cec

08001818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b092      	sub	sp, #72	@ 0x48
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800181e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001822:	2224      	movs	r2, #36	@ 0x24
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f005 fb76 	bl	8006f18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001848:	4b2c      	ldr	r3, [pc, #176]	@ (80018fc <MX_TIM2_Init+0xe4>)
 800184a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800184e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001850:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <MX_TIM2_Init+0xe4>)
 8001852:	2200      	movs	r2, #0
 8001854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <MX_TIM2_Init+0xe4>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800185c:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <MX_TIM2_Init+0xe4>)
 800185e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <MX_TIM2_Init+0xe4>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <MX_TIM2_Init+0xe4>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001870:	2301      	movs	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001878:	2301      	movs	r3, #1
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001884:	2300      	movs	r3, #0
 8001886:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001888:	2301      	movs	r3, #1
 800188a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	4818      	ldr	r0, [pc, #96]	@ (80018fc <MX_TIM2_Init+0xe4>)
 800189c:	f003 f918 	bl	8004ad0 <HAL_TIM_Encoder_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80018a6:	f000 f9c5 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4810      	ldr	r0, [pc, #64]	@ (80018fc <MX_TIM2_Init+0xe4>)
 80018ba:	f003 fcaf 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80018c4:	f000 f9b6 	bl	8001c34 <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 80018c8:	2300      	movs	r3, #0
 80018ca:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim2, &sEncoderIndexConfig) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	@ (80018fc <MX_TIM2_Init+0xe4>)
 80018e6:	f003 fd2f 	bl	8005348 <HAL_TIMEx_ConfigEncoderIndex>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80018f0:	f000 f9a0 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3748      	adds	r7, #72	@ 0x48
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000160 	.word	0x20000160

08001900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	@ 0x30
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2224      	movs	r2, #36	@ 0x24
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f005 fb02 	bl	8006f18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <MX_TIM3_Init+0xa4>)
 8001920:	4a21      	ldr	r2, [pc, #132]	@ (80019a8 <MX_TIM3_Init+0xa8>)
 8001922:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <MX_TIM3_Init+0xa4>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <MX_TIM3_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <MX_TIM3_Init+0xa4>)
 8001932:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001936:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <MX_TIM3_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <MX_TIM3_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001944:	2301      	movs	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	@ (80019a4 <MX_TIM3_Init+0xa4>)
 8001970:	f003 f8ae 	bl	8004ad0 <HAL_TIM_Encoder_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800197a:	f000 f95b 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	@ (80019a4 <MX_TIM3_Init+0xa4>)
 800198c:	f003 fc46 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001996:	f000 f94d 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	@ 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200001ac 	.word	0x200001ac
 80019a8:	40000400 	.word	0x40000400

080019ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	@ 0x30
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2224      	movs	r2, #36	@ 0x24
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 faac 	bl	8006f18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	463b      	mov	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <MX_TIM5_Init+0xa4>)
 80019cc:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <MX_TIM5_Init+0xa8>)
 80019ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <MX_TIM5_Init+0xa4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <MX_TIM5_Init+0xa4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80019dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <MX_TIM5_Init+0xa4>)
 80019de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <MX_TIM5_Init+0xa4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <MX_TIM5_Init+0xa4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019f8:	2301      	movs	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480d      	ldr	r0, [pc, #52]	@ (8001a50 <MX_TIM5_Init+0xa4>)
 8001a1c:	f003 f858 	bl	8004ad0 <HAL_TIM_Encoder_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001a26:	f000 f905 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a32:	463b      	mov	r3, r7
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	@ (8001a50 <MX_TIM5_Init+0xa4>)
 8001a38:	f003 fbf0 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001a42:	f000 f8f7 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	3730      	adds	r7, #48	@ 0x30
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200001f8 	.word	0x200001f8
 8001a54:	40000c00 	.word	0x40000c00

08001a58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_TIM6_Init+0x64>)
 8001a6a:	4a15      	ldr	r2, [pc, #84]	@ (8001ac0 <MX_TIM6_Init+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_TIM6_Init+0x64>)
 8001a70:	2209      	movs	r2, #9
 8001a72:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_TIM6_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <MX_TIM6_Init+0x64>)
 8001a7c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001a80:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_TIM6_Init+0x64>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a88:	480c      	ldr	r0, [pc, #48]	@ (8001abc <MX_TIM6_Init+0x64>)
 8001a8a:	f002 ff51 	bl	8004930 <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a94:	f000 f8ce 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_TIM6_Init+0x64>)
 8001aa6:	f003 fbb9 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ab0:	f000 f8c0 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000244 	.word	0x20000244
 8001ac0:	40001000 	.word	0x40001000

08001ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001aca:	4a23      	ldr	r2, [pc, #140]	@ (8001b58 <MX_USART2_UART_Init+0x94>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001ace:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001ad0:	4a22      	ldr	r2, [pc, #136]	@ (8001b5c <MX_USART2_UART_Init+0x98>)
 8001ad2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001ae8:	220c      	movs	r2, #12
 8001aea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b0a:	4812      	ldr	r0, [pc, #72]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001b0c:	f003 fc9d 	bl	800544a <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001b16:	f000 f88d 	bl	8001c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001b1e:	f004 fe6a 	bl	80067f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001b28:	f000 f884 	bl	8001c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4809      	ldr	r0, [pc, #36]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001b30:	f004 fe9f 	bl	8006872 <HAL_UARTEx_SetRxFifoThreshold>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001b3a:	f000 f87b 	bl	8001c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <MX_USART2_UART_Init+0x90>)
 8001b40:	f004 fe20 	bl	8006784 <HAL_UARTEx_DisableFifoMode>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001b4a:	f000 f873 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000290 	.word	0x20000290
 8001b58:	40004400 	.word	0x40004400
 8001b5c:	000f4240 	.word	0x000f4240

08001b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <MX_GPIO_Init+0xc8>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001c28 <MX_GPIO_Init+0xc8>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b82:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <MX_GPIO_Init+0xc8>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <MX_GPIO_Init+0xc8>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	4a25      	ldr	r2, [pc, #148]	@ (8001c28 <MX_GPIO_Init+0xc8>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9a:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <MX_GPIO_Init+0xc8>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <MX_GPIO_Init+0xc8>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	4a1f      	ldr	r2, [pc, #124]	@ (8001c28 <MX_GPIO_Init+0xc8>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <MX_GPIO_Init+0xc8>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(eno_rst_GPIO_Port, eno_rst_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bc4:	4819      	ldr	r0, [pc, #100]	@ (8001c2c <MX_GPIO_Init+0xcc>)
 8001bc6:	f001 fd39 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : eno_rst_Pin */
  GPIO_InitStruct.Pin = eno_rst_Pin;
 8001bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(eno_rst_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	4619      	mov	r1, r3
 8001be2:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <MX_GPIO_Init+0xcc>)
 8001be4:	f001 fba8 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : lmt_sw5_Pin lmt_sw6_Pin lmt_sw7_Pin lmt_sw8_Pin */
  GPIO_InitStruct.Pin = lmt_sw5_Pin|lmt_sw6_Pin|lmt_sw7_Pin|lmt_sw8_Pin;
 8001be8:	233c      	movs	r3, #60	@ 0x3c
 8001bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480b      	ldr	r0, [pc, #44]	@ (8001c2c <MX_GPIO_Init+0xcc>)
 8001bfe:	f001 fb9b 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : lmt_sw1_Pin lmt_sw2_Pin lmt_sw3_Pin lmt_sw4_Pin */
  GPIO_InitStruct.Pin = lmt_sw1_Pin|lmt_sw2_Pin|lmt_sw3_Pin|lmt_sw4_Pin;
 8001c02:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 8001c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <MX_GPIO_Init+0xd0>)
 8001c1a:	f001 fb8d 	bl	8003338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c1e:	bf00      	nop
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	48000400 	.word	0x48000400

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error\r\n");
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <Error_Handler+0x14>)
 8001c3e:	f004 ffcf 	bl	8006be0 <puts>
  while (1)
 8001c42:	bf00      	nop
 8001c44:	e7fd      	b.n	8001c42 <Error_Handler+0xe>
 8001c46:	bf00      	nop
 8001c48:	08008d54 	.word	0x08008d54

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c56:	4a0e      	ldr	r2, [pc, #56]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c82:	f001 fec9 	bl	8003a18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b09e      	sub	sp, #120	@ 0x78
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	2254      	movs	r2, #84	@ 0x54
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f005 f92f 	bl	8006f18 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a28      	ldr	r2, [pc, #160]	@ (8001d60 <HAL_FDCAN_MspInit+0xcc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d149      	bne.n	8001d58 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001cca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cce:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fbdd 	bl	8004494 <HAL_RCCEx_PeriphCLKConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001ce0:	f7ff ffa8 	bl	8001c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_FDCAN_MspInit+0xd0>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d64 <HAL_FDCAN_MspInit+0xd0>)
 8001cea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_FDCAN_MspInit+0xd0>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_FDCAN_MspInit+0xd0>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d00:	4a18      	ldr	r2, [pc, #96]	@ (8001d64 <HAL_FDCAN_MspInit+0xd0>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_FDCAN_MspInit+0xd0>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d14:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d18:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d26:	2309      	movs	r3, #9
 8001d28:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d34:	f001 fb00 	bl	8003338 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2015      	movs	r0, #21
 8001d3e:	f000 fc4e 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001d42:	2015      	movs	r0, #21
 8001d44:	f000 fc65 	bl	8002612 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2016      	movs	r0, #22
 8001d4e:	f000 fc46 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001d52:	2016      	movs	r0, #22
 8001d54:	f000 fc5d 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3778      	adds	r7, #120	@ 0x78
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40006400 	.word	0x40006400
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09e      	sub	sp, #120	@ 0x78
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	2254      	movs	r2, #84	@ 0x54
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 f8c5 	bl	8006f18 <memset>
  if(hi2c->Instance==I2C1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1f      	ldr	r2, [pc, #124]	@ (8001e10 <HAL_I2C_MspInit+0xa8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d136      	bne.n	8001e06 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d98:	2340      	movs	r3, #64	@ 0x40
 8001d9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 fb75 	bl	8004494 <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001db0:	f7ff ff40 	bl	8001c34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_I2C_MspInit+0xac>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db8:	4a16      	ldr	r2, [pc, #88]	@ (8001e14 <HAL_I2C_MspInit+0xac>)
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_I2C_MspInit+0xac>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001dcc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001dd0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd2:	2312      	movs	r3, #18
 8001dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dde:	2304      	movs	r3, #4
 8001de0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001de6:	4619      	mov	r1, r3
 8001de8:	480b      	ldr	r0, [pc, #44]	@ (8001e18 <HAL_I2C_MspInit+0xb0>)
 8001dea:	f001 faa5 	bl	8003338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dee:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_I2C_MspInit+0xac>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df2:	4a08      	ldr	r2, [pc, #32]	@ (8001e14 <HAL_I2C_MspInit+0xac>)
 8001df4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_I2C_MspInit+0xac>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3778      	adds	r7, #120	@ 0x78
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000400 	.word	0x48000400

08001e1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08e      	sub	sp, #56	@ 0x38
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3c:	d13a      	bne.n	8001eb4 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	4a5a      	ldr	r2, [pc, #360]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e4a:	4b58      	ldr	r3, [pc, #352]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b55      	ldr	r3, [pc, #340]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	4a54      	ldr	r2, [pc, #336]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e62:	4b52      	ldr	r3, [pc, #328]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e8c:	f001 fa54 	bl	8003338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e90:	2320      	movs	r3, #32
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eae:	f001 fa43 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001eb2:	e077      	b.n	8001fa4 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a3d      	ldr	r2, [pc, #244]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x194>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d128      	bne.n	8001f10 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	4a3a      	ldr	r2, [pc, #232]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eca:	4b38      	ldr	r3, [pc, #224]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	4b35      	ldr	r3, [pc, #212]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eda:	4a34      	ldr	r2, [pc, #208]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee2:	4b32      	ldr	r3, [pc, #200]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8001eee:	2330      	movs	r3, #48	@ 0x30
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efe:	2302      	movs	r3, #2
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	482a      	ldr	r0, [pc, #168]	@ (8001fb4 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f0a:	f001 fa15 	bl	8003338 <HAL_GPIO_Init>
}
 8001f0e:	e049      	b.n	8001fa4 <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a28      	ldr	r2, [pc, #160]	@ (8001fb8 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d144      	bne.n	8001fa4 <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f1a:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	4a23      	ldr	r2, [pc, #140]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001f20:	f043 0308 	orr.w	r3, r3, #8
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f26:	4b21      	ldr	r3, [pc, #132]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	4a1d      	ldr	r2, [pc, #116]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	4a17      	ldr	r2, [pc, #92]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f56:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x190>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3_A_Pin;
 8001f62:	2304      	movs	r3, #4
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f72:	2302      	movs	r3, #2
 8001f74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480d      	ldr	r0, [pc, #52]	@ (8001fb4 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f7e:	f001 f9db 	bl	8003338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC3_B_Pin;
 8001f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8001f94:	2301      	movs	r3, #1
 8001f96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ENC3_B_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001fa0:	f001 f9ca 	bl	8003338 <HAL_GPIO_Init>
}
 8001fa4:	bf00      	nop
 8001fa6:	3738      	adds	r7, #56	@ 0x38
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	48000400 	.word	0x48000400
 8001fb8:	40000c00 	.word	0x40000c00
 8001fbc:	48000800 	.word	0x48000800

08001fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <HAL_TIM_Base_MspInit+0x44>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d113      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <HAL_TIM_Base_MspInit+0x48>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <HAL_TIM_Base_MspInit+0x48>)
 8001fd8:	f043 0310 	orr.w	r3, r3, #16
 8001fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_TIM_Base_MspInit+0x48>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	2036      	movs	r0, #54	@ 0x36
 8001ff0:	f000 faf5 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ff4:	2036      	movs	r0, #54	@ 0x36
 8001ff6:	f000 fb0c 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40001000 	.word	0x40001000
 8002008:	40021000 	.word	0x40021000

0800200c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b09e      	sub	sp, #120	@ 0x78
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	2254      	movs	r2, #84	@ 0x54
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f004 ff73 	bl	8006f18 <memset>
  if(huart->Instance==USART2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a23      	ldr	r2, [pc, #140]	@ (80020c4 <HAL_UART_MspInit+0xb8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d13e      	bne.n	80020ba <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fa23 	bl	8004494 <HAL_RCCEx_PeriphCLKConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002054:	f7ff fdee 	bl	8001c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_UART_MspInit+0xbc>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	4a1a      	ldr	r2, [pc, #104]	@ (80020c8 <HAL_UART_MspInit+0xbc>)
 800205e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002062:	6593      	str	r3, [r2, #88]	@ 0x58
 8002064:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <HAL_UART_MspInit+0xbc>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_UART_MspInit+0xbc>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <HAL_UART_MspInit+0xbc>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_UART_MspInit+0xbc>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002088:	230c      	movs	r3, #12
 800208a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002098:	2307      	movs	r3, #7
 800209a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a6:	f001 f947 	bl	8003338 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2026      	movs	r0, #38	@ 0x26
 80020b0:	f000 fa95 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020b4:	2026      	movs	r0, #38	@ 0x26
 80020b6:	f000 faac 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3778      	adds	r7, #120	@ 0x78
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40004400 	.word	0x40004400
 80020c8:	40021000 	.word	0x40021000

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <NMI_Handler+0x4>

080020d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <HardFault_Handler+0x4>

080020dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <MemManage_Handler+0x4>

080020e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002122:	f000 f941 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <FDCAN1_IT0_IRQHandler+0x10>)
 8002132:	f000 fe80 	bl	8002e36 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200000a8 	.word	0x200000a8

08002140 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <FDCAN1_IT1_IRQHandler+0x10>)
 8002146:	f000 fe76 	bl	8002e36 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200000a8 	.word	0x200000a8

08002154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <USART2_IRQHandler+0x10>)
 800215a:	f003 fa55 	bl	8005608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000290 	.word	0x20000290

08002168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <TIM6_DAC_IRQHandler+0x10>)
 800216e:	f002 fde3 	bl	8004d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000244 	.word	0x20000244

0800217c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e00a      	b.n	80021a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800218e:	f3af 8000 	nop.w
 8002192:	4601      	mov	r1, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	60ba      	str	r2, [r7, #8]
 800219a:	b2ca      	uxtb	r2, r1
 800219c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf0      	blt.n	800218e <_read+0x12>
  }

  return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021de:	605a      	str	r2, [r3, #4]
  return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_isatty>:

int _isatty(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	@ (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f004 feb0 	bl	8006fb4 <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20020000 	.word	0x20020000
 8002280:	00000400 	.word	0x00000400
 8002284:	2000035c 	.word	0x2000035c
 8002288:	200004b0 	.word	0x200004b0

0800228c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <SystemInit+0x20>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002296:	4a05      	ldr	r2, [pc, #20]	@ (80022ac <SystemInit+0x20>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022b0:	480d      	ldr	r0, [pc, #52]	@ (80022e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022b4:	f7ff ffea 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b8:	480c      	ldr	r0, [pc, #48]	@ (80022ec <LoopForever+0x6>)
  ldr r1, =_edata
 80022ba:	490d      	ldr	r1, [pc, #52]	@ (80022f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022bc:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <LoopForever+0xe>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022c0:	e002      	b.n	80022c8 <LoopCopyDataInit>

080022c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c6:	3304      	adds	r3, #4

080022c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022cc:	d3f9      	bcc.n	80022c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d0:	4c0a      	ldr	r4, [pc, #40]	@ (80022fc <LoopForever+0x16>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d4:	e001      	b.n	80022da <LoopFillZerobss>

080022d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d8:	3204      	adds	r2, #4

080022da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022dc:	d3fb      	bcc.n	80022d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022de:	f004 fe6f 	bl	8006fc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022e2:	f7ff f973 	bl	80015cc <main>

080022e6 <LoopForever>:

LoopForever:
    b LoopForever
 80022e6:	e7fe      	b.n	80022e6 <LoopForever>
  ldr   r0, =_estack
 80022e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80022f4:	08008fd0 	.word	0x08008fd0
  ldr r2, =_sbss
 80022f8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80022fc:	200004b0 	.word	0x200004b0

08002300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC1_2_IRQHandler>

08002302 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 f95b 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002312:	200f      	movs	r0, #15
 8002314:	f000 f80e 	bl	8002334 <HAL_InitTick>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	e001      	b.n	8002328 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002324:	f7ff fc92 	bl	8001c4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002328:	79fb      	ldrb	r3, [r7, #7]

}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002340:	4b16      	ldr	r3, [pc, #88]	@ (800239c <HAL_InitTick+0x68>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d022      	beq.n	800238e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002348:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <HAL_InitTick+0x6c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <HAL_InitTick+0x68>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002354:	fbb1 f3f3 	udiv	r3, r1, r3
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	4618      	mov	r0, r3
 800235e:	f000 f966 	bl	800262e <HAL_SYSTICK_Config>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10f      	bne.n	8002388 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	d809      	bhi.n	8002382 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236e:	2200      	movs	r2, #0
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	f04f 30ff 	mov.w	r0, #4294967295
 8002376:	f000 f932 	bl	80025de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800237a:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <HAL_InitTick+0x70>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e007      	b.n	8002392 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e004      	b.n	8002392 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e001      	b.n	8002392 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	2000002c 	.word	0x2000002c
 80023a0:	20000024 	.word	0x20000024
 80023a4:	20000028 	.word	0x20000028

080023a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_IncTick+0x1c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_IncTick+0x20>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a03      	ldr	r2, [pc, #12]	@ (80023c4 <HAL_IncTick+0x1c>)
 80023b8:	6013      	str	r3, [r2, #0]
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	20000360 	.word	0x20000360
 80023c8:	2000002c 	.word	0x2000002c

080023cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return uwTick;
 80023d0:	4b03      	ldr	r3, [pc, #12]	@ (80023e0 <HAL_GetTick+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000360 	.word	0x20000360

080023e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff ffee 	bl	80023cc <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d004      	beq.n	8002408 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <HAL_Delay+0x40>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4413      	add	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002408:	bf00      	nop
 800240a:	f7ff ffdf 	bl	80023cc <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	429a      	cmp	r2, r3
 8002418:	d8f7      	bhi.n	800240a <HAL_Delay+0x26>
  {
  }
}
 800241a:	bf00      	nop
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	2000002c 	.word	0x2000002c

08002428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	@ (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	@ (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	@ (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	@ (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	@ 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f7ff ff8e 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff29 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025ec:	f7ff ff40 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7ff ff90 	bl	800251c <NVIC_EncodePriority>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff5f 	bl	80024c8 <__NVIC_SetPriority>
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff33 	bl	800248c <__NVIC_EnableIRQ>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ffa4 	bl	8002584 <SysTick_Config>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d005      	beq.n	800266a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2204      	movs	r2, #4
 8002662:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e037      	b.n	80026da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 020e 	bic.w	r2, r2, #14
 8002678:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002684:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002688:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	f003 021f 	and.w	r2, r3, #31
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00c      	beq.n	80026da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d00d      	beq.n	800272c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2204      	movs	r2, #4
 8002714:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e047      	b.n	80027bc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 020e 	bic.w	r2, r2, #14
 800273a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002756:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800275a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f202 	lsl.w	r2, r1, r2
 800276e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002778:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00c      	beq.n	800279c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002790:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800279a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
    }
  }
  return status;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e147      	b.n	8002a6a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fa50 	bl	8001c94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0210 	bic.w	r2, r2, #16
 8002802:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002804:	f7ff fde2 	bl	80023cc <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800280a:	e012      	b.n	8002832 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800280c:	f7ff fdde 	bl	80023cc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b0a      	cmp	r3, #10
 8002818:	d90b      	bls.n	8002832 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2203      	movs	r2, #3
 800282a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e11b      	b.n	8002a6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b08      	cmp	r3, #8
 800283e:	d0e5      	beq.n	800280c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002850:	f7ff fdbc 	bl	80023cc <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002856:	e012      	b.n	800287e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002858:	f7ff fdb8 	bl	80023cc <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b0a      	cmp	r3, #10
 8002864:	d90b      	bls.n	800287e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2203      	movs	r2, #3
 8002876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0f5      	b.n	8002a6a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0e5      	beq.n	8002858 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0202 	orr.w	r2, r2, #2
 800289a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a74      	ldr	r2, [pc, #464]	@ (8002a74 <HAL_FDCAN_Init+0x2ac>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d103      	bne.n	80028ae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80028a6:	4a74      	ldr	r2, [pc, #464]	@ (8002a78 <HAL_FDCAN_Init+0x2b0>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7c1b      	ldrb	r3, [r3, #16]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d108      	bne.n	80028c8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c4:	619a      	str	r2, [r3, #24]
 80028c6:	e007      	b.n	80028d8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7c5b      	ldrb	r3, [r3, #17]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d108      	bne.n	80028f2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028ee:	619a      	str	r2, [r3, #24]
 80028f0:	e007      	b.n	8002902 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002900:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7c9b      	ldrb	r3, [r3, #18]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002918:	619a      	str	r2, [r3, #24]
 800291a:	e007      	b.n	800292c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800292a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002950:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0210 	bic.w	r2, r2, #16
 8002960:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d108      	bne.n	800297c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0204 	orr.w	r2, r2, #4
 8002978:	619a      	str	r2, [r3, #24]
 800297a:	e02c      	b.n	80029d6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d028      	beq.n	80029d6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d01c      	beq.n	80029c6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800299a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0210 	orr.w	r2, r2, #16
 80029aa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d110      	bne.n	80029d6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0220 	orr.w	r2, r2, #32
 80029c2:	619a      	str	r2, [r3, #24]
 80029c4:	e007      	b.n	80029d6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0220 	orr.w	r2, r2, #32
 80029d4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	3b01      	subs	r3, #1
 80029dc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029e6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80029ee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80029fe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002a00:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a0a:	d115      	bne.n	8002a38 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	3b01      	subs	r3, #1
 8002a18:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a1a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a20:	3b01      	subs	r3, #1
 8002a22:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002a24:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002a34:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002a36:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fb8a 	bl	8003168 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40006400 	.word	0x40006400
 8002a78:	40006500 	.word	0x40006500

08002a7c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a8c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d002      	beq.n	8002a9a <HAL_FDCAN_ConfigFilter+0x1e>
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d13d      	bne.n	8002b16 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d119      	bne.n	8002ad6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002aae:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002ab6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e01d      	b.n	8002b12 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	075a      	lsls	r2, r3, #29
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	079a      	lsls	r2, r3, #30
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e006      	b.n	8002b24 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1a:	f043 0202 	orr.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
  }
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d116      	bne.n	8002b78 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b52:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	011a      	lsls	r2, r3, #4
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	431a      	orrs	r2, r3
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e006      	b.n	8002b86 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d110      	bne.n	8002bc8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e006      	b.n	8002bd6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
  }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d12c      	bne.n	8002c54 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e023      	b.n	8002c62 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002c22:	0c1b      	lsrs	r3, r3, #16
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fb05 	bl	8003240 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002c46:	2201      	movs	r2, #1
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e006      	b.n	8002c62 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c58:	f043 0208 	orr.w	r2, r3, #8
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b087      	sub	sp, #28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c7c:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d003      	beq.n	8002c8c <HAL_FDCAN_ActivateNotification+0x22>
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	f040 80c8 	bne.w	8002e1c <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d004      	beq.n	8002ca8 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03b      	beq.n	8002d20 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d031      	beq.n	8002d20 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d027      	beq.n	8002d20 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01d      	beq.n	8002d20 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d009      	beq.n	8002d20 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00c      	beq.n	8002d30 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d13b      	bne.n	8002dbc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d131      	bne.n	8002dbc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d127      	bne.n	8002dbc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d11d      	bne.n	8002dbc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d113      	bne.n	8002dbc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00c      	beq.n	8002dcc <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0202 	orr.w	r2, r2, #2
 8002dca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e006      	b.n	8002e2a <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e20:	f043 0202 	orr.w	r2, r3, #2
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08c      	sub	sp, #48	@ 0x30
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e44:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e52:	4013      	ands	r3, r2
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e82:	4013      	ands	r3, r2
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8c:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002e90:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e98:	6a3a      	ldr	r2, [r7, #32]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002ea8:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec4:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00b      	beq.n	8002ee8 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2240      	movs	r2, #64	@ 0x40
 8002ee0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f921 	bl	800312a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d019      	beq.n	8002f26 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d014      	beq.n	8002f26 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f04:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f1c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002f1e:	6939      	ldr	r1, [r7, #16]
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f8e3 	bl	80030ec <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f32:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002f34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8a2 	bl	8003080 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f48:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f8a2 	bl	8003096 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8a2 	bl	80030ac <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f84:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f89b 	bl	80030c2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002fa8:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2280      	movs	r2, #128	@ 0x80
 8002fbe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f887 	bl	80030d6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00c      	beq.n	8002fec <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fe4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f88b 	bl	8003102 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00c      	beq.n	8003010 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003008:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f883 	bl	8003116 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00f      	beq.n	800303a <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800302c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003032:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003048:	69f9      	ldr	r1, [r7, #28]
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f881 	bl	8003152 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6a3a      	ldr	r2, [r7, #32]
 800305c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f863 	bl	800313e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003078:	bf00      	nop
 800307a:	3730      	adds	r7, #48	@ 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003170:	4b30      	ldr	r3, [pc, #192]	@ (8003234 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003172:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2f      	ldr	r2, [pc, #188]	@ (8003238 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d103      	bne.n	8003186 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003184:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2c      	ldr	r2, [pc, #176]	@ (800323c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d103      	bne.n	8003198 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8003196:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031a6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ae:	041a      	lsls	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031cc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d4:	061a      	lsls	r2, r3, #24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	e005      	b.n	800321a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3304      	adds	r3, #4
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	429a      	cmp	r2, r3
 8003224:	d3f3      	bcc.n	800320e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	4000a400 	.word	0x4000a400
 8003238:	40006800 	.word	0x40006800
 800323c:	40006c00 	.word	0x40006c00

08003240 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	@ 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800325e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003266:	4313      	orrs	r3, r2
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	e00a      	b.n	8003282 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003274:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800327a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800327c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003280:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800328c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003292:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003298:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	3304      	adds	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	3304      	adds	r3, #4
 80032cc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e020      	b.n	8003316 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3303      	adds	r3, #3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3302      	adds	r3, #2
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	440b      	add	r3, r1
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80032ec:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3301      	adds	r3, #1
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	440b      	add	r3, r1
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80032fa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	440a      	add	r2, r1
 8003302:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003304:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3304      	adds	r3, #4
 800330e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	3304      	adds	r3, #4
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4a06      	ldr	r2, [pc, #24]	@ (8003334 <FDCAN_CopyMessageToRAM+0xf4>)
 800331c:	5cd3      	ldrb	r3, [r2, r3]
 800331e:	461a      	mov	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4293      	cmp	r3, r2
 8003324:	d3d6      	bcc.n	80032d4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	3724      	adds	r7, #36	@ 0x24
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	08008d74 	.word	0x08008d74

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003346:	e15a      	b.n	80035fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2101      	movs	r1, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 814c 	beq.w	80035f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d005      	beq.n	8003378 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003374:	2b02      	cmp	r3, #2
 8003376:	d130      	bne.n	80033da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ae:	2201      	movs	r2, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f003 0201 	and.w	r2, r3, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d017      	beq.n	8003416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d123      	bne.n	800346a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	08da      	lsrs	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3208      	adds	r2, #8
 800342a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	220f      	movs	r2, #15
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	08da      	lsrs	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3208      	adds	r2, #8
 8003464:	6939      	ldr	r1, [r7, #16]
 8003466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	2203      	movs	r2, #3
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0203 	and.w	r2, r3, #3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80a6 	beq.w	80035f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ac:	4b5b      	ldr	r3, [pc, #364]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	4a5a      	ldr	r2, [pc, #360]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80034b8:	4b58      	ldr	r3, [pc, #352]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 80034ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c4:	4a56      	ldr	r2, [pc, #344]	@ (8003620 <HAL_GPIO_Init+0x2e8>)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	220f      	movs	r2, #15
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034ee:	d01f      	beq.n	8003530 <HAL_GPIO_Init+0x1f8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003624 <HAL_GPIO_Init+0x2ec>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d019      	beq.n	800352c <HAL_GPIO_Init+0x1f4>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003628 <HAL_GPIO_Init+0x2f0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_GPIO_Init+0x1f0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a4a      	ldr	r2, [pc, #296]	@ (800362c <HAL_GPIO_Init+0x2f4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00d      	beq.n	8003524 <HAL_GPIO_Init+0x1ec>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a49      	ldr	r2, [pc, #292]	@ (8003630 <HAL_GPIO_Init+0x2f8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <HAL_GPIO_Init+0x1e8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a48      	ldr	r2, [pc, #288]	@ (8003634 <HAL_GPIO_Init+0x2fc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_GPIO_Init+0x1e4>
 8003518:	2305      	movs	r3, #5
 800351a:	e00a      	b.n	8003532 <HAL_GPIO_Init+0x1fa>
 800351c:	2306      	movs	r3, #6
 800351e:	e008      	b.n	8003532 <HAL_GPIO_Init+0x1fa>
 8003520:	2304      	movs	r3, #4
 8003522:	e006      	b.n	8003532 <HAL_GPIO_Init+0x1fa>
 8003524:	2303      	movs	r3, #3
 8003526:	e004      	b.n	8003532 <HAL_GPIO_Init+0x1fa>
 8003528:	2302      	movs	r3, #2
 800352a:	e002      	b.n	8003532 <HAL_GPIO_Init+0x1fa>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_GPIO_Init+0x1fa>
 8003530:	2300      	movs	r3, #0
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	f002 0203 	and.w	r2, r2, #3
 8003538:	0092      	lsls	r2, r2, #2
 800353a:	4093      	lsls	r3, r2
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003542:	4937      	ldr	r1, [pc, #220]	@ (8003620 <HAL_GPIO_Init+0x2e8>)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3302      	adds	r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003550:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <HAL_GPIO_Init+0x300>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003574:	4a30      	ldr	r2, [pc, #192]	@ (8003638 <HAL_GPIO_Init+0x300>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800357a:	4b2f      	ldr	r3, [pc, #188]	@ (8003638 <HAL_GPIO_Init+0x300>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800359e:	4a26      	ldr	r2, [pc, #152]	@ (8003638 <HAL_GPIO_Init+0x300>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035a4:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_GPIO_Init+0x300>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003638 <HAL_GPIO_Init+0x300>)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <HAL_GPIO_Init+0x300>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035f2:	4a11      	ldr	r2, [pc, #68]	@ (8003638 <HAL_GPIO_Init+0x300>)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3301      	adds	r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	f47f ae9d 	bne.w	8003348 <HAL_GPIO_Init+0x10>
  }
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40021000 	.word	0x40021000
 8003620:	40010000 	.word	0x40010000
 8003624:	48000400 	.word	0x48000400
 8003628:	48000800 	.word	0x48000800
 800362c:	48000c00 	.word	0x48000c00
 8003630:	48001000 	.word	0x48001000
 8003634:	48001400 	.word	0x48001400
 8003638:	40010400 	.word	0x40010400

0800363c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
 8003648:	4613      	mov	r3, r2
 800364a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003658:	e002      	b.n	8003660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e08d      	b.n	800379a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fe fb68 	bl	8001d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	@ 0x24
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	e006      	b.n	80036f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d108      	bne.n	800370e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e007      	b.n	800371e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800371c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800372c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d138      	bne.n	800382a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e032      	b.n	800382c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2224      	movs	r2, #36	@ 0x24
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	d139      	bne.n	80038c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003858:	2302      	movs	r3, #2
 800385a:	e033      	b.n	80038c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	@ 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800388a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d141      	bne.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038de:	4b4b      	ldr	r3, [pc, #300]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ea:	d131      	bne.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038ec:	4b47      	ldr	r3, [pc, #284]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f2:	4a46      	ldr	r2, [pc, #280]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038fc:	4b43      	ldr	r3, [pc, #268]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003904:	4a41      	ldr	r2, [pc, #260]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800390a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800390c:	4b40      	ldr	r3, [pc, #256]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2232      	movs	r2, #50	@ 0x32
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	4a3f      	ldr	r2, [pc, #252]	@ (8003a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	0c9b      	lsrs	r3, r3, #18
 800391e:	3301      	adds	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003922:	e002      	b.n	800392a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3b01      	subs	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800392a:	4b38      	ldr	r3, [pc, #224]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003936:	d102      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f2      	bne.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800393e:	4b33      	ldr	r3, [pc, #204]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394a:	d158      	bne.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e057      	b.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003950:	4b2e      	ldr	r3, [pc, #184]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003956:	4a2d      	ldr	r2, [pc, #180]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800395c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003960:	e04d      	b.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003968:	d141      	bne.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800396a:	4b28      	ldr	r3, [pc, #160]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003976:	d131      	bne.n	80039dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003978:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800397e:	4a23      	ldr	r2, [pc, #140]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003984:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003988:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003990:	4a1e      	ldr	r2, [pc, #120]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003996:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003998:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2232      	movs	r2, #50	@ 0x32
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	0c9b      	lsrs	r3, r3, #18
 80039aa:	3301      	adds	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ae:	e002      	b.n	80039b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039b6:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c2:	d102      	bne.n	80039ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f2      	bne.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ca:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d6:	d112      	bne.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e011      	b.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039dc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039ec:	e007      	b.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039ee:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039f6:	4a05      	ldr	r2, [pc, #20]	@ (8003a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	20000024 	.word	0x20000024
 8003a14:	431bde83 	.word	0x431bde83

08003a18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a26:	6093      	str	r3, [r2, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40007000 	.word	0x40007000

08003a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e2fe      	b.n	8004048 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d075      	beq.n	8003b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a56:	4b97      	ldr	r3, [pc, #604]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a60:	4b94      	ldr	r3, [pc, #592]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	d102      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3e>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_OscConfig+0x44>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d10b      	bne.n	8003a94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	4b8d      	ldr	r3, [pc, #564]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d05b      	beq.n	8003b40 <HAL_RCC_OscConfig+0x108>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d157      	bne.n	8003b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e2d9      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9c:	d106      	bne.n	8003aac <HAL_RCC_OscConfig+0x74>
 8003a9e:	4b85      	ldr	r3, [pc, #532]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a84      	ldr	r2, [pc, #528]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e01d      	b.n	8003ae8 <HAL_RCC_OscConfig+0xb0>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x98>
 8003ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a7e      	ldr	r2, [pc, #504]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a7b      	ldr	r2, [pc, #492]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCC_OscConfig+0xb0>
 8003ad0:	4b78      	ldr	r3, [pc, #480]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a77      	ldr	r2, [pc, #476]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b75      	ldr	r3, [pc, #468]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a74      	ldr	r2, [pc, #464]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d013      	beq.n	8003b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe fc6c 	bl	80023cc <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe fc68 	bl	80023cc <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	@ 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e29e      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0xc0>
 8003b16:	e014      	b.n	8003b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe fc58 	bl	80023cc <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b20:	f7fe fc54 	bl	80023cc <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	@ 0x64
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e28a      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b32:	4b60      	ldr	r3, [pc, #384]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0xe8>
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d075      	beq.n	8003c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4e:	4b59      	ldr	r3, [pc, #356]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b58:	4b56      	ldr	r3, [pc, #344]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b0c      	cmp	r3, #12
 8003b66:	d102      	bne.n	8003b6e <HAL_RCC_OscConfig+0x136>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d002      	beq.n	8003b74 <HAL_RCC_OscConfig+0x13c>
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d11f      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b74:	4b4f      	ldr	r3, [pc, #316]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_OscConfig+0x154>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e25d      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	4b49      	ldr	r3, [pc, #292]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	061b      	lsls	r3, r3, #24
 8003b9a:	4946      	ldr	r1, [pc, #280]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ba0:	4b45      	ldr	r3, [pc, #276]	@ (8003cb8 <HAL_RCC_OscConfig+0x280>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fbc5 	bl	8002334 <HAL_InitTick>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d043      	beq.n	8003c38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e249      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d023      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bbc:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fc00 	bl	80023cc <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fe fbfc 	bl	80023cc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e232      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be2:	4b34      	ldr	r3, [pc, #208]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	4b31      	ldr	r3, [pc, #196]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	061b      	lsls	r3, r3, #24
 8003bfc:	492d      	ldr	r1, [pc, #180]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
 8003c02:	e01a      	b.n	8003c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c04:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003c0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe fbdc 	bl	80023cc <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c18:	f7fe fbd8 	bl	80023cc <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e20e      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c2a:	4b22      	ldr	r3, [pc, #136]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x1e0>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d041      	beq.n	8003cca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c4e:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c54:	4a17      	ldr	r2, [pc, #92]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fe fbb5 	bl	80023cc <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c66:	f7fe fbb1 	bl	80023cc <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e1e7      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c78:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0ef      	beq.n	8003c66 <HAL_RCC_OscConfig+0x22e>
 8003c86:	e020      	b.n	8003cca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c88:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8e:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <HAL_RCC_OscConfig+0x27c>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fe fb98 	bl	80023cc <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c9e:	e00d      	b.n	8003cbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca0:	f7fe fb94 	bl	80023cc <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d906      	bls.n	8003cbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e1ca      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ea      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80a6 	beq.w	8003e24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cdc:	4b84      	ldr	r3, [pc, #528]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_RCC_OscConfig+0x2b4>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x2b6>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0e:	4b79      	ldr	r3, [pc, #484]	@ (8003ef4 <HAL_RCC_OscConfig+0x4bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d118      	bne.n	8003d4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d1a:	4b76      	ldr	r3, [pc, #472]	@ (8003ef4 <HAL_RCC_OscConfig+0x4bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a75      	ldr	r2, [pc, #468]	@ (8003ef4 <HAL_RCC_OscConfig+0x4bc>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d26:	f7fe fb51 	bl	80023cc <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fe fb4d 	bl	80023cc <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e183      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d40:	4b6c      	ldr	r3, [pc, #432]	@ (8003ef4 <HAL_RCC_OscConfig+0x4bc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d108      	bne.n	8003d66 <HAL_RCC_OscConfig+0x32e>
 8003d54:	4b66      	ldr	r3, [pc, #408]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5a:	4a65      	ldr	r2, [pc, #404]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d64:	e024      	b.n	8003db0 <HAL_RCC_OscConfig+0x378>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d110      	bne.n	8003d90 <HAL_RCC_OscConfig+0x358>
 8003d6e:	4b60      	ldr	r3, [pc, #384]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d74:	4a5e      	ldr	r2, [pc, #376]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003d76:	f043 0304 	orr.w	r3, r3, #4
 8003d7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d84:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d8e:	e00f      	b.n	8003db0 <HAL_RCC_OscConfig+0x378>
 8003d90:	4b57      	ldr	r3, [pc, #348]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	4a56      	ldr	r2, [pc, #344]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003da0:	4b53      	ldr	r3, [pc, #332]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da6:	4a52      	ldr	r2, [pc, #328]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d016      	beq.n	8003de6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fe fb08 	bl	80023cc <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fe fb04 	bl	80023cc <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e138      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd6:	4b46      	ldr	r3, [pc, #280]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ed      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x388>
 8003de4:	e015      	b.n	8003e12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de6:	f7fe faf1 	bl	80023cc <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe faed 	bl	80023cc <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e121      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e04:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ed      	bne.n	8003dee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e12:	7ffb      	ldrb	r3, [r7, #31]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e18:	4b35      	ldr	r3, [pc, #212]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	4a34      	ldr	r2, [pc, #208]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d03c      	beq.n	8003eaa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01c      	beq.n	8003e72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e38:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fe fac0 	bl	80023cc <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e50:	f7fe fabc 	bl	80023cc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0f2      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e62:	4b23      	ldr	r3, [pc, #140]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ef      	beq.n	8003e50 <HAL_RCC_OscConfig+0x418>
 8003e70:	e01b      	b.n	8003eaa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e72:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7fe faa3 	bl	80023cc <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e8a:	f7fe fa9f 	bl	80023cc <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0d5      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ef      	bne.n	8003e8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80c9 	beq.w	8004046 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	f000 8083 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d15e      	bne.n	8003f88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eca:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a08      	ldr	r2, [pc, #32]	@ (8003ef0 <HAL_RCC_OscConfig+0x4b8>)
 8003ed0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fe fa79 	bl	80023cc <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003edc:	e00c      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fe fa75 	bl	80023cc <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d905      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0ab      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	4b55      	ldr	r3, [pc, #340]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ec      	bne.n	8003ede <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f04:	4b52      	ldr	r3, [pc, #328]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	4b52      	ldr	r3, [pc, #328]	@ (8004054 <HAL_RCC_OscConfig+0x61c>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6a11      	ldr	r1, [r2, #32]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0112      	lsls	r2, r2, #4
 8003f18:	4311      	orrs	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f1e:	0212      	lsls	r2, r2, #8
 8003f20:	4311      	orrs	r1, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f26:	0852      	lsrs	r2, r2, #1
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0552      	lsls	r2, r2, #21
 8003f2c:	4311      	orrs	r1, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f32:	0852      	lsrs	r2, r2, #1
 8003f34:	3a01      	subs	r2, #1
 8003f36:	0652      	lsls	r2, r2, #25
 8003f38:	4311      	orrs	r1, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f3e:	06d2      	lsls	r2, r2, #27
 8003f40:	430a      	orrs	r2, r1
 8003f42:	4943      	ldr	r1, [pc, #268]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b41      	ldr	r3, [pc, #260]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a40      	ldr	r2, [pc, #256]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f54:	4b3e      	ldr	r3, [pc, #248]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a3d      	ldr	r2, [pc, #244]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003f5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe fa34 	bl	80023cc <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe fa30 	bl	80023cc <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e066      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7a:	4b35      	ldr	r3, [pc, #212]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x530>
 8003f86:	e05e      	b.n	8004046 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b31      	ldr	r3, [pc, #196]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a30      	ldr	r2, [pc, #192]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe fa1a 	bl	80023cc <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fe fa16 	bl	80023cc <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e04c      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fae:	4b28      	ldr	r3, [pc, #160]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003fba:	4b25      	ldr	r3, [pc, #148]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	4924      	ldr	r1, [pc, #144]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003fc0:	4b25      	ldr	r3, [pc, #148]	@ (8004058 <HAL_RCC_OscConfig+0x620>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60cb      	str	r3, [r1, #12]
 8003fc6:	e03e      	b.n	8004046 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e039      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8004050 <HAL_RCC_OscConfig+0x618>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0203 	and.w	r2, r3, #3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d12c      	bne.n	8004042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d123      	bne.n	8004042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004004:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d11b      	bne.n	8004042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004014:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d113      	bne.n	8004042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d109      	bne.n	8004042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	3b01      	subs	r3, #1
 800403c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	019f800c 	.word	0x019f800c
 8004058:	feeefffc 	.word	0xfeeefffc

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e11e      	b.n	80042b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b91      	ldr	r3, [pc, #580]	@ (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d910      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b8e      	ldr	r3, [pc, #568]	@ (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 020f 	bic.w	r2, r3, #15
 800408a:	498c      	ldr	r1, [pc, #560]	@ (80042bc <HAL_RCC_ClockConfig+0x260>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b8a      	ldr	r3, [pc, #552]	@ (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e106      	b.n	80042b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d073      	beq.n	8004198 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d129      	bne.n	800410c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b8:	4b81      	ldr	r3, [pc, #516]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0f4      	b.n	80042b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040c8:	f000 f99e 	bl	8004408 <RCC_GetSysClockFreqFromPLLSource>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4a7c      	ldr	r2, [pc, #496]	@ (80042c4 <HAL_RCC_ClockConfig+0x268>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d93f      	bls.n	8004156 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040d6:	4b7a      	ldr	r3, [pc, #488]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d033      	beq.n	8004156 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d12f      	bne.n	8004156 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040f6:	4b72      	ldr	r3, [pc, #456]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040fe:	4a70      	ldr	r2, [pc, #448]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004104:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004106:	2380      	movs	r3, #128	@ 0x80
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e024      	b.n	8004156 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d107      	bne.n	8004124 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004114:	4b6a      	ldr	r3, [pc, #424]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0c6      	b.n	80042b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004124:	4b66      	ldr	r3, [pc, #408]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0be      	b.n	80042b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004134:	f000 f8ce 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8004138:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4a61      	ldr	r2, [pc, #388]	@ (80042c4 <HAL_RCC_ClockConfig+0x268>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d909      	bls.n	8004156 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004142:	4b5f      	ldr	r3, [pc, #380]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800414a:	4a5d      	ldr	r2, [pc, #372]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 800414c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004150:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004156:	4b5a      	ldr	r3, [pc, #360]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 0203 	bic.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4957      	ldr	r1, [pc, #348]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004168:	f7fe f930 	bl	80023cc <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	e00a      	b.n	8004186 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004170:	f7fe f92c 	bl	80023cc <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e095      	b.n	80042b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	4b4e      	ldr	r3, [pc, #312]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 020c 	and.w	r2, r3, #12
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	429a      	cmp	r2, r3
 8004196:	d1eb      	bne.n	8004170 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d023      	beq.n	80041ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b0:	4b43      	ldr	r3, [pc, #268]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a42      	ldr	r2, [pc, #264]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80041b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041c8:	4b3d      	ldr	r3, [pc, #244]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80041d0:	4a3b      	ldr	r2, [pc, #236]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80041d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4936      	ldr	r1, [pc, #216]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
 80041ea:	e008      	b.n	80041fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b80      	cmp	r3, #128	@ 0x80
 80041f0:	d105      	bne.n	80041fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041f2:	4b33      	ldr	r3, [pc, #204]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	4a32      	ldr	r2, [pc, #200]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 80041f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041fe:	4b2f      	ldr	r3, [pc, #188]	@ (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d21d      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420c:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <HAL_RCC_ClockConfig+0x260>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 020f 	bic.w	r2, r3, #15
 8004214:	4929      	ldr	r1, [pc, #164]	@ (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800421c:	f7fe f8d6 	bl	80023cc <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fe f8d2 	bl	80023cc <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e03b      	b.n	80042b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423a:	4b20      	ldr	r3, [pc, #128]	@ (80042bc <HAL_RCC_ClockConfig+0x260>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d1ed      	bne.n	8004224 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004254:	4b1a      	ldr	r3, [pc, #104]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4917      	ldr	r1, [pc, #92]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004272:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	490f      	ldr	r1, [pc, #60]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004286:	f000 f825 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <HAL_RCC_ClockConfig+0x264>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490c      	ldr	r1, [pc, #48]	@ (80042c8 <HAL_RCC_ClockConfig+0x26c>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <HAL_RCC_ClockConfig+0x270>)
 80042a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042a6:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <HAL_RCC_ClockConfig+0x274>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe f842 	bl	8002334 <HAL_InitTick>
 80042b0:	4603      	mov	r3, r0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40022000 	.word	0x40022000
 80042c0:	40021000 	.word	0x40021000
 80042c4:	04c4b400 	.word	0x04c4b400
 80042c8:	08008d5c 	.word	0x08008d5c
 80042cc:	20000024 	.word	0x20000024
 80042d0:	20000028 	.word	0x20000028

080042d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042da:	4b2c      	ldr	r3, [pc, #176]	@ (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d102      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004390 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e047      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042ec:	4b27      	ldr	r3, [pc, #156]	@ (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d102      	bne.n	80042fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042f8:	4b26      	ldr	r3, [pc, #152]	@ (8004394 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	e03e      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80042fe:	4b23      	ldr	r3, [pc, #140]	@ (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b0c      	cmp	r3, #12
 8004308:	d136      	bne.n	8004378 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800430a:	4b20      	ldr	r3, [pc, #128]	@ (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004314:	4b1d      	ldr	r3, [pc, #116]	@ (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3301      	adds	r3, #1
 8004320:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d10c      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004328:	4a1a      	ldr	r2, [pc, #104]	@ (8004394 <HAL_RCC_GetSysClockFreq+0xc0>)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	4a16      	ldr	r2, [pc, #88]	@ (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004332:	68d2      	ldr	r2, [r2, #12]
 8004334:	0a12      	lsrs	r2, r2, #8
 8004336:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
      break;
 8004340:	e00c      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004342:	4a13      	ldr	r2, [pc, #76]	@ (8004390 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	4a10      	ldr	r2, [pc, #64]	@ (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	0a12      	lsrs	r2, r2, #8
 8004350:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004354:	fb02 f303 	mul.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]
      break;
 800435a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800435c:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	0e5b      	lsrs	r3, r3, #25
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	3301      	adds	r3, #1
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	e001      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800437c:	693b      	ldr	r3, [r7, #16]
}
 800437e:	4618      	mov	r0, r3
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	00f42400 	.word	0x00f42400
 8004394:	007a1200 	.word	0x007a1200

08004398 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800439c:	4b03      	ldr	r3, [pc, #12]	@ (80043ac <HAL_RCC_GetHCLKFreq+0x14>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000024 	.word	0x20000024

080043b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043b4:	f7ff fff0 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4904      	ldr	r1, [pc, #16]	@ (80043d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	08008d6c 	.word	0x08008d6c

080043dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043e0:	f7ff ffda 	bl	8004398 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0adb      	lsrs	r3, r3, #11
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4904      	ldr	r1, [pc, #16]	@ (8004404 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	08008d6c 	.word	0x08008d6c

08004408 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800440e:	4b1e      	ldr	r3, [pc, #120]	@ (8004488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004418:	4b1b      	ldr	r3, [pc, #108]	@ (8004488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d10c      	bne.n	8004446 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800442c:	4a17      	ldr	r2, [pc, #92]	@ (800448c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	4a14      	ldr	r2, [pc, #80]	@ (8004488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004436:	68d2      	ldr	r2, [r2, #12]
 8004438:	0a12      	lsrs	r2, r2, #8
 800443a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	617b      	str	r3, [r7, #20]
    break;
 8004444:	e00c      	b.n	8004460 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004446:	4a12      	ldr	r2, [pc, #72]	@ (8004490 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	4a0e      	ldr	r2, [pc, #56]	@ (8004488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004450:	68d2      	ldr	r2, [r2, #12]
 8004452:	0a12      	lsrs	r2, r2, #8
 8004454:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004458:	fb02 f303 	mul.w	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]
    break;
 800445e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004460:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	0e5b      	lsrs	r3, r3, #25
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	3301      	adds	r3, #1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800447a:	687b      	ldr	r3, [r7, #4]
}
 800447c:	4618      	mov	r0, r3
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40021000 	.word	0x40021000
 800448c:	007a1200 	.word	0x007a1200
 8004490:	00f42400 	.word	0x00f42400

08004494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800449c:	2300      	movs	r3, #0
 800449e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044a0:	2300      	movs	r3, #0
 80044a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8098 	beq.w	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b6:	4b43      	ldr	r3, [pc, #268]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10d      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	4b40      	ldr	r3, [pc, #256]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c6:	4a3f      	ldr	r2, [pc, #252]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ce:	4b3d      	ldr	r3, [pc, #244]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044de:	4b3a      	ldr	r3, [pc, #232]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a39      	ldr	r2, [pc, #228]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ea:	f7fd ff6f 	bl	80023cc <HAL_GetTick>
 80044ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f0:	e009      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fd ff6b 	bl	80023cc <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d902      	bls.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	74fb      	strb	r3, [r7, #19]
        break;
 8004504:	e005      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004506:	4b30      	ldr	r3, [pc, #192]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0ef      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004512:	7cfb      	ldrb	r3, [r7, #19]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d159      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004518:	4b2a      	ldr	r3, [pc, #168]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004522:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01e      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	429a      	cmp	r2, r3
 8004532:	d019      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004534:	4b23      	ldr	r3, [pc, #140]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004540:	4b20      	ldr	r3, [pc, #128]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004546:	4a1f      	ldr	r2, [pc, #124]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004550:	4b1c      	ldr	r3, [pc, #112]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004556:	4a1b      	ldr	r2, [pc, #108]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004560:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fd ff2b 	bl	80023cc <HAL_GetTick>
 8004576:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004578:	e00b      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7fd ff27 	bl	80023cc <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d902      	bls.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	74fb      	strb	r3, [r7, #19]
            break;
 8004590:	e006      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004592:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0ec      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045a0:	7cfb      	ldrb	r3, [r7, #19]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10b      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a6:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b4:	4903      	ldr	r1, [pc, #12]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045bc:	e008      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	74bb      	strb	r3, [r7, #18]
 80045c2:	e005      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d0:	7c7b      	ldrb	r3, [r7, #17]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d6:	4ba7      	ldr	r3, [pc, #668]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	4aa6      	ldr	r2, [pc, #664]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ee:	4ba1      	ldr	r3, [pc, #644]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f4:	f023 0203 	bic.w	r2, r3, #3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	499d      	ldr	r1, [pc, #628]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004610:	4b98      	ldr	r3, [pc, #608]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004616:	f023 020c 	bic.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	4995      	ldr	r1, [pc, #596]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004632:	4b90      	ldr	r3, [pc, #576]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004638:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	498c      	ldr	r1, [pc, #560]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004654:	4b87      	ldr	r3, [pc, #540]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	4984      	ldr	r1, [pc, #528]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004676:	4b7f      	ldr	r3, [pc, #508]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	497b      	ldr	r1, [pc, #492]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004698:	4b76      	ldr	r3, [pc, #472]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	4973      	ldr	r1, [pc, #460]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	496a      	ldr	r1, [pc, #424]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046dc:	4b65      	ldr	r3, [pc, #404]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4962      	ldr	r1, [pc, #392]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	4959      	ldr	r1, [pc, #356]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004720:	4b54      	ldr	r3, [pc, #336]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004726:	f023 0203 	bic.w	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472e:	4951      	ldr	r1, [pc, #324]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004742:	4b4c      	ldr	r3, [pc, #304]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004748:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	4948      	ldr	r1, [pc, #288]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004760:	2b00      	cmp	r3, #0
 8004762:	d015      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004764:	4b43      	ldr	r3, [pc, #268]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	4940      	ldr	r1, [pc, #256]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004782:	d105      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004784:	4b3b      	ldr	r3, [pc, #236]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a3a      	ldr	r2, [pc, #232]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800478e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004798:	2b00      	cmp	r3, #0
 800479a:	d015      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800479c:	4b35      	ldr	r3, [pc, #212]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047aa:	4932      	ldr	r1, [pc, #200]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ba:	d105      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047d4:	4b27      	ldr	r3, [pc, #156]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e2:	4924      	ldr	r1, [pc, #144]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047f2:	d105      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d015      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800480c:	4b19      	ldr	r3, [pc, #100]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004812:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	4916      	ldr	r1, [pc, #88]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800482a:	d105      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800482c:	4b11      	ldr	r3, [pc, #68]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a10      	ldr	r2, [pc, #64]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004836:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d019      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004844:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	4908      	ldr	r1, [pc, #32]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004862:	d109      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004864:	4b03      	ldr	r3, [pc, #12]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a02      	ldr	r2, [pc, #8]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800486e:	60d3      	str	r3, [r2, #12]
 8004870:	e002      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d015      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004884:	4b29      	ldr	r3, [pc, #164]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	4926      	ldr	r1, [pc, #152]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048a2:	d105      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048a4:	4b21      	ldr	r3, [pc, #132]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a20      	ldr	r2, [pc, #128]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d015      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80048bc:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ca:	4918      	ldr	r1, [pc, #96]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048da:	d105      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048dc:	4b13      	ldr	r3, [pc, #76]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a12      	ldr	r2, [pc, #72]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d015      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048f4:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004902:	490a      	ldr	r1, [pc, #40]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004912:	d105      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004914:	4b05      	ldr	r3, [pc, #20]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4a04      	ldr	r2, [pc, #16]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800491a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800491e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004920:	7cbb      	ldrb	r3, [r7, #18]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000

08004930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e049      	b.n	80049d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fd fb32 	bl	8001fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f000 fb5a 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d001      	beq.n	80049f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e054      	b.n	8004aa2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a26      	ldr	r2, [pc, #152]	@ (8004ab0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d022      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x80>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a22:	d01d      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x80>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a22      	ldr	r2, [pc, #136]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d018      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x80>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a21      	ldr	r2, [pc, #132]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d013      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004abc <HAL_TIM_Base_Start_IT+0xdc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00e      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x80>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d009      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d004      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x80>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d115      	bne.n	8004a8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	4b19      	ldr	r3, [pc, #100]	@ (8004acc <HAL_TIM_Base_Start_IT+0xec>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b06      	cmp	r3, #6
 8004a70:	d015      	beq.n	8004a9e <HAL_TIM_Base_Start_IT+0xbe>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a78:	d011      	beq.n	8004a9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	e008      	b.n	8004a9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e000      	b.n	8004aa0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40012c00 	.word	0x40012c00
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40013400 	.word	0x40013400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40015000 	.word	0x40015000
 8004acc:	00010007 	.word	0x00010007

08004ad0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e097      	b.n	8004c14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fd f98f 	bl	8001e1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004b14:	f023 0307 	bic.w	r3, r3, #7
 8004b18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f000 fa7f 	bl	8005028 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b52:	f023 0303 	bic.w	r3, r3, #3
 8004b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	4313      	orrs	r3, r2
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b70:	f023 030c 	bic.w	r3, r3, #12
 8004b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	011a      	lsls	r2, r3, #4
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	031b      	lsls	r3, r3, #12
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c2c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c34:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c3c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c44:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d110      	bne.n	8004c6e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d102      	bne.n	8004c58 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c52:	7b7b      	ldrb	r3, [r7, #13]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d001      	beq.n	8004c5c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e069      	b.n	8004d30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c6c:	e031      	b.n	8004cd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d110      	bne.n	8004c96 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c74:	7bbb      	ldrb	r3, [r7, #14]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d102      	bne.n	8004c80 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c7a:	7b3b      	ldrb	r3, [r7, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d001      	beq.n	8004c84 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e055      	b.n	8004d30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c94:	e01d      	b.n	8004cd2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d108      	bne.n	8004cae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c9c:	7bbb      	ldrb	r3, [r7, #14]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d105      	bne.n	8004cae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ca2:	7b7b      	ldrb	r3, [r7, #13]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d102      	bne.n	8004cae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ca8:	7b3b      	ldrb	r3, [r7, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d001      	beq.n	8004cb2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e03e      	b.n	8004d30 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_TIM_Encoder_Start+0xc4>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d008      	beq.n	8004cf0 <HAL_TIM_Encoder_Start+0xd4>
 8004cde:	e00f      	b.n	8004d00 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fa71 	bl	80051d0 <TIM_CCxChannelCmd>
      break;
 8004cee:	e016      	b.n	8004d1e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fa69 	bl	80051d0 <TIM_CCxChannelCmd>
      break;
 8004cfe:	e00e      	b.n	8004d1e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2201      	movs	r2, #1
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fa61 	bl	80051d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2201      	movs	r2, #1
 8004d14:	2104      	movs	r1, #4
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fa5a 	bl	80051d0 <TIM_CCxChannelCmd>
      break;
 8004d1c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d020      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01b      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0202 	mvn.w	r2, #2
 8004d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f931 	bl	8004fea <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f923 	bl	8004fd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f934 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d020      	beq.n	8004de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01b      	beq.n	8004de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0204 	mvn.w	r2, #4
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f90b 	bl	8004fea <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f8fd 	bl	8004fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f90e 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d020      	beq.n	8004e34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01b      	beq.n	8004e34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0208 	mvn.w	r2, #8
 8004e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8e5 	bl	8004fea <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f8d7 	bl	8004fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f8e8 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d020      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01b      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0210 	mvn.w	r2, #16
 8004e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2208      	movs	r2, #8
 8004e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8bf 	bl	8004fea <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8b1 	bl	8004fd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8c2 	bl	8004ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0201 	mvn.w	r2, #1
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc f996 	bl	80011d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00c      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fa80 	bl	80053d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00c      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fa78 	bl	80053e6 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00c      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f87c 	bl	8005012 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00c      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f06f 0220 	mvn.w	r2, #32
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fa40 	bl	80053be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fa4c 	bl	80053fa <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00c      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fa44 	bl	800540e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00c      	beq.n	8004faa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa3c 	bl	8005422 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00c      	beq.n	8004fce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fa34 	bl	8005436 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a4c      	ldr	r2, [pc, #304]	@ (800516c <TIM_Base_SetConfig+0x144>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d017      	beq.n	8005070 <TIM_Base_SetConfig+0x48>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005046:	d013      	beq.n	8005070 <TIM_Base_SetConfig+0x48>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a49      	ldr	r2, [pc, #292]	@ (8005170 <TIM_Base_SetConfig+0x148>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00f      	beq.n	8005070 <TIM_Base_SetConfig+0x48>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a48      	ldr	r2, [pc, #288]	@ (8005174 <TIM_Base_SetConfig+0x14c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00b      	beq.n	8005070 <TIM_Base_SetConfig+0x48>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a47      	ldr	r2, [pc, #284]	@ (8005178 <TIM_Base_SetConfig+0x150>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_Base_SetConfig+0x48>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a46      	ldr	r2, [pc, #280]	@ (800517c <TIM_Base_SetConfig+0x154>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0x48>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a45      	ldr	r2, [pc, #276]	@ (8005180 <TIM_Base_SetConfig+0x158>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d108      	bne.n	8005082 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a39      	ldr	r2, [pc, #228]	@ (800516c <TIM_Base_SetConfig+0x144>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d023      	beq.n	80050d2 <TIM_Base_SetConfig+0xaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005090:	d01f      	beq.n	80050d2 <TIM_Base_SetConfig+0xaa>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a36      	ldr	r2, [pc, #216]	@ (8005170 <TIM_Base_SetConfig+0x148>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01b      	beq.n	80050d2 <TIM_Base_SetConfig+0xaa>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a35      	ldr	r2, [pc, #212]	@ (8005174 <TIM_Base_SetConfig+0x14c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d017      	beq.n	80050d2 <TIM_Base_SetConfig+0xaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a34      	ldr	r2, [pc, #208]	@ (8005178 <TIM_Base_SetConfig+0x150>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <TIM_Base_SetConfig+0xaa>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a33      	ldr	r2, [pc, #204]	@ (800517c <TIM_Base_SetConfig+0x154>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00f      	beq.n	80050d2 <TIM_Base_SetConfig+0xaa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a33      	ldr	r2, [pc, #204]	@ (8005184 <TIM_Base_SetConfig+0x15c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00b      	beq.n	80050d2 <TIM_Base_SetConfig+0xaa>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a32      	ldr	r2, [pc, #200]	@ (8005188 <TIM_Base_SetConfig+0x160>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d007      	beq.n	80050d2 <TIM_Base_SetConfig+0xaa>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a31      	ldr	r2, [pc, #196]	@ (800518c <TIM_Base_SetConfig+0x164>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_Base_SetConfig+0xaa>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005180 <TIM_Base_SetConfig+0x158>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d108      	bne.n	80050e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a18      	ldr	r2, [pc, #96]	@ (800516c <TIM_Base_SetConfig+0x144>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <TIM_Base_SetConfig+0x110>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a1a      	ldr	r2, [pc, #104]	@ (800517c <TIM_Base_SetConfig+0x154>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00f      	beq.n	8005138 <TIM_Base_SetConfig+0x110>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1a      	ldr	r2, [pc, #104]	@ (8005184 <TIM_Base_SetConfig+0x15c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_Base_SetConfig+0x110>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a19      	ldr	r2, [pc, #100]	@ (8005188 <TIM_Base_SetConfig+0x160>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x110>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a18      	ldr	r2, [pc, #96]	@ (800518c <TIM_Base_SetConfig+0x164>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x110>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a13      	ldr	r2, [pc, #76]	@ (8005180 <TIM_Base_SetConfig+0x158>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d103      	bne.n	8005140 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f023 0201 	bic.w	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	611a      	str	r2, [r3, #16]
  }
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40013400 	.word	0x40013400
 8005180:	40015000 	.word	0x40015000
 8005184:	40014000 	.word	0x40014000
 8005188:	40014400 	.word	0x40014400
 800518c:	40014800 	.word	0x40014800

08005190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	021a      	lsls	r2, r3, #8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2201      	movs	r2, #1
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	401a      	ands	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1a      	ldr	r2, [r3, #32]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005230:	2302      	movs	r3, #2
 8005232:	e074      	b.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a34      	ldr	r2, [pc, #208]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a33      	ldr	r2, [pc, #204]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a31      	ldr	r2, [pc, #196]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005278:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800528a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a21      	ldr	r2, [pc, #132]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d022      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b4:	d01d      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005338 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d018      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005340 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00e      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a15      	ldr	r2, [pc, #84]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d009      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a18      	ldr	r2, [pc, #96]	@ (8005344 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d004      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a11      	ldr	r2, [pc, #68]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d10c      	bne.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4313      	orrs	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40013400 	.word	0x40013400
 8005334:	40015000 	.word	0x40015000
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40000c00 	.word	0x40000c00
 8005344:	40014000 	.word	0x40014000

08005348 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e02a      	b.n	80053b6 <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f7ff ff0a 	bl	8005190 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005382:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	6839      	ldr	r1, [r7, #0]
 800538c:	7b09      	ldrb	r1, [r1, #12]
 800538e:	2901      	cmp	r1, #1
 8005390:	d101      	bne.n	8005396 <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 8005392:	2120      	movs	r1, #32
 8005394:	e000      	b.n	8005398 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 8005396:	2100      	movs	r1, #0
 8005398:	4319      	orrs	r1, r3
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	430b      	orrs	r3, r1
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e042      	b.n	80054e2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fc fdcc 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	@ 0x24
 8005478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fef7 	bl	8006288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fbf8 	bl	8005c90 <UART_SetConfig>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e01b      	b.n	80054e2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 ff76 	bl	80063cc <UART_CheckIdleState>
 80054e0:	4603      	mov	r3, r0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b08a      	sub	sp, #40	@ 0x28
 80054ee:	af02      	add	r7, sp, #8
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	603b      	str	r3, [r7, #0]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005500:	2b20      	cmp	r3, #32
 8005502:	d17b      	bne.n	80055fc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_UART_Transmit+0x26>
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e074      	b.n	80055fe <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2221      	movs	r2, #33	@ 0x21
 8005520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005524:	f7fc ff52 	bl	80023cc <HAL_GetTick>
 8005528:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005542:	d108      	bne.n	8005556 <HAL_UART_Transmit+0x6c>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	e003      	b.n	800555e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800555e:	e030      	b.n	80055c2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2200      	movs	r2, #0
 8005568:	2180      	movs	r1, #128	@ 0x80
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 ffd8 	bl	8006520 <UART_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e03d      	b.n	80055fe <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10b      	bne.n	80055a0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005596:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	3302      	adds	r3, #2
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e007      	b.n	80055b0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1c8      	bne.n	8005560 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2140      	movs	r1, #64	@ 0x40
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 ffa1 	bl	8006520 <UART_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e006      	b.n	80055fe <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e000      	b.n	80055fe <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055fc:	2302      	movs	r3, #2
  }
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b0ba      	sub	sp, #232	@ 0xe8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800562e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005632:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005636:	4013      	ands	r3, r2
 8005638:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800563c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d11b      	bne.n	800567c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d015      	beq.n	800567c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d105      	bne.n	8005668 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800565c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d009      	beq.n	800567c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 82e3 	beq.w	8005c38 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
      }
      return;
 800567a:	e2dd      	b.n	8005c38 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800567c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8123 	beq.w	80058cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005686:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800568a:	4b8d      	ldr	r3, [pc, #564]	@ (80058c0 <HAL_UART_IRQHandler+0x2b8>)
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005692:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005696:	4b8b      	ldr	r3, [pc, #556]	@ (80058c4 <HAL_UART_IRQHandler+0x2bc>)
 8005698:	4013      	ands	r3, r2
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8116 	beq.w	80058cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d011      	beq.n	80056d0 <HAL_UART_IRQHandler+0xc8>
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2201      	movs	r2, #1
 80056be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c6:	f043 0201 	orr.w	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d011      	beq.n	8005700 <HAL_UART_IRQHandler+0xf8>
 80056dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2202      	movs	r2, #2
 80056ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f6:	f043 0204 	orr.w	r2, r3, #4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d011      	beq.n	8005730 <HAL_UART_IRQHandler+0x128>
 800570c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2204      	movs	r2, #4
 800571e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005726:	f043 0202 	orr.w	r2, r3, #2
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d017      	beq.n	800576c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005748:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800574c:	4b5c      	ldr	r3, [pc, #368]	@ (80058c0 <HAL_UART_IRQHandler+0x2b8>)
 800574e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2208      	movs	r2, #8
 800575a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005762:	f043 0208 	orr.w	r2, r3, #8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005774:	2b00      	cmp	r3, #0
 8005776:	d012      	beq.n	800579e <HAL_UART_IRQHandler+0x196>
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800577c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00c      	beq.n	800579e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800578c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8249 	beq.w	8005c3c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d105      	bne.n	80057ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f2:	2b40      	cmp	r3, #64	@ 0x40
 80057f4:	d005      	beq.n	8005802 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d054      	beq.n	80058ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fef9 	bl	80065fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005812:	2b40      	cmp	r3, #64	@ 0x40
 8005814:	d146      	bne.n	80058a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3308      	adds	r3, #8
 800581c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800582c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3308      	adds	r3, #8
 800583e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005842:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800584e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800585a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1d9      	bne.n	8005816 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005868:	2b00      	cmp	r3, #0
 800586a:	d017      	beq.n	800589c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005872:	4a15      	ldr	r2, [pc, #84]	@ (80058c8 <HAL_UART_IRQHandler+0x2c0>)
 8005874:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587c:	4618      	mov	r0, r3
 800587e:	f7fc ff3b 	bl	80026f8 <HAL_DMA_Abort_IT>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005896:	4610      	mov	r0, r2
 8005898:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589a:	e00f      	b.n	80058bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f9e1 	bl	8005c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a2:	e00b      	b.n	80058bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f9dd 	bl	8005c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058aa:	e007      	b.n	80058bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f9d9 	bl	8005c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80058ba:	e1bf      	b.n	8005c3c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	bf00      	nop
    return;
 80058be:	e1bd      	b.n	8005c3c <HAL_UART_IRQHandler+0x634>
 80058c0:	10000001 	.word	0x10000001
 80058c4:	04000120 	.word	0x04000120
 80058c8:	080066c7 	.word	0x080066c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	f040 8153 	bne.w	8005b7c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 814c 	beq.w	8005b7c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8145 	beq.w	8005b7c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2210      	movs	r2, #16
 80058f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005904:	2b40      	cmp	r3, #64	@ 0x40
 8005906:	f040 80bb 	bne.w	8005a80 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 818f 	beq.w	8005c40 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005928:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800592c:	429a      	cmp	r2, r3
 800592e:	f080 8187 	bcs.w	8005c40 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005938:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 8087 	bne.w	8005a5e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005964:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800596c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800597a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800597e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005986:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1da      	bne.n	8005950 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e1      	bne.n	800599a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3308      	adds	r3, #8
 80059dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e3      	bne.n	80059d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a2c:	f023 0310 	bic.w	r3, r3, #16
 8005a30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e4      	bne.n	8005a1c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fc fdf4 	bl	8002646 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f8fd 	bl	8005c78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a7e:	e0df      	b.n	8005c40 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80d1 	beq.w	8005c44 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005aa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 80cc 	beq.w	8005c44 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e4      	bne.n	8005aac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	623b      	str	r3, [r7, #32]
   return(result);
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3308      	adds	r3, #8
 8005b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e1      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0310 	bic.w	r3, r3, #16
 8005b46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	69b9      	ldr	r1, [r7, #24]
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	617b      	str	r3, [r7, #20]
   return(result);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e4      	bne.n	8005b32 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f87f 	bl	8005c78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b7a:	e063      	b.n	8005c44 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00e      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x59e>
 8005b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fdd2 	bl	8006748 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ba4:	e051      	b.n	8005c4a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d014      	beq.n	8005bdc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d008      	beq.n	8005bdc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d03a      	beq.n	8005c48 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
    }
    return;
 8005bda:	e035      	b.n	8005c48 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <HAL_UART_IRQHandler+0x5f4>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fd7c 	bl	80066f2 <UART_EndTransmit_IT>
    return;
 8005bfa:	e026      	b.n	8005c4a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d009      	beq.n	8005c1c <HAL_UART_IRQHandler+0x614>
 8005c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fdab 	bl	8006770 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c1a:	e016      	b.n	8005c4a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d010      	beq.n	8005c4a <HAL_UART_IRQHandler+0x642>
 8005c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	da0c      	bge.n	8005c4a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fd93 	bl	800675c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c36:	e008      	b.n	8005c4a <HAL_UART_IRQHandler+0x642>
      return;
 8005c38:	bf00      	nop
 8005c3a:	e006      	b.n	8005c4a <HAL_UART_IRQHandler+0x642>
    return;
 8005c3c:	bf00      	nop
 8005c3e:	e004      	b.n	8005c4a <HAL_UART_IRQHandler+0x642>
      return;
 8005c40:	bf00      	nop
 8005c42:	e002      	b.n	8005c4a <HAL_UART_IRQHandler+0x642>
      return;
 8005c44:	bf00      	nop
 8005c46:	e000      	b.n	8005c4a <HAL_UART_IRQHandler+0x642>
    return;
 8005c48:	bf00      	nop
  }
}
 8005c4a:	37e8      	adds	r7, #232	@ 0xe8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c94:	b08c      	sub	sp, #48	@ 0x30
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	4baa      	ldr	r3, [pc, #680]	@ (8005f68 <UART_SetConfig+0x2d8>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a9f      	ldr	r2, [pc, #636]	@ (8005f6c <UART_SetConfig+0x2dc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d004      	beq.n	8005cfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d06:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1a:	f023 010f 	bic.w	r1, r3, #15
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a90      	ldr	r2, [pc, #576]	@ (8005f70 <UART_SetConfig+0x2e0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d125      	bne.n	8005d80 <UART_SetConfig+0xf0>
 8005d34:	4b8f      	ldr	r3, [pc, #572]	@ (8005f74 <UART_SetConfig+0x2e4>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d81a      	bhi.n	8005d78 <UART_SetConfig+0xe8>
 8005d42:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <UART_SetConfig+0xb8>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d59 	.word	0x08005d59
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	08005d61 	.word	0x08005d61
 8005d54:	08005d71 	.word	0x08005d71
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5e:	e116      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005d60:	2302      	movs	r3, #2
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d66:	e112      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6e:	e10e      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d76:	e10a      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d7e:	e106      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a7c      	ldr	r2, [pc, #496]	@ (8005f78 <UART_SetConfig+0x2e8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d138      	bne.n	8005dfc <UART_SetConfig+0x16c>
 8005d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f74 <UART_SetConfig+0x2e4>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b0c      	cmp	r3, #12
 8005d96:	d82d      	bhi.n	8005df4 <UART_SetConfig+0x164>
 8005d98:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <UART_SetConfig+0x110>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005dd5 	.word	0x08005dd5
 8005da4:	08005df5 	.word	0x08005df5
 8005da8:	08005df5 	.word	0x08005df5
 8005dac:	08005df5 	.word	0x08005df5
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005df5 	.word	0x08005df5
 8005db8:	08005df5 	.word	0x08005df5
 8005dbc:	08005df5 	.word	0x08005df5
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	08005df5 	.word	0x08005df5
 8005dc8:	08005df5 	.word	0x08005df5
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005ded 	.word	0x08005ded
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dda:	e0d8      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005de2:	e0d4      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005de4:	2304      	movs	r3, #4
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dea:	e0d0      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005dec:	2308      	movs	r3, #8
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df2:	e0cc      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005df4:	2310      	movs	r3, #16
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfa:	e0c8      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a5e      	ldr	r2, [pc, #376]	@ (8005f7c <UART_SetConfig+0x2ec>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d125      	bne.n	8005e52 <UART_SetConfig+0x1c2>
 8005e06:	4b5b      	ldr	r3, [pc, #364]	@ (8005f74 <UART_SetConfig+0x2e4>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e10:	2b30      	cmp	r3, #48	@ 0x30
 8005e12:	d016      	beq.n	8005e42 <UART_SetConfig+0x1b2>
 8005e14:	2b30      	cmp	r3, #48	@ 0x30
 8005e16:	d818      	bhi.n	8005e4a <UART_SetConfig+0x1ba>
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d00a      	beq.n	8005e32 <UART_SetConfig+0x1a2>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d814      	bhi.n	8005e4a <UART_SetConfig+0x1ba>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <UART_SetConfig+0x19a>
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d008      	beq.n	8005e3a <UART_SetConfig+0x1aa>
 8005e28:	e00f      	b.n	8005e4a <UART_SetConfig+0x1ba>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e30:	e0ad      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005e32:	2302      	movs	r3, #2
 8005e34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e38:	e0a9      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005e3a:	2304      	movs	r3, #4
 8005e3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e40:	e0a5      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005e42:	2308      	movs	r3, #8
 8005e44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e48:	e0a1      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005e4a:	2310      	movs	r3, #16
 8005e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e50:	e09d      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a4a      	ldr	r2, [pc, #296]	@ (8005f80 <UART_SetConfig+0x2f0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d125      	bne.n	8005ea8 <UART_SetConfig+0x218>
 8005e5c:	4b45      	ldr	r3, [pc, #276]	@ (8005f74 <UART_SetConfig+0x2e4>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e68:	d016      	beq.n	8005e98 <UART_SetConfig+0x208>
 8005e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e6c:	d818      	bhi.n	8005ea0 <UART_SetConfig+0x210>
 8005e6e:	2b80      	cmp	r3, #128	@ 0x80
 8005e70:	d00a      	beq.n	8005e88 <UART_SetConfig+0x1f8>
 8005e72:	2b80      	cmp	r3, #128	@ 0x80
 8005e74:	d814      	bhi.n	8005ea0 <UART_SetConfig+0x210>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <UART_SetConfig+0x1f0>
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d008      	beq.n	8005e90 <UART_SetConfig+0x200>
 8005e7e:	e00f      	b.n	8005ea0 <UART_SetConfig+0x210>
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e86:	e082      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8e:	e07e      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e96:	e07a      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e9e:	e076      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ea6:	e072      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a35      	ldr	r2, [pc, #212]	@ (8005f84 <UART_SetConfig+0x2f4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d12a      	bne.n	8005f08 <UART_SetConfig+0x278>
 8005eb2:	4b30      	ldr	r3, [pc, #192]	@ (8005f74 <UART_SetConfig+0x2e4>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec0:	d01a      	beq.n	8005ef8 <UART_SetConfig+0x268>
 8005ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec6:	d81b      	bhi.n	8005f00 <UART_SetConfig+0x270>
 8005ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ecc:	d00c      	beq.n	8005ee8 <UART_SetConfig+0x258>
 8005ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed2:	d815      	bhi.n	8005f00 <UART_SetConfig+0x270>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <UART_SetConfig+0x250>
 8005ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005edc:	d008      	beq.n	8005ef0 <UART_SetConfig+0x260>
 8005ede:	e00f      	b.n	8005f00 <UART_SetConfig+0x270>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee6:	e052      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eee:	e04e      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef6:	e04a      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005efe:	e046      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f06:	e042      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a17      	ldr	r2, [pc, #92]	@ (8005f6c <UART_SetConfig+0x2dc>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d13a      	bne.n	8005f88 <UART_SetConfig+0x2f8>
 8005f12:	4b18      	ldr	r3, [pc, #96]	@ (8005f74 <UART_SetConfig+0x2e4>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f20:	d01a      	beq.n	8005f58 <UART_SetConfig+0x2c8>
 8005f22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f26:	d81b      	bhi.n	8005f60 <UART_SetConfig+0x2d0>
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f2c:	d00c      	beq.n	8005f48 <UART_SetConfig+0x2b8>
 8005f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f32:	d815      	bhi.n	8005f60 <UART_SetConfig+0x2d0>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <UART_SetConfig+0x2b0>
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3c:	d008      	beq.n	8005f50 <UART_SetConfig+0x2c0>
 8005f3e:	e00f      	b.n	8005f60 <UART_SetConfig+0x2d0>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f46:	e022      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f4e:	e01e      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f56:	e01a      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f5e:	e016      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f66:	e012      	b.n	8005f8e <UART_SetConfig+0x2fe>
 8005f68:	cfff69f3 	.word	0xcfff69f3
 8005f6c:	40008000 	.word	0x40008000
 8005f70:	40013800 	.word	0x40013800
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40004400 	.word	0x40004400
 8005f7c:	40004800 	.word	0x40004800
 8005f80:	40004c00 	.word	0x40004c00
 8005f84:	40005000 	.word	0x40005000
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4aae      	ldr	r2, [pc, #696]	@ (800624c <UART_SetConfig+0x5bc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	f040 8097 	bne.w	80060c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d823      	bhi.n	8005fea <UART_SetConfig+0x35a>
 8005fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x318>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005fdb 	.word	0x08005fdb
 8005fbc:	08005feb 	.word	0x08005feb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005feb 	.word	0x08005feb
 8005fc8:	08005fe3 	.word	0x08005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fe f9f0 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fd2:	e010      	b.n	8005ff6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b9e      	ldr	r3, [pc, #632]	@ (8006250 <UART_SetConfig+0x5c0>)
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fd8:	e00d      	b.n	8005ff6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fda:	f7fe f97b 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8005fde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fe0:	e009      	b.n	8005ff6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fe8:	e005      	b.n	8005ff6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ff4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8130 	beq.w	800625e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	4a94      	ldr	r2, [pc, #592]	@ (8006254 <UART_SetConfig+0x5c4>)
 8006004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006008:	461a      	mov	r2, r3
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006010:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	429a      	cmp	r2, r3
 8006020:	d305      	bcc.n	800602e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	429a      	cmp	r2, r3
 800602c:	d903      	bls.n	8006036 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006034:	e113      	b.n	800625e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	2200      	movs	r2, #0
 800603a:	60bb      	str	r3, [r7, #8]
 800603c:	60fa      	str	r2, [r7, #12]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006042:	4a84      	ldr	r2, [pc, #528]	@ (8006254 <UART_SetConfig+0x5c4>)
 8006044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006048:	b29b      	uxth	r3, r3
 800604a:	2200      	movs	r2, #0
 800604c:	603b      	str	r3, [r7, #0]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006054:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006058:	f7fa fd18 	bl	8000a8c <__aeabi_uldivmod>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4610      	mov	r0, r2
 8006062:	4619      	mov	r1, r3
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	020b      	lsls	r3, r1, #8
 800606e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006072:	0202      	lsls	r2, r0, #8
 8006074:	6979      	ldr	r1, [r7, #20]
 8006076:	6849      	ldr	r1, [r1, #4]
 8006078:	0849      	lsrs	r1, r1, #1
 800607a:	2000      	movs	r0, #0
 800607c:	460c      	mov	r4, r1
 800607e:	4605      	mov	r5, r0
 8006080:	eb12 0804 	adds.w	r8, r2, r4
 8006084:	eb43 0905 	adc.w	r9, r3, r5
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	469a      	mov	sl, r3
 8006090:	4693      	mov	fp, r2
 8006092:	4652      	mov	r2, sl
 8006094:	465b      	mov	r3, fp
 8006096:	4640      	mov	r0, r8
 8006098:	4649      	mov	r1, r9
 800609a:	f7fa fcf7 	bl	8000a8c <__aeabi_uldivmod>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4613      	mov	r3, r2
 80060a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ac:	d308      	bcc.n	80060c0 <UART_SetConfig+0x430>
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060b4:	d204      	bcs.n	80060c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6a3a      	ldr	r2, [r7, #32]
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	e0ce      	b.n	800625e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060c6:	e0ca      	b.n	800625e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d0:	d166      	bne.n	80061a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80060d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d827      	bhi.n	800612a <UART_SetConfig+0x49a>
 80060da:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <UART_SetConfig+0x450>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	08006105 	.word	0x08006105
 80060e4:	0800610d 	.word	0x0800610d
 80060e8:	08006115 	.word	0x08006115
 80060ec:	0800612b 	.word	0x0800612b
 80060f0:	0800611b 	.word	0x0800611b
 80060f4:	0800612b 	.word	0x0800612b
 80060f8:	0800612b 	.word	0x0800612b
 80060fc:	0800612b 	.word	0x0800612b
 8006100:	08006123 	.word	0x08006123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006104:	f7fe f954 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 8006108:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800610a:	e014      	b.n	8006136 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800610c:	f7fe f966 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 8006110:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006112:	e010      	b.n	8006136 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006114:	4b4e      	ldr	r3, [pc, #312]	@ (8006250 <UART_SetConfig+0x5c0>)
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006118:	e00d      	b.n	8006136 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611a:	f7fe f8db 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 800611e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006120:	e009      	b.n	8006136 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006128:	e005      	b.n	8006136 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8090 	beq.w	800625e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	4a44      	ldr	r2, [pc, #272]	@ (8006254 <UART_SetConfig+0x5c4>)
 8006144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006148:	461a      	mov	r2, r3
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006150:	005a      	lsls	r2, r3, #1
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	441a      	add	r2, r3
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006162:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	2b0f      	cmp	r3, #15
 8006168:	d916      	bls.n	8006198 <UART_SetConfig+0x508>
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006170:	d212      	bcs.n	8006198 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f023 030f 	bic.w	r3, r3, #15
 800617a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	b29b      	uxth	r3, r3
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	b29a      	uxth	r2, r3
 8006188:	8bfb      	ldrh	r3, [r7, #30]
 800618a:	4313      	orrs	r3, r2
 800618c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	8bfa      	ldrh	r2, [r7, #30]
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	e062      	b.n	800625e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800619e:	e05e      	b.n	800625e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d828      	bhi.n	80061fa <UART_SetConfig+0x56a>
 80061a8:	a201      	add	r2, pc, #4	@ (adr r2, 80061b0 <UART_SetConfig+0x520>)
 80061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ae:	bf00      	nop
 80061b0:	080061d5 	.word	0x080061d5
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	080061fb 	.word	0x080061fb
 80061c0:	080061eb 	.word	0x080061eb
 80061c4:	080061fb 	.word	0x080061fb
 80061c8:	080061fb 	.word	0x080061fb
 80061cc:	080061fb 	.word	0x080061fb
 80061d0:	080061f3 	.word	0x080061f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d4:	f7fe f8ec 	bl	80043b0 <HAL_RCC_GetPCLK1Freq>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061da:	e014      	b.n	8006206 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061dc:	f7fe f8fe 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 80061e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061e2:	e010      	b.n	8006206 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006250 <UART_SetConfig+0x5c0>)
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061e8:	e00d      	b.n	8006206 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ea:	f7fe f873 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 80061ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061f0:	e009      	b.n	8006206 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061f8:	e005      	b.n	8006206 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006204:	bf00      	nop
    }

    if (pclk != 0U)
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	2b00      	cmp	r3, #0
 800620a:	d028      	beq.n	800625e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	4a10      	ldr	r2, [pc, #64]	@ (8006254 <UART_SetConfig+0x5c4>)
 8006212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006216:	461a      	mov	r2, r3
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	fbb3 f2f2 	udiv	r2, r3, r2
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	441a      	add	r2, r3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	2b0f      	cmp	r3, #15
 8006234:	d910      	bls.n	8006258 <UART_SetConfig+0x5c8>
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623c:	d20c      	bcs.n	8006258 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	b29a      	uxth	r2, r3
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60da      	str	r2, [r3, #12]
 8006248:	e009      	b.n	800625e <UART_SetConfig+0x5ce>
 800624a:	bf00      	nop
 800624c:	40008000 	.word	0x40008000
 8006250:	00f42400 	.word	0x00f42400
 8006254:	08008d84 	.word	0x08008d84
      }
      else
      {
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2201      	movs	r2, #1
 8006262:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2201      	movs	r2, #1
 800626a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2200      	movs	r2, #0
 8006278:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800627a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800627e:	4618      	mov	r0, r3
 8006280:	3730      	adds	r7, #48	@ 0x30
 8006282:	46bd      	mov	sp, r7
 8006284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01a      	beq.n	800639e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006386:	d10a      	bne.n	800639e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]
  }
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b098      	sub	sp, #96	@ 0x60
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063dc:	f7fb fff6 	bl	80023cc <HAL_GetTick>
 80063e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d12f      	bne.n	8006450 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f8:	2200      	movs	r2, #0
 80063fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f88e 	bl	8006520 <UART_WaitOnFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d022      	beq.n	8006450 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800641e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006428:	647b      	str	r3, [r7, #68]	@ 0x44
 800642a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800642e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e6      	bne.n	800640a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e063      	b.n	8006518 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b04      	cmp	r3, #4
 800645c:	d149      	bne.n	80064f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800645e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006466:	2200      	movs	r2, #0
 8006468:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f857 	bl	8006520 <UART_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d03c      	beq.n	80064f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	623b      	str	r3, [r7, #32]
   return(result);
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800648c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006496:	633b      	str	r3, [r7, #48]	@ 0x30
 8006498:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800649c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e6      	bne.n	8006478 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3308      	adds	r3, #8
 80064b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ca:	61fa      	str	r2, [r7, #28]
 80064cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	69b9      	ldr	r1, [r7, #24]
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	617b      	str	r3, [r7, #20]
   return(result);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e5      	bne.n	80064aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e012      	b.n	8006518 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3758      	adds	r7, #88	@ 0x58
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	4613      	mov	r3, r2
 800652e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006530:	e04f      	b.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d04b      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653a:	f7fb ff47 	bl	80023cc <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	429a      	cmp	r2, r3
 8006548:	d302      	bcc.n	8006550 <UART_WaitOnFlagUntilTimeout+0x30>
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e04e      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	d037      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b80      	cmp	r3, #128	@ 0x80
 8006566:	d034      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b40      	cmp	r3, #64	@ 0x40
 800656c:	d031      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b08      	cmp	r3, #8
 800657a:	d110      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2208      	movs	r2, #8
 8006582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f838 	bl	80065fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2208      	movs	r2, #8
 800658e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e029      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065ac:	d111      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f81e 	bl	80065fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e00f      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d0a0      	beq.n	8006532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b095      	sub	sp, #84	@ 0x54
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660a:	e853 3f00 	ldrex	r3, [r3]
 800660e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006620:	643b      	str	r3, [r7, #64]	@ 0x40
 8006622:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006624:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006626:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006628:	e841 2300 	strex	r3, r2, [r1]
 800662c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e6      	bne.n	8006602 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3308      	adds	r3, #8
 800663a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	61fb      	str	r3, [r7, #28]
   return(result);
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006658:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800665a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800665e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e3      	bne.n	8006634 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d118      	bne.n	80066a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	60bb      	str	r3, [r7, #8]
   return(result);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f023 0310 	bic.w	r3, r3, #16
 8006688:	647b      	str	r3, [r7, #68]	@ 0x44
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6979      	ldr	r1, [r7, #20]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	613b      	str	r3, [r7, #16]
   return(result);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e6      	bne.n	8006674 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066ba:	bf00      	nop
 80066bc:	3754      	adds	r7, #84	@ 0x54
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff fabd 	bl	8005c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b088      	sub	sp, #32
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	60bb      	str	r3, [r7, #8]
   return(result);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6979      	ldr	r1, [r7, #20]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	613b      	str	r3, [r7, #16]
   return(result);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e6      	bne.n	80066fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fa88 	bl	8005c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006740:	bf00      	nop
 8006742:	3720      	adds	r7, #32
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_UARTEx_DisableFifoMode+0x16>
 8006796:	2302      	movs	r3, #2
 8006798:	e027      	b.n	80067ea <HAL_UARTEx_DisableFifoMode+0x66>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2224      	movs	r2, #36	@ 0x24
 80067a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0201 	bic.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80067c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800680a:	2302      	movs	r3, #2
 800680c:	e02d      	b.n	800686a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2224      	movs	r2, #36	@ 0x24
 800681a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0201 	bic.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f850 	bl	80068f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006886:	2302      	movs	r3, #2
 8006888:	e02d      	b.n	80068e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2224      	movs	r2, #36	@ 0x24
 8006896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f812 	bl	80068f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006910:	e031      	b.n	8006976 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006912:	2308      	movs	r3, #8
 8006914:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006916:	2308      	movs	r3, #8
 8006918:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	0e5b      	lsrs	r3, r3, #25
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	0f5b      	lsrs	r3, r3, #29
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	7b3a      	ldrb	r2, [r7, #12]
 800693e:	4911      	ldr	r1, [pc, #68]	@ (8006984 <UARTEx_SetNbDataToProcess+0x94>)
 8006940:	5c8a      	ldrb	r2, [r1, r2]
 8006942:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006946:	7b3a      	ldrb	r2, [r7, #12]
 8006948:	490f      	ldr	r1, [pc, #60]	@ (8006988 <UARTEx_SetNbDataToProcess+0x98>)
 800694a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800694c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	7b7a      	ldrb	r2, [r7, #13]
 800695c:	4909      	ldr	r1, [pc, #36]	@ (8006984 <UARTEx_SetNbDataToProcess+0x94>)
 800695e:	5c8a      	ldrb	r2, [r1, r2]
 8006960:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006964:	7b7a      	ldrb	r2, [r7, #13]
 8006966:	4908      	ldr	r1, [pc, #32]	@ (8006988 <UARTEx_SetNbDataToProcess+0x98>)
 8006968:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800696a:	fb93 f3f2 	sdiv	r3, r3, r2
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	08008d9c 	.word	0x08008d9c
 8006988:	08008da4 	.word	0x08008da4

0800698c <std>:
 800698c:	2300      	movs	r3, #0
 800698e:	b510      	push	{r4, lr}
 8006990:	4604      	mov	r4, r0
 8006992:	e9c0 3300 	strd	r3, r3, [r0]
 8006996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800699a:	6083      	str	r3, [r0, #8]
 800699c:	8181      	strh	r1, [r0, #12]
 800699e:	6643      	str	r3, [r0, #100]	@ 0x64
 80069a0:	81c2      	strh	r2, [r0, #14]
 80069a2:	6183      	str	r3, [r0, #24]
 80069a4:	4619      	mov	r1, r3
 80069a6:	2208      	movs	r2, #8
 80069a8:	305c      	adds	r0, #92	@ 0x5c
 80069aa:	f000 fab5 	bl	8006f18 <memset>
 80069ae:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <std+0x58>)
 80069b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80069b2:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <std+0x5c>)
 80069b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069b6:	4b0d      	ldr	r3, [pc, #52]	@ (80069ec <std+0x60>)
 80069b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069ba:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <std+0x64>)
 80069bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80069be:	4b0d      	ldr	r3, [pc, #52]	@ (80069f4 <std+0x68>)
 80069c0:	6224      	str	r4, [r4, #32]
 80069c2:	429c      	cmp	r4, r3
 80069c4:	d006      	beq.n	80069d4 <std+0x48>
 80069c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069ca:	4294      	cmp	r4, r2
 80069cc:	d002      	beq.n	80069d4 <std+0x48>
 80069ce:	33d0      	adds	r3, #208	@ 0xd0
 80069d0:	429c      	cmp	r4, r3
 80069d2:	d105      	bne.n	80069e0 <std+0x54>
 80069d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80069d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069dc:	f000 bb14 	b.w	8007008 <__retarget_lock_init_recursive>
 80069e0:	bd10      	pop	{r4, pc}
 80069e2:	bf00      	nop
 80069e4:	08006d69 	.word	0x08006d69
 80069e8:	08006d8b 	.word	0x08006d8b
 80069ec:	08006dc3 	.word	0x08006dc3
 80069f0:	08006de7 	.word	0x08006de7
 80069f4:	20000364 	.word	0x20000364

080069f8 <stdio_exit_handler>:
 80069f8:	4a02      	ldr	r2, [pc, #8]	@ (8006a04 <stdio_exit_handler+0xc>)
 80069fa:	4903      	ldr	r1, [pc, #12]	@ (8006a08 <stdio_exit_handler+0x10>)
 80069fc:	4803      	ldr	r0, [pc, #12]	@ (8006a0c <stdio_exit_handler+0x14>)
 80069fe:	f000 b869 	b.w	8006ad4 <_fwalk_sglue>
 8006a02:	bf00      	nop
 8006a04:	20000030 	.word	0x20000030
 8006a08:	080078b9 	.word	0x080078b9
 8006a0c:	20000040 	.word	0x20000040

08006a10 <cleanup_stdio>:
 8006a10:	6841      	ldr	r1, [r0, #4]
 8006a12:	4b0c      	ldr	r3, [pc, #48]	@ (8006a44 <cleanup_stdio+0x34>)
 8006a14:	4299      	cmp	r1, r3
 8006a16:	b510      	push	{r4, lr}
 8006a18:	4604      	mov	r4, r0
 8006a1a:	d001      	beq.n	8006a20 <cleanup_stdio+0x10>
 8006a1c:	f000 ff4c 	bl	80078b8 <_fflush_r>
 8006a20:	68a1      	ldr	r1, [r4, #8]
 8006a22:	4b09      	ldr	r3, [pc, #36]	@ (8006a48 <cleanup_stdio+0x38>)
 8006a24:	4299      	cmp	r1, r3
 8006a26:	d002      	beq.n	8006a2e <cleanup_stdio+0x1e>
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 ff45 	bl	80078b8 <_fflush_r>
 8006a2e:	68e1      	ldr	r1, [r4, #12]
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <cleanup_stdio+0x3c>)
 8006a32:	4299      	cmp	r1, r3
 8006a34:	d004      	beq.n	8006a40 <cleanup_stdio+0x30>
 8006a36:	4620      	mov	r0, r4
 8006a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a3c:	f000 bf3c 	b.w	80078b8 <_fflush_r>
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	bf00      	nop
 8006a44:	20000364 	.word	0x20000364
 8006a48:	200003cc 	.word	0x200003cc
 8006a4c:	20000434 	.word	0x20000434

08006a50 <global_stdio_init.part.0>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	4b0b      	ldr	r3, [pc, #44]	@ (8006a80 <global_stdio_init.part.0+0x30>)
 8006a54:	4c0b      	ldr	r4, [pc, #44]	@ (8006a84 <global_stdio_init.part.0+0x34>)
 8006a56:	4a0c      	ldr	r2, [pc, #48]	@ (8006a88 <global_stdio_init.part.0+0x38>)
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2104      	movs	r1, #4
 8006a60:	f7ff ff94 	bl	800698c <std>
 8006a64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a68:	2201      	movs	r2, #1
 8006a6a:	2109      	movs	r1, #9
 8006a6c:	f7ff ff8e 	bl	800698c <std>
 8006a70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a74:	2202      	movs	r2, #2
 8006a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7a:	2112      	movs	r1, #18
 8006a7c:	f7ff bf86 	b.w	800698c <std>
 8006a80:	2000049c 	.word	0x2000049c
 8006a84:	20000364 	.word	0x20000364
 8006a88:	080069f9 	.word	0x080069f9

08006a8c <__sfp_lock_acquire>:
 8006a8c:	4801      	ldr	r0, [pc, #4]	@ (8006a94 <__sfp_lock_acquire+0x8>)
 8006a8e:	f000 babc 	b.w	800700a <__retarget_lock_acquire_recursive>
 8006a92:	bf00      	nop
 8006a94:	200004a5 	.word	0x200004a5

08006a98 <__sfp_lock_release>:
 8006a98:	4801      	ldr	r0, [pc, #4]	@ (8006aa0 <__sfp_lock_release+0x8>)
 8006a9a:	f000 bab7 	b.w	800700c <__retarget_lock_release_recursive>
 8006a9e:	bf00      	nop
 8006aa0:	200004a5 	.word	0x200004a5

08006aa4 <__sinit>:
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	f7ff fff0 	bl	8006a8c <__sfp_lock_acquire>
 8006aac:	6a23      	ldr	r3, [r4, #32]
 8006aae:	b11b      	cbz	r3, 8006ab8 <__sinit+0x14>
 8006ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab4:	f7ff bff0 	b.w	8006a98 <__sfp_lock_release>
 8006ab8:	4b04      	ldr	r3, [pc, #16]	@ (8006acc <__sinit+0x28>)
 8006aba:	6223      	str	r3, [r4, #32]
 8006abc:	4b04      	ldr	r3, [pc, #16]	@ (8006ad0 <__sinit+0x2c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1f5      	bne.n	8006ab0 <__sinit+0xc>
 8006ac4:	f7ff ffc4 	bl	8006a50 <global_stdio_init.part.0>
 8006ac8:	e7f2      	b.n	8006ab0 <__sinit+0xc>
 8006aca:	bf00      	nop
 8006acc:	08006a11 	.word	0x08006a11
 8006ad0:	2000049c 	.word	0x2000049c

08006ad4 <_fwalk_sglue>:
 8006ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad8:	4607      	mov	r7, r0
 8006ada:	4688      	mov	r8, r1
 8006adc:	4614      	mov	r4, r2
 8006ade:	2600      	movs	r6, #0
 8006ae0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ae4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ae8:	d505      	bpl.n	8006af6 <_fwalk_sglue+0x22>
 8006aea:	6824      	ldr	r4, [r4, #0]
 8006aec:	2c00      	cmp	r4, #0
 8006aee:	d1f7      	bne.n	8006ae0 <_fwalk_sglue+0xc>
 8006af0:	4630      	mov	r0, r6
 8006af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af6:	89ab      	ldrh	r3, [r5, #12]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d907      	bls.n	8006b0c <_fwalk_sglue+0x38>
 8006afc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b00:	3301      	adds	r3, #1
 8006b02:	d003      	beq.n	8006b0c <_fwalk_sglue+0x38>
 8006b04:	4629      	mov	r1, r5
 8006b06:	4638      	mov	r0, r7
 8006b08:	47c0      	blx	r8
 8006b0a:	4306      	orrs	r6, r0
 8006b0c:	3568      	adds	r5, #104	@ 0x68
 8006b0e:	e7e9      	b.n	8006ae4 <_fwalk_sglue+0x10>

08006b10 <iprintf>:
 8006b10:	b40f      	push	{r0, r1, r2, r3}
 8006b12:	b507      	push	{r0, r1, r2, lr}
 8006b14:	4906      	ldr	r1, [pc, #24]	@ (8006b30 <iprintf+0x20>)
 8006b16:	ab04      	add	r3, sp, #16
 8006b18:	6808      	ldr	r0, [r1, #0]
 8006b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1e:	6881      	ldr	r1, [r0, #8]
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	f000 fb9f 	bl	8007264 <_vfiprintf_r>
 8006b26:	b003      	add	sp, #12
 8006b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b2c:	b004      	add	sp, #16
 8006b2e:	4770      	bx	lr
 8006b30:	2000003c 	.word	0x2000003c

08006b34 <_puts_r>:
 8006b34:	6a03      	ldr	r3, [r0, #32]
 8006b36:	b570      	push	{r4, r5, r6, lr}
 8006b38:	6884      	ldr	r4, [r0, #8]
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	460e      	mov	r6, r1
 8006b3e:	b90b      	cbnz	r3, 8006b44 <_puts_r+0x10>
 8006b40:	f7ff ffb0 	bl	8006aa4 <__sinit>
 8006b44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b46:	07db      	lsls	r3, r3, #31
 8006b48:	d405      	bmi.n	8006b56 <_puts_r+0x22>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	0598      	lsls	r0, r3, #22
 8006b4e:	d402      	bmi.n	8006b56 <_puts_r+0x22>
 8006b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b52:	f000 fa5a 	bl	800700a <__retarget_lock_acquire_recursive>
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	0719      	lsls	r1, r3, #28
 8006b5a:	d502      	bpl.n	8006b62 <_puts_r+0x2e>
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d135      	bne.n	8006bce <_puts_r+0x9a>
 8006b62:	4621      	mov	r1, r4
 8006b64:	4628      	mov	r0, r5
 8006b66:	f000 f981 	bl	8006e6c <__swsetup_r>
 8006b6a:	b380      	cbz	r0, 8006bce <_puts_r+0x9a>
 8006b6c:	f04f 35ff 	mov.w	r5, #4294967295
 8006b70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b72:	07da      	lsls	r2, r3, #31
 8006b74:	d405      	bmi.n	8006b82 <_puts_r+0x4e>
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	059b      	lsls	r3, r3, #22
 8006b7a:	d402      	bmi.n	8006b82 <_puts_r+0x4e>
 8006b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b7e:	f000 fa45 	bl	800700c <__retarget_lock_release_recursive>
 8006b82:	4628      	mov	r0, r5
 8006b84:	bd70      	pop	{r4, r5, r6, pc}
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da04      	bge.n	8006b94 <_puts_r+0x60>
 8006b8a:	69a2      	ldr	r2, [r4, #24]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	dc17      	bgt.n	8006bc0 <_puts_r+0x8c>
 8006b90:	290a      	cmp	r1, #10
 8006b92:	d015      	beq.n	8006bc0 <_puts_r+0x8c>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	6022      	str	r2, [r4, #0]
 8006b9a:	7019      	strb	r1, [r3, #0]
 8006b9c:	68a3      	ldr	r3, [r4, #8]
 8006b9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	60a3      	str	r3, [r4, #8]
 8006ba6:	2900      	cmp	r1, #0
 8006ba8:	d1ed      	bne.n	8006b86 <_puts_r+0x52>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da11      	bge.n	8006bd2 <_puts_r+0x9e>
 8006bae:	4622      	mov	r2, r4
 8006bb0:	210a      	movs	r1, #10
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 f91b 	bl	8006dee <__swbuf_r>
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d0d7      	beq.n	8006b6c <_puts_r+0x38>
 8006bbc:	250a      	movs	r5, #10
 8006bbe:	e7d7      	b.n	8006b70 <_puts_r+0x3c>
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f000 f913 	bl	8006dee <__swbuf_r>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d1e7      	bne.n	8006b9c <_puts_r+0x68>
 8006bcc:	e7ce      	b.n	8006b6c <_puts_r+0x38>
 8006bce:	3e01      	subs	r6, #1
 8006bd0:	e7e4      	b.n	8006b9c <_puts_r+0x68>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	6022      	str	r2, [r4, #0]
 8006bd8:	220a      	movs	r2, #10
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	e7ee      	b.n	8006bbc <_puts_r+0x88>
	...

08006be0 <puts>:
 8006be0:	4b02      	ldr	r3, [pc, #8]	@ (8006bec <puts+0xc>)
 8006be2:	4601      	mov	r1, r0
 8006be4:	6818      	ldr	r0, [r3, #0]
 8006be6:	f7ff bfa5 	b.w	8006b34 <_puts_r>
 8006bea:	bf00      	nop
 8006bec:	2000003c 	.word	0x2000003c

08006bf0 <setbuf>:
 8006bf0:	fab1 f281 	clz	r2, r1
 8006bf4:	0952      	lsrs	r2, r2, #5
 8006bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bfa:	0052      	lsls	r2, r2, #1
 8006bfc:	f000 b800 	b.w	8006c00 <setvbuf>

08006c00 <setvbuf>:
 8006c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c04:	461d      	mov	r5, r3
 8006c06:	4b57      	ldr	r3, [pc, #348]	@ (8006d64 <setvbuf+0x164>)
 8006c08:	681f      	ldr	r7, [r3, #0]
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	460e      	mov	r6, r1
 8006c0e:	4690      	mov	r8, r2
 8006c10:	b127      	cbz	r7, 8006c1c <setvbuf+0x1c>
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	b913      	cbnz	r3, 8006c1c <setvbuf+0x1c>
 8006c16:	4638      	mov	r0, r7
 8006c18:	f7ff ff44 	bl	8006aa4 <__sinit>
 8006c1c:	f1b8 0f02 	cmp.w	r8, #2
 8006c20:	d006      	beq.n	8006c30 <setvbuf+0x30>
 8006c22:	f1b8 0f01 	cmp.w	r8, #1
 8006c26:	f200 809a 	bhi.w	8006d5e <setvbuf+0x15e>
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	f2c0 8097 	blt.w	8006d5e <setvbuf+0x15e>
 8006c30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c32:	07d9      	lsls	r1, r3, #31
 8006c34:	d405      	bmi.n	8006c42 <setvbuf+0x42>
 8006c36:	89a3      	ldrh	r3, [r4, #12]
 8006c38:	059a      	lsls	r2, r3, #22
 8006c3a:	d402      	bmi.n	8006c42 <setvbuf+0x42>
 8006c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c3e:	f000 f9e4 	bl	800700a <__retarget_lock_acquire_recursive>
 8006c42:	4621      	mov	r1, r4
 8006c44:	4638      	mov	r0, r7
 8006c46:	f000 fe37 	bl	80078b8 <_fflush_r>
 8006c4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c4c:	b141      	cbz	r1, 8006c60 <setvbuf+0x60>
 8006c4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c52:	4299      	cmp	r1, r3
 8006c54:	d002      	beq.n	8006c5c <setvbuf+0x5c>
 8006c56:	4638      	mov	r0, r7
 8006c58:	f000 f9da 	bl	8007010 <_free_r>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c60:	2300      	movs	r3, #0
 8006c62:	61a3      	str	r3, [r4, #24]
 8006c64:	6063      	str	r3, [r4, #4]
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	061b      	lsls	r3, r3, #24
 8006c6a:	d503      	bpl.n	8006c74 <setvbuf+0x74>
 8006c6c:	6921      	ldr	r1, [r4, #16]
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f000 f9ce 	bl	8007010 <_free_r>
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	f1b8 0f02 	cmp.w	r8, #2
 8006c82:	81a3      	strh	r3, [r4, #12]
 8006c84:	d061      	beq.n	8006d4a <setvbuf+0x14a>
 8006c86:	ab01      	add	r3, sp, #4
 8006c88:	466a      	mov	r2, sp
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f000 fe3b 	bl	8007908 <__swhatbuf_r>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	4318      	orrs	r0, r3
 8006c96:	81a0      	strh	r0, [r4, #12]
 8006c98:	bb2d      	cbnz	r5, 8006ce6 <setvbuf+0xe6>
 8006c9a:	9d00      	ldr	r5, [sp, #0]
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f000 fa01 	bl	80070a4 <malloc>
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d152      	bne.n	8006d4e <setvbuf+0x14e>
 8006ca8:	f8dd 9000 	ldr.w	r9, [sp]
 8006cac:	45a9      	cmp	r9, r5
 8006cae:	d140      	bne.n	8006d32 <setvbuf+0x132>
 8006cb0:	f04f 35ff 	mov.w	r5, #4294967295
 8006cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb8:	f043 0202 	orr.w	r2, r3, #2
 8006cbc:	81a2      	strh	r2, [r4, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	60a2      	str	r2, [r4, #8]
 8006cc2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006cc6:	6022      	str	r2, [r4, #0]
 8006cc8:	6122      	str	r2, [r4, #16]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	6162      	str	r2, [r4, #20]
 8006cce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cd0:	07d6      	lsls	r6, r2, #31
 8006cd2:	d404      	bmi.n	8006cde <setvbuf+0xde>
 8006cd4:	0598      	lsls	r0, r3, #22
 8006cd6:	d402      	bmi.n	8006cde <setvbuf+0xde>
 8006cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cda:	f000 f997 	bl	800700c <__retarget_lock_release_recursive>
 8006cde:	4628      	mov	r0, r5
 8006ce0:	b003      	add	sp, #12
 8006ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	d0d8      	beq.n	8006c9c <setvbuf+0x9c>
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	b913      	cbnz	r3, 8006cf4 <setvbuf+0xf4>
 8006cee:	4638      	mov	r0, r7
 8006cf0:	f7ff fed8 	bl	8006aa4 <__sinit>
 8006cf4:	f1b8 0f01 	cmp.w	r8, #1
 8006cf8:	bf08      	it	eq
 8006cfa:	89a3      	ldrheq	r3, [r4, #12]
 8006cfc:	6026      	str	r6, [r4, #0]
 8006cfe:	bf04      	itt	eq
 8006d00:	f043 0301 	orreq.w	r3, r3, #1
 8006d04:	81a3      	strheq	r3, [r4, #12]
 8006d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d0a:	f013 0208 	ands.w	r2, r3, #8
 8006d0e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006d12:	d01e      	beq.n	8006d52 <setvbuf+0x152>
 8006d14:	07d9      	lsls	r1, r3, #31
 8006d16:	bf41      	itttt	mi
 8006d18:	2200      	movmi	r2, #0
 8006d1a:	426d      	negmi	r5, r5
 8006d1c:	60a2      	strmi	r2, [r4, #8]
 8006d1e:	61a5      	strmi	r5, [r4, #24]
 8006d20:	bf58      	it	pl
 8006d22:	60a5      	strpl	r5, [r4, #8]
 8006d24:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d26:	07d2      	lsls	r2, r2, #31
 8006d28:	d401      	bmi.n	8006d2e <setvbuf+0x12e>
 8006d2a:	059b      	lsls	r3, r3, #22
 8006d2c:	d513      	bpl.n	8006d56 <setvbuf+0x156>
 8006d2e:	2500      	movs	r5, #0
 8006d30:	e7d5      	b.n	8006cde <setvbuf+0xde>
 8006d32:	4648      	mov	r0, r9
 8006d34:	f000 f9b6 	bl	80070a4 <malloc>
 8006d38:	4606      	mov	r6, r0
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0b8      	beq.n	8006cb0 <setvbuf+0xb0>
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	464d      	mov	r5, r9
 8006d48:	e7cf      	b.n	8006cea <setvbuf+0xea>
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	e7b2      	b.n	8006cb4 <setvbuf+0xb4>
 8006d4e:	46a9      	mov	r9, r5
 8006d50:	e7f5      	b.n	8006d3e <setvbuf+0x13e>
 8006d52:	60a2      	str	r2, [r4, #8]
 8006d54:	e7e6      	b.n	8006d24 <setvbuf+0x124>
 8006d56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d58:	f000 f958 	bl	800700c <__retarget_lock_release_recursive>
 8006d5c:	e7e7      	b.n	8006d2e <setvbuf+0x12e>
 8006d5e:	f04f 35ff 	mov.w	r5, #4294967295
 8006d62:	e7bc      	b.n	8006cde <setvbuf+0xde>
 8006d64:	2000003c 	.word	0x2000003c

08006d68 <__sread>:
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d70:	f000 f8fc 	bl	8006f6c <_read_r>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	bfab      	itete	ge
 8006d78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d7c:	181b      	addge	r3, r3, r0
 8006d7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d82:	bfac      	ite	ge
 8006d84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d86:	81a3      	strhlt	r3, [r4, #12]
 8006d88:	bd10      	pop	{r4, pc}

08006d8a <__swrite>:
 8006d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8e:	461f      	mov	r7, r3
 8006d90:	898b      	ldrh	r3, [r1, #12]
 8006d92:	05db      	lsls	r3, r3, #23
 8006d94:	4605      	mov	r5, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	4616      	mov	r6, r2
 8006d9a:	d505      	bpl.n	8006da8 <__swrite+0x1e>
 8006d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da0:	2302      	movs	r3, #2
 8006da2:	2200      	movs	r2, #0
 8006da4:	f000 f8d0 	bl	8006f48 <_lseek_r>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	4632      	mov	r2, r6
 8006db6:	463b      	mov	r3, r7
 8006db8:	4628      	mov	r0, r5
 8006dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	f000 b8e7 	b.w	8006f90 <_write_r>

08006dc2 <__sseek>:
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dca:	f000 f8bd 	bl	8006f48 <_lseek_r>
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	bf15      	itete	ne
 8006dd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dde:	81a3      	strheq	r3, [r4, #12]
 8006de0:	bf18      	it	ne
 8006de2:	81a3      	strhne	r3, [r4, #12]
 8006de4:	bd10      	pop	{r4, pc}

08006de6 <__sclose>:
 8006de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dea:	f000 b89d 	b.w	8006f28 <_close_r>

08006dee <__swbuf_r>:
 8006dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df0:	460e      	mov	r6, r1
 8006df2:	4614      	mov	r4, r2
 8006df4:	4605      	mov	r5, r0
 8006df6:	b118      	cbz	r0, 8006e00 <__swbuf_r+0x12>
 8006df8:	6a03      	ldr	r3, [r0, #32]
 8006dfa:	b90b      	cbnz	r3, 8006e00 <__swbuf_r+0x12>
 8006dfc:	f7ff fe52 	bl	8006aa4 <__sinit>
 8006e00:	69a3      	ldr	r3, [r4, #24]
 8006e02:	60a3      	str	r3, [r4, #8]
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	071a      	lsls	r2, r3, #28
 8006e08:	d501      	bpl.n	8006e0e <__swbuf_r+0x20>
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	b943      	cbnz	r3, 8006e20 <__swbuf_r+0x32>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 f82b 	bl	8006e6c <__swsetup_r>
 8006e16:	b118      	cbz	r0, 8006e20 <__swbuf_r+0x32>
 8006e18:	f04f 37ff 	mov.w	r7, #4294967295
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	6922      	ldr	r2, [r4, #16]
 8006e24:	1a98      	subs	r0, r3, r2
 8006e26:	6963      	ldr	r3, [r4, #20]
 8006e28:	b2f6      	uxtb	r6, r6
 8006e2a:	4283      	cmp	r3, r0
 8006e2c:	4637      	mov	r7, r6
 8006e2e:	dc05      	bgt.n	8006e3c <__swbuf_r+0x4e>
 8006e30:	4621      	mov	r1, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 fd40 	bl	80078b8 <_fflush_r>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d1ed      	bne.n	8006e18 <__swbuf_r+0x2a>
 8006e3c:	68a3      	ldr	r3, [r4, #8]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	60a3      	str	r3, [r4, #8]
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	6022      	str	r2, [r4, #0]
 8006e48:	701e      	strb	r6, [r3, #0]
 8006e4a:	6962      	ldr	r2, [r4, #20]
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d004      	beq.n	8006e5c <__swbuf_r+0x6e>
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	07db      	lsls	r3, r3, #31
 8006e56:	d5e1      	bpl.n	8006e1c <__swbuf_r+0x2e>
 8006e58:	2e0a      	cmp	r6, #10
 8006e5a:	d1df      	bne.n	8006e1c <__swbuf_r+0x2e>
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f000 fd2a 	bl	80078b8 <_fflush_r>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d0d9      	beq.n	8006e1c <__swbuf_r+0x2e>
 8006e68:	e7d6      	b.n	8006e18 <__swbuf_r+0x2a>
	...

08006e6c <__swsetup_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4b29      	ldr	r3, [pc, #164]	@ (8006f14 <__swsetup_r+0xa8>)
 8006e70:	4605      	mov	r5, r0
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	460c      	mov	r4, r1
 8006e76:	b118      	cbz	r0, 8006e80 <__swsetup_r+0x14>
 8006e78:	6a03      	ldr	r3, [r0, #32]
 8006e7a:	b90b      	cbnz	r3, 8006e80 <__swsetup_r+0x14>
 8006e7c:	f7ff fe12 	bl	8006aa4 <__sinit>
 8006e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e84:	0719      	lsls	r1, r3, #28
 8006e86:	d422      	bmi.n	8006ece <__swsetup_r+0x62>
 8006e88:	06da      	lsls	r2, r3, #27
 8006e8a:	d407      	bmi.n	8006e9c <__swsetup_r+0x30>
 8006e8c:	2209      	movs	r2, #9
 8006e8e:	602a      	str	r2, [r5, #0]
 8006e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e94:	81a3      	strh	r3, [r4, #12]
 8006e96:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9a:	e033      	b.n	8006f04 <__swsetup_r+0x98>
 8006e9c:	0758      	lsls	r0, r3, #29
 8006e9e:	d512      	bpl.n	8006ec6 <__swsetup_r+0x5a>
 8006ea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ea2:	b141      	cbz	r1, 8006eb6 <__swsetup_r+0x4a>
 8006ea4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ea8:	4299      	cmp	r1, r3
 8006eaa:	d002      	beq.n	8006eb2 <__swsetup_r+0x46>
 8006eac:	4628      	mov	r0, r5
 8006eae:	f000 f8af 	bl	8007010 <_free_r>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ebc:	81a3      	strh	r3, [r4, #12]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6063      	str	r3, [r4, #4]
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	f043 0308 	orr.w	r3, r3, #8
 8006ecc:	81a3      	strh	r3, [r4, #12]
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	b94b      	cbnz	r3, 8006ee6 <__swsetup_r+0x7a>
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006edc:	d003      	beq.n	8006ee6 <__swsetup_r+0x7a>
 8006ede:	4621      	mov	r1, r4
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f000 fd37 	bl	8007954 <__smakebuf_r>
 8006ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eea:	f013 0201 	ands.w	r2, r3, #1
 8006eee:	d00a      	beq.n	8006f06 <__swsetup_r+0x9a>
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	60a2      	str	r2, [r4, #8]
 8006ef4:	6962      	ldr	r2, [r4, #20]
 8006ef6:	4252      	negs	r2, r2
 8006ef8:	61a2      	str	r2, [r4, #24]
 8006efa:	6922      	ldr	r2, [r4, #16]
 8006efc:	b942      	cbnz	r2, 8006f10 <__swsetup_r+0xa4>
 8006efe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f02:	d1c5      	bne.n	8006e90 <__swsetup_r+0x24>
 8006f04:	bd38      	pop	{r3, r4, r5, pc}
 8006f06:	0799      	lsls	r1, r3, #30
 8006f08:	bf58      	it	pl
 8006f0a:	6962      	ldrpl	r2, [r4, #20]
 8006f0c:	60a2      	str	r2, [r4, #8]
 8006f0e:	e7f4      	b.n	8006efa <__swsetup_r+0x8e>
 8006f10:	2000      	movs	r0, #0
 8006f12:	e7f7      	b.n	8006f04 <__swsetup_r+0x98>
 8006f14:	2000003c 	.word	0x2000003c

08006f18 <memset>:
 8006f18:	4402      	add	r2, r0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d100      	bne.n	8006f22 <memset+0xa>
 8006f20:	4770      	bx	lr
 8006f22:	f803 1b01 	strb.w	r1, [r3], #1
 8006f26:	e7f9      	b.n	8006f1c <memset+0x4>

08006f28 <_close_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d06      	ldr	r5, [pc, #24]	@ (8006f44 <_close_r+0x1c>)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	f7fb f93f 	bl	80021b6 <_close>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_close_r+0x1a>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_close_r+0x1a>
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	200004a0 	.word	0x200004a0

08006f48 <_lseek_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d07      	ldr	r5, [pc, #28]	@ (8006f68 <_lseek_r+0x20>)
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	4608      	mov	r0, r1
 8006f50:	4611      	mov	r1, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	602a      	str	r2, [r5, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f7fb f954 	bl	8002204 <_lseek>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_lseek_r+0x1e>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_lseek_r+0x1e>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	200004a0 	.word	0x200004a0

08006f6c <_read_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4d07      	ldr	r5, [pc, #28]	@ (8006f8c <_read_r+0x20>)
 8006f70:	4604      	mov	r4, r0
 8006f72:	4608      	mov	r0, r1
 8006f74:	4611      	mov	r1, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	602a      	str	r2, [r5, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f7fb f8fe 	bl	800217c <_read>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_read_r+0x1e>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_read_r+0x1e>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	200004a0 	.word	0x200004a0

08006f90 <_write_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d07      	ldr	r5, [pc, #28]	@ (8006fb0 <_write_r+0x20>)
 8006f94:	4604      	mov	r4, r0
 8006f96:	4608      	mov	r0, r1
 8006f98:	4611      	mov	r1, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f7fa fb00 	bl	80015a4 <_write>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_write_r+0x1e>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_write_r+0x1e>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	200004a0 	.word	0x200004a0

08006fb4 <__errno>:
 8006fb4:	4b01      	ldr	r3, [pc, #4]	@ (8006fbc <__errno+0x8>)
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	2000003c 	.word	0x2000003c

08006fc0 <__libc_init_array>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	4d0d      	ldr	r5, [pc, #52]	@ (8006ff8 <__libc_init_array+0x38>)
 8006fc4:	4c0d      	ldr	r4, [pc, #52]	@ (8006ffc <__libc_init_array+0x3c>)
 8006fc6:	1b64      	subs	r4, r4, r5
 8006fc8:	10a4      	asrs	r4, r4, #2
 8006fca:	2600      	movs	r6, #0
 8006fcc:	42a6      	cmp	r6, r4
 8006fce:	d109      	bne.n	8006fe4 <__libc_init_array+0x24>
 8006fd0:	4d0b      	ldr	r5, [pc, #44]	@ (8007000 <__libc_init_array+0x40>)
 8006fd2:	4c0c      	ldr	r4, [pc, #48]	@ (8007004 <__libc_init_array+0x44>)
 8006fd4:	f001 fe54 	bl	8008c80 <_init>
 8006fd8:	1b64      	subs	r4, r4, r5
 8006fda:	10a4      	asrs	r4, r4, #2
 8006fdc:	2600      	movs	r6, #0
 8006fde:	42a6      	cmp	r6, r4
 8006fe0:	d105      	bne.n	8006fee <__libc_init_array+0x2e>
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe8:	4798      	blx	r3
 8006fea:	3601      	adds	r6, #1
 8006fec:	e7ee      	b.n	8006fcc <__libc_init_array+0xc>
 8006fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff2:	4798      	blx	r3
 8006ff4:	3601      	adds	r6, #1
 8006ff6:	e7f2      	b.n	8006fde <__libc_init_array+0x1e>
 8006ff8:	08008fc8 	.word	0x08008fc8
 8006ffc:	08008fc8 	.word	0x08008fc8
 8007000:	08008fc8 	.word	0x08008fc8
 8007004:	08008fcc 	.word	0x08008fcc

08007008 <__retarget_lock_init_recursive>:
 8007008:	4770      	bx	lr

0800700a <__retarget_lock_acquire_recursive>:
 800700a:	4770      	bx	lr

0800700c <__retarget_lock_release_recursive>:
 800700c:	4770      	bx	lr
	...

08007010 <_free_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4605      	mov	r5, r0
 8007014:	2900      	cmp	r1, #0
 8007016:	d041      	beq.n	800709c <_free_r+0x8c>
 8007018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701c:	1f0c      	subs	r4, r1, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	bfb8      	it	lt
 8007022:	18e4      	addlt	r4, r4, r3
 8007024:	f000 f8e8 	bl	80071f8 <__malloc_lock>
 8007028:	4a1d      	ldr	r2, [pc, #116]	@ (80070a0 <_free_r+0x90>)
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	b933      	cbnz	r3, 800703c <_free_r+0x2c>
 800702e:	6063      	str	r3, [r4, #4]
 8007030:	6014      	str	r4, [r2, #0]
 8007032:	4628      	mov	r0, r5
 8007034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007038:	f000 b8e4 	b.w	8007204 <__malloc_unlock>
 800703c:	42a3      	cmp	r3, r4
 800703e:	d908      	bls.n	8007052 <_free_r+0x42>
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	1821      	adds	r1, r4, r0
 8007044:	428b      	cmp	r3, r1
 8007046:	bf01      	itttt	eq
 8007048:	6819      	ldreq	r1, [r3, #0]
 800704a:	685b      	ldreq	r3, [r3, #4]
 800704c:	1809      	addeq	r1, r1, r0
 800704e:	6021      	streq	r1, [r4, #0]
 8007050:	e7ed      	b.n	800702e <_free_r+0x1e>
 8007052:	461a      	mov	r2, r3
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b10b      	cbz	r3, 800705c <_free_r+0x4c>
 8007058:	42a3      	cmp	r3, r4
 800705a:	d9fa      	bls.n	8007052 <_free_r+0x42>
 800705c:	6811      	ldr	r1, [r2, #0]
 800705e:	1850      	adds	r0, r2, r1
 8007060:	42a0      	cmp	r0, r4
 8007062:	d10b      	bne.n	800707c <_free_r+0x6c>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	4401      	add	r1, r0
 8007068:	1850      	adds	r0, r2, r1
 800706a:	4283      	cmp	r3, r0
 800706c:	6011      	str	r1, [r2, #0]
 800706e:	d1e0      	bne.n	8007032 <_free_r+0x22>
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	6053      	str	r3, [r2, #4]
 8007076:	4408      	add	r0, r1
 8007078:	6010      	str	r0, [r2, #0]
 800707a:	e7da      	b.n	8007032 <_free_r+0x22>
 800707c:	d902      	bls.n	8007084 <_free_r+0x74>
 800707e:	230c      	movs	r3, #12
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	e7d6      	b.n	8007032 <_free_r+0x22>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	1821      	adds	r1, r4, r0
 8007088:	428b      	cmp	r3, r1
 800708a:	bf04      	itt	eq
 800708c:	6819      	ldreq	r1, [r3, #0]
 800708e:	685b      	ldreq	r3, [r3, #4]
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	bf04      	itt	eq
 8007094:	1809      	addeq	r1, r1, r0
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	6054      	str	r4, [r2, #4]
 800709a:	e7ca      	b.n	8007032 <_free_r+0x22>
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	bf00      	nop
 80070a0:	200004ac 	.word	0x200004ac

080070a4 <malloc>:
 80070a4:	4b02      	ldr	r3, [pc, #8]	@ (80070b0 <malloc+0xc>)
 80070a6:	4601      	mov	r1, r0
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	f000 b825 	b.w	80070f8 <_malloc_r>
 80070ae:	bf00      	nop
 80070b0:	2000003c 	.word	0x2000003c

080070b4 <sbrk_aligned>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	4e0f      	ldr	r6, [pc, #60]	@ (80070f4 <sbrk_aligned+0x40>)
 80070b8:	460c      	mov	r4, r1
 80070ba:	6831      	ldr	r1, [r6, #0]
 80070bc:	4605      	mov	r5, r0
 80070be:	b911      	cbnz	r1, 80070c6 <sbrk_aligned+0x12>
 80070c0:	f000 fca6 	bl	8007a10 <_sbrk_r>
 80070c4:	6030      	str	r0, [r6, #0]
 80070c6:	4621      	mov	r1, r4
 80070c8:	4628      	mov	r0, r5
 80070ca:	f000 fca1 	bl	8007a10 <_sbrk_r>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	d103      	bne.n	80070da <sbrk_aligned+0x26>
 80070d2:	f04f 34ff 	mov.w	r4, #4294967295
 80070d6:	4620      	mov	r0, r4
 80070d8:	bd70      	pop	{r4, r5, r6, pc}
 80070da:	1cc4      	adds	r4, r0, #3
 80070dc:	f024 0403 	bic.w	r4, r4, #3
 80070e0:	42a0      	cmp	r0, r4
 80070e2:	d0f8      	beq.n	80070d6 <sbrk_aligned+0x22>
 80070e4:	1a21      	subs	r1, r4, r0
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 fc92 	bl	8007a10 <_sbrk_r>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d1f2      	bne.n	80070d6 <sbrk_aligned+0x22>
 80070f0:	e7ef      	b.n	80070d2 <sbrk_aligned+0x1e>
 80070f2:	bf00      	nop
 80070f4:	200004a8 	.word	0x200004a8

080070f8 <_malloc_r>:
 80070f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070fc:	1ccd      	adds	r5, r1, #3
 80070fe:	f025 0503 	bic.w	r5, r5, #3
 8007102:	3508      	adds	r5, #8
 8007104:	2d0c      	cmp	r5, #12
 8007106:	bf38      	it	cc
 8007108:	250c      	movcc	r5, #12
 800710a:	2d00      	cmp	r5, #0
 800710c:	4606      	mov	r6, r0
 800710e:	db01      	blt.n	8007114 <_malloc_r+0x1c>
 8007110:	42a9      	cmp	r1, r5
 8007112:	d904      	bls.n	800711e <_malloc_r+0x26>
 8007114:	230c      	movs	r3, #12
 8007116:	6033      	str	r3, [r6, #0]
 8007118:	2000      	movs	r0, #0
 800711a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800711e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071f4 <_malloc_r+0xfc>
 8007122:	f000 f869 	bl	80071f8 <__malloc_lock>
 8007126:	f8d8 3000 	ldr.w	r3, [r8]
 800712a:	461c      	mov	r4, r3
 800712c:	bb44      	cbnz	r4, 8007180 <_malloc_r+0x88>
 800712e:	4629      	mov	r1, r5
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff ffbf 	bl	80070b4 <sbrk_aligned>
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	4604      	mov	r4, r0
 800713a:	d158      	bne.n	80071ee <_malloc_r+0xf6>
 800713c:	f8d8 4000 	ldr.w	r4, [r8]
 8007140:	4627      	mov	r7, r4
 8007142:	2f00      	cmp	r7, #0
 8007144:	d143      	bne.n	80071ce <_malloc_r+0xd6>
 8007146:	2c00      	cmp	r4, #0
 8007148:	d04b      	beq.n	80071e2 <_malloc_r+0xea>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	4639      	mov	r1, r7
 800714e:	4630      	mov	r0, r6
 8007150:	eb04 0903 	add.w	r9, r4, r3
 8007154:	f000 fc5c 	bl	8007a10 <_sbrk_r>
 8007158:	4581      	cmp	r9, r0
 800715a:	d142      	bne.n	80071e2 <_malloc_r+0xea>
 800715c:	6821      	ldr	r1, [r4, #0]
 800715e:	1a6d      	subs	r5, r5, r1
 8007160:	4629      	mov	r1, r5
 8007162:	4630      	mov	r0, r6
 8007164:	f7ff ffa6 	bl	80070b4 <sbrk_aligned>
 8007168:	3001      	adds	r0, #1
 800716a:	d03a      	beq.n	80071e2 <_malloc_r+0xea>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	442b      	add	r3, r5
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	f8d8 3000 	ldr.w	r3, [r8]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	bb62      	cbnz	r2, 80071d4 <_malloc_r+0xdc>
 800717a:	f8c8 7000 	str.w	r7, [r8]
 800717e:	e00f      	b.n	80071a0 <_malloc_r+0xa8>
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	1b52      	subs	r2, r2, r5
 8007184:	d420      	bmi.n	80071c8 <_malloc_r+0xd0>
 8007186:	2a0b      	cmp	r2, #11
 8007188:	d917      	bls.n	80071ba <_malloc_r+0xc2>
 800718a:	1961      	adds	r1, r4, r5
 800718c:	42a3      	cmp	r3, r4
 800718e:	6025      	str	r5, [r4, #0]
 8007190:	bf18      	it	ne
 8007192:	6059      	strne	r1, [r3, #4]
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	bf08      	it	eq
 8007198:	f8c8 1000 	streq.w	r1, [r8]
 800719c:	5162      	str	r2, [r4, r5]
 800719e:	604b      	str	r3, [r1, #4]
 80071a0:	4630      	mov	r0, r6
 80071a2:	f000 f82f 	bl	8007204 <__malloc_unlock>
 80071a6:	f104 000b 	add.w	r0, r4, #11
 80071aa:	1d23      	adds	r3, r4, #4
 80071ac:	f020 0007 	bic.w	r0, r0, #7
 80071b0:	1ac2      	subs	r2, r0, r3
 80071b2:	bf1c      	itt	ne
 80071b4:	1a1b      	subne	r3, r3, r0
 80071b6:	50a3      	strne	r3, [r4, r2]
 80071b8:	e7af      	b.n	800711a <_malloc_r+0x22>
 80071ba:	6862      	ldr	r2, [r4, #4]
 80071bc:	42a3      	cmp	r3, r4
 80071be:	bf0c      	ite	eq
 80071c0:	f8c8 2000 	streq.w	r2, [r8]
 80071c4:	605a      	strne	r2, [r3, #4]
 80071c6:	e7eb      	b.n	80071a0 <_malloc_r+0xa8>
 80071c8:	4623      	mov	r3, r4
 80071ca:	6864      	ldr	r4, [r4, #4]
 80071cc:	e7ae      	b.n	800712c <_malloc_r+0x34>
 80071ce:	463c      	mov	r4, r7
 80071d0:	687f      	ldr	r7, [r7, #4]
 80071d2:	e7b6      	b.n	8007142 <_malloc_r+0x4a>
 80071d4:	461a      	mov	r2, r3
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	42a3      	cmp	r3, r4
 80071da:	d1fb      	bne.n	80071d4 <_malloc_r+0xdc>
 80071dc:	2300      	movs	r3, #0
 80071de:	6053      	str	r3, [r2, #4]
 80071e0:	e7de      	b.n	80071a0 <_malloc_r+0xa8>
 80071e2:	230c      	movs	r3, #12
 80071e4:	6033      	str	r3, [r6, #0]
 80071e6:	4630      	mov	r0, r6
 80071e8:	f000 f80c 	bl	8007204 <__malloc_unlock>
 80071ec:	e794      	b.n	8007118 <_malloc_r+0x20>
 80071ee:	6005      	str	r5, [r0, #0]
 80071f0:	e7d6      	b.n	80071a0 <_malloc_r+0xa8>
 80071f2:	bf00      	nop
 80071f4:	200004ac 	.word	0x200004ac

080071f8 <__malloc_lock>:
 80071f8:	4801      	ldr	r0, [pc, #4]	@ (8007200 <__malloc_lock+0x8>)
 80071fa:	f7ff bf06 	b.w	800700a <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	200004a4 	.word	0x200004a4

08007204 <__malloc_unlock>:
 8007204:	4801      	ldr	r0, [pc, #4]	@ (800720c <__malloc_unlock+0x8>)
 8007206:	f7ff bf01 	b.w	800700c <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	200004a4 	.word	0x200004a4

08007210 <__sfputc_r>:
 8007210:	6893      	ldr	r3, [r2, #8]
 8007212:	3b01      	subs	r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	b410      	push	{r4}
 8007218:	6093      	str	r3, [r2, #8]
 800721a:	da08      	bge.n	800722e <__sfputc_r+0x1e>
 800721c:	6994      	ldr	r4, [r2, #24]
 800721e:	42a3      	cmp	r3, r4
 8007220:	db01      	blt.n	8007226 <__sfputc_r+0x16>
 8007222:	290a      	cmp	r1, #10
 8007224:	d103      	bne.n	800722e <__sfputc_r+0x1e>
 8007226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800722a:	f7ff bde0 	b.w	8006dee <__swbuf_r>
 800722e:	6813      	ldr	r3, [r2, #0]
 8007230:	1c58      	adds	r0, r3, #1
 8007232:	6010      	str	r0, [r2, #0]
 8007234:	7019      	strb	r1, [r3, #0]
 8007236:	4608      	mov	r0, r1
 8007238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800723c:	4770      	bx	lr

0800723e <__sfputs_r>:
 800723e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007240:	4606      	mov	r6, r0
 8007242:	460f      	mov	r7, r1
 8007244:	4614      	mov	r4, r2
 8007246:	18d5      	adds	r5, r2, r3
 8007248:	42ac      	cmp	r4, r5
 800724a:	d101      	bne.n	8007250 <__sfputs_r+0x12>
 800724c:	2000      	movs	r0, #0
 800724e:	e007      	b.n	8007260 <__sfputs_r+0x22>
 8007250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007254:	463a      	mov	r2, r7
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff ffda 	bl	8007210 <__sfputc_r>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d1f3      	bne.n	8007248 <__sfputs_r+0xa>
 8007260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007264 <_vfiprintf_r>:
 8007264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007268:	460d      	mov	r5, r1
 800726a:	b09d      	sub	sp, #116	@ 0x74
 800726c:	4614      	mov	r4, r2
 800726e:	4698      	mov	r8, r3
 8007270:	4606      	mov	r6, r0
 8007272:	b118      	cbz	r0, 800727c <_vfiprintf_r+0x18>
 8007274:	6a03      	ldr	r3, [r0, #32]
 8007276:	b90b      	cbnz	r3, 800727c <_vfiprintf_r+0x18>
 8007278:	f7ff fc14 	bl	8006aa4 <__sinit>
 800727c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800727e:	07d9      	lsls	r1, r3, #31
 8007280:	d405      	bmi.n	800728e <_vfiprintf_r+0x2a>
 8007282:	89ab      	ldrh	r3, [r5, #12]
 8007284:	059a      	lsls	r2, r3, #22
 8007286:	d402      	bmi.n	800728e <_vfiprintf_r+0x2a>
 8007288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800728a:	f7ff febe 	bl	800700a <__retarget_lock_acquire_recursive>
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	071b      	lsls	r3, r3, #28
 8007292:	d501      	bpl.n	8007298 <_vfiprintf_r+0x34>
 8007294:	692b      	ldr	r3, [r5, #16]
 8007296:	b99b      	cbnz	r3, 80072c0 <_vfiprintf_r+0x5c>
 8007298:	4629      	mov	r1, r5
 800729a:	4630      	mov	r0, r6
 800729c:	f7ff fde6 	bl	8006e6c <__swsetup_r>
 80072a0:	b170      	cbz	r0, 80072c0 <_vfiprintf_r+0x5c>
 80072a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072a4:	07dc      	lsls	r4, r3, #31
 80072a6:	d504      	bpl.n	80072b2 <_vfiprintf_r+0x4e>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	b01d      	add	sp, #116	@ 0x74
 80072ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	0598      	lsls	r0, r3, #22
 80072b6:	d4f7      	bmi.n	80072a8 <_vfiprintf_r+0x44>
 80072b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ba:	f7ff fea7 	bl	800700c <__retarget_lock_release_recursive>
 80072be:	e7f3      	b.n	80072a8 <_vfiprintf_r+0x44>
 80072c0:	2300      	movs	r3, #0
 80072c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c4:	2320      	movs	r3, #32
 80072c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ce:	2330      	movs	r3, #48	@ 0x30
 80072d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007480 <_vfiprintf_r+0x21c>
 80072d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072d8:	f04f 0901 	mov.w	r9, #1
 80072dc:	4623      	mov	r3, r4
 80072de:	469a      	mov	sl, r3
 80072e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072e4:	b10a      	cbz	r2, 80072ea <_vfiprintf_r+0x86>
 80072e6:	2a25      	cmp	r2, #37	@ 0x25
 80072e8:	d1f9      	bne.n	80072de <_vfiprintf_r+0x7a>
 80072ea:	ebba 0b04 	subs.w	fp, sl, r4
 80072ee:	d00b      	beq.n	8007308 <_vfiprintf_r+0xa4>
 80072f0:	465b      	mov	r3, fp
 80072f2:	4622      	mov	r2, r4
 80072f4:	4629      	mov	r1, r5
 80072f6:	4630      	mov	r0, r6
 80072f8:	f7ff ffa1 	bl	800723e <__sfputs_r>
 80072fc:	3001      	adds	r0, #1
 80072fe:	f000 80a7 	beq.w	8007450 <_vfiprintf_r+0x1ec>
 8007302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007304:	445a      	add	r2, fp
 8007306:	9209      	str	r2, [sp, #36]	@ 0x24
 8007308:	f89a 3000 	ldrb.w	r3, [sl]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 809f 	beq.w	8007450 <_vfiprintf_r+0x1ec>
 8007312:	2300      	movs	r3, #0
 8007314:	f04f 32ff 	mov.w	r2, #4294967295
 8007318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800731c:	f10a 0a01 	add.w	sl, sl, #1
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	9307      	str	r3, [sp, #28]
 8007324:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007328:	931a      	str	r3, [sp, #104]	@ 0x68
 800732a:	4654      	mov	r4, sl
 800732c:	2205      	movs	r2, #5
 800732e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007332:	4853      	ldr	r0, [pc, #332]	@ (8007480 <_vfiprintf_r+0x21c>)
 8007334:	f7f8 ff74 	bl	8000220 <memchr>
 8007338:	9a04      	ldr	r2, [sp, #16]
 800733a:	b9d8      	cbnz	r0, 8007374 <_vfiprintf_r+0x110>
 800733c:	06d1      	lsls	r1, r2, #27
 800733e:	bf44      	itt	mi
 8007340:	2320      	movmi	r3, #32
 8007342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007346:	0713      	lsls	r3, r2, #28
 8007348:	bf44      	itt	mi
 800734a:	232b      	movmi	r3, #43	@ 0x2b
 800734c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007350:	f89a 3000 	ldrb.w	r3, [sl]
 8007354:	2b2a      	cmp	r3, #42	@ 0x2a
 8007356:	d015      	beq.n	8007384 <_vfiprintf_r+0x120>
 8007358:	9a07      	ldr	r2, [sp, #28]
 800735a:	4654      	mov	r4, sl
 800735c:	2000      	movs	r0, #0
 800735e:	f04f 0c0a 	mov.w	ip, #10
 8007362:	4621      	mov	r1, r4
 8007364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007368:	3b30      	subs	r3, #48	@ 0x30
 800736a:	2b09      	cmp	r3, #9
 800736c:	d94b      	bls.n	8007406 <_vfiprintf_r+0x1a2>
 800736e:	b1b0      	cbz	r0, 800739e <_vfiprintf_r+0x13a>
 8007370:	9207      	str	r2, [sp, #28]
 8007372:	e014      	b.n	800739e <_vfiprintf_r+0x13a>
 8007374:	eba0 0308 	sub.w	r3, r0, r8
 8007378:	fa09 f303 	lsl.w	r3, r9, r3
 800737c:	4313      	orrs	r3, r2
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	46a2      	mov	sl, r4
 8007382:	e7d2      	b.n	800732a <_vfiprintf_r+0xc6>
 8007384:	9b03      	ldr	r3, [sp, #12]
 8007386:	1d19      	adds	r1, r3, #4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	9103      	str	r1, [sp, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	bfbb      	ittet	lt
 8007390:	425b      	neglt	r3, r3
 8007392:	f042 0202 	orrlt.w	r2, r2, #2
 8007396:	9307      	strge	r3, [sp, #28]
 8007398:	9307      	strlt	r3, [sp, #28]
 800739a:	bfb8      	it	lt
 800739c:	9204      	strlt	r2, [sp, #16]
 800739e:	7823      	ldrb	r3, [r4, #0]
 80073a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80073a2:	d10a      	bne.n	80073ba <_vfiprintf_r+0x156>
 80073a4:	7863      	ldrb	r3, [r4, #1]
 80073a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073a8:	d132      	bne.n	8007410 <_vfiprintf_r+0x1ac>
 80073aa:	9b03      	ldr	r3, [sp, #12]
 80073ac:	1d1a      	adds	r2, r3, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	9203      	str	r2, [sp, #12]
 80073b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073b6:	3402      	adds	r4, #2
 80073b8:	9305      	str	r3, [sp, #20]
 80073ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007490 <_vfiprintf_r+0x22c>
 80073be:	7821      	ldrb	r1, [r4, #0]
 80073c0:	2203      	movs	r2, #3
 80073c2:	4650      	mov	r0, sl
 80073c4:	f7f8 ff2c 	bl	8000220 <memchr>
 80073c8:	b138      	cbz	r0, 80073da <_vfiprintf_r+0x176>
 80073ca:	9b04      	ldr	r3, [sp, #16]
 80073cc:	eba0 000a 	sub.w	r0, r0, sl
 80073d0:	2240      	movs	r2, #64	@ 0x40
 80073d2:	4082      	lsls	r2, r0
 80073d4:	4313      	orrs	r3, r2
 80073d6:	3401      	adds	r4, #1
 80073d8:	9304      	str	r3, [sp, #16]
 80073da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073de:	4829      	ldr	r0, [pc, #164]	@ (8007484 <_vfiprintf_r+0x220>)
 80073e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073e4:	2206      	movs	r2, #6
 80073e6:	f7f8 ff1b 	bl	8000220 <memchr>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d03f      	beq.n	800746e <_vfiprintf_r+0x20a>
 80073ee:	4b26      	ldr	r3, [pc, #152]	@ (8007488 <_vfiprintf_r+0x224>)
 80073f0:	bb1b      	cbnz	r3, 800743a <_vfiprintf_r+0x1d6>
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	3307      	adds	r3, #7
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	3308      	adds	r3, #8
 80073fc:	9303      	str	r3, [sp, #12]
 80073fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007400:	443b      	add	r3, r7
 8007402:	9309      	str	r3, [sp, #36]	@ 0x24
 8007404:	e76a      	b.n	80072dc <_vfiprintf_r+0x78>
 8007406:	fb0c 3202 	mla	r2, ip, r2, r3
 800740a:	460c      	mov	r4, r1
 800740c:	2001      	movs	r0, #1
 800740e:	e7a8      	b.n	8007362 <_vfiprintf_r+0xfe>
 8007410:	2300      	movs	r3, #0
 8007412:	3401      	adds	r4, #1
 8007414:	9305      	str	r3, [sp, #20]
 8007416:	4619      	mov	r1, r3
 8007418:	f04f 0c0a 	mov.w	ip, #10
 800741c:	4620      	mov	r0, r4
 800741e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007422:	3a30      	subs	r2, #48	@ 0x30
 8007424:	2a09      	cmp	r2, #9
 8007426:	d903      	bls.n	8007430 <_vfiprintf_r+0x1cc>
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0c6      	beq.n	80073ba <_vfiprintf_r+0x156>
 800742c:	9105      	str	r1, [sp, #20]
 800742e:	e7c4      	b.n	80073ba <_vfiprintf_r+0x156>
 8007430:	fb0c 2101 	mla	r1, ip, r1, r2
 8007434:	4604      	mov	r4, r0
 8007436:	2301      	movs	r3, #1
 8007438:	e7f0      	b.n	800741c <_vfiprintf_r+0x1b8>
 800743a:	ab03      	add	r3, sp, #12
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	462a      	mov	r2, r5
 8007440:	4b12      	ldr	r3, [pc, #72]	@ (800748c <_vfiprintf_r+0x228>)
 8007442:	a904      	add	r1, sp, #16
 8007444:	4630      	mov	r0, r6
 8007446:	f3af 8000 	nop.w
 800744a:	4607      	mov	r7, r0
 800744c:	1c78      	adds	r0, r7, #1
 800744e:	d1d6      	bne.n	80073fe <_vfiprintf_r+0x19a>
 8007450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007452:	07d9      	lsls	r1, r3, #31
 8007454:	d405      	bmi.n	8007462 <_vfiprintf_r+0x1fe>
 8007456:	89ab      	ldrh	r3, [r5, #12]
 8007458:	059a      	lsls	r2, r3, #22
 800745a:	d402      	bmi.n	8007462 <_vfiprintf_r+0x1fe>
 800745c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800745e:	f7ff fdd5 	bl	800700c <__retarget_lock_release_recursive>
 8007462:	89ab      	ldrh	r3, [r5, #12]
 8007464:	065b      	lsls	r3, r3, #25
 8007466:	f53f af1f 	bmi.w	80072a8 <_vfiprintf_r+0x44>
 800746a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800746c:	e71e      	b.n	80072ac <_vfiprintf_r+0x48>
 800746e:	ab03      	add	r3, sp, #12
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	462a      	mov	r2, r5
 8007474:	4b05      	ldr	r3, [pc, #20]	@ (800748c <_vfiprintf_r+0x228>)
 8007476:	a904      	add	r1, sp, #16
 8007478:	4630      	mov	r0, r6
 800747a:	f000 f879 	bl	8007570 <_printf_i>
 800747e:	e7e4      	b.n	800744a <_vfiprintf_r+0x1e6>
 8007480:	08008dac 	.word	0x08008dac
 8007484:	08008db6 	.word	0x08008db6
 8007488:	00000000 	.word	0x00000000
 800748c:	0800723f 	.word	0x0800723f
 8007490:	08008db2 	.word	0x08008db2

08007494 <_printf_common>:
 8007494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007498:	4616      	mov	r6, r2
 800749a:	4698      	mov	r8, r3
 800749c:	688a      	ldr	r2, [r1, #8]
 800749e:	690b      	ldr	r3, [r1, #16]
 80074a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074a4:	4293      	cmp	r3, r2
 80074a6:	bfb8      	it	lt
 80074a8:	4613      	movlt	r3, r2
 80074aa:	6033      	str	r3, [r6, #0]
 80074ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074b0:	4607      	mov	r7, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	b10a      	cbz	r2, 80074ba <_printf_common+0x26>
 80074b6:	3301      	adds	r3, #1
 80074b8:	6033      	str	r3, [r6, #0]
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	0699      	lsls	r1, r3, #26
 80074be:	bf42      	ittt	mi
 80074c0:	6833      	ldrmi	r3, [r6, #0]
 80074c2:	3302      	addmi	r3, #2
 80074c4:	6033      	strmi	r3, [r6, #0]
 80074c6:	6825      	ldr	r5, [r4, #0]
 80074c8:	f015 0506 	ands.w	r5, r5, #6
 80074cc:	d106      	bne.n	80074dc <_printf_common+0x48>
 80074ce:	f104 0a19 	add.w	sl, r4, #25
 80074d2:	68e3      	ldr	r3, [r4, #12]
 80074d4:	6832      	ldr	r2, [r6, #0]
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	42ab      	cmp	r3, r5
 80074da:	dc26      	bgt.n	800752a <_printf_common+0x96>
 80074dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074e0:	6822      	ldr	r2, [r4, #0]
 80074e2:	3b00      	subs	r3, #0
 80074e4:	bf18      	it	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	0692      	lsls	r2, r2, #26
 80074ea:	d42b      	bmi.n	8007544 <_printf_common+0xb0>
 80074ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074f0:	4641      	mov	r1, r8
 80074f2:	4638      	mov	r0, r7
 80074f4:	47c8      	blx	r9
 80074f6:	3001      	adds	r0, #1
 80074f8:	d01e      	beq.n	8007538 <_printf_common+0xa4>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	6922      	ldr	r2, [r4, #16]
 80074fe:	f003 0306 	and.w	r3, r3, #6
 8007502:	2b04      	cmp	r3, #4
 8007504:	bf02      	ittt	eq
 8007506:	68e5      	ldreq	r5, [r4, #12]
 8007508:	6833      	ldreq	r3, [r6, #0]
 800750a:	1aed      	subeq	r5, r5, r3
 800750c:	68a3      	ldr	r3, [r4, #8]
 800750e:	bf0c      	ite	eq
 8007510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007514:	2500      	movne	r5, #0
 8007516:	4293      	cmp	r3, r2
 8007518:	bfc4      	itt	gt
 800751a:	1a9b      	subgt	r3, r3, r2
 800751c:	18ed      	addgt	r5, r5, r3
 800751e:	2600      	movs	r6, #0
 8007520:	341a      	adds	r4, #26
 8007522:	42b5      	cmp	r5, r6
 8007524:	d11a      	bne.n	800755c <_printf_common+0xc8>
 8007526:	2000      	movs	r0, #0
 8007528:	e008      	b.n	800753c <_printf_common+0xa8>
 800752a:	2301      	movs	r3, #1
 800752c:	4652      	mov	r2, sl
 800752e:	4641      	mov	r1, r8
 8007530:	4638      	mov	r0, r7
 8007532:	47c8      	blx	r9
 8007534:	3001      	adds	r0, #1
 8007536:	d103      	bne.n	8007540 <_printf_common+0xac>
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007540:	3501      	adds	r5, #1
 8007542:	e7c6      	b.n	80074d2 <_printf_common+0x3e>
 8007544:	18e1      	adds	r1, r4, r3
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	2030      	movs	r0, #48	@ 0x30
 800754a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800754e:	4422      	add	r2, r4
 8007550:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007554:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007558:	3302      	adds	r3, #2
 800755a:	e7c7      	b.n	80074ec <_printf_common+0x58>
 800755c:	2301      	movs	r3, #1
 800755e:	4622      	mov	r2, r4
 8007560:	4641      	mov	r1, r8
 8007562:	4638      	mov	r0, r7
 8007564:	47c8      	blx	r9
 8007566:	3001      	adds	r0, #1
 8007568:	d0e6      	beq.n	8007538 <_printf_common+0xa4>
 800756a:	3601      	adds	r6, #1
 800756c:	e7d9      	b.n	8007522 <_printf_common+0x8e>
	...

08007570 <_printf_i>:
 8007570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007574:	7e0f      	ldrb	r7, [r1, #24]
 8007576:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007578:	2f78      	cmp	r7, #120	@ 0x78
 800757a:	4691      	mov	r9, r2
 800757c:	4680      	mov	r8, r0
 800757e:	460c      	mov	r4, r1
 8007580:	469a      	mov	sl, r3
 8007582:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007586:	d807      	bhi.n	8007598 <_printf_i+0x28>
 8007588:	2f62      	cmp	r7, #98	@ 0x62
 800758a:	d80a      	bhi.n	80075a2 <_printf_i+0x32>
 800758c:	2f00      	cmp	r7, #0
 800758e:	f000 80d2 	beq.w	8007736 <_printf_i+0x1c6>
 8007592:	2f58      	cmp	r7, #88	@ 0x58
 8007594:	f000 80b9 	beq.w	800770a <_printf_i+0x19a>
 8007598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800759c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075a0:	e03a      	b.n	8007618 <_printf_i+0xa8>
 80075a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075a6:	2b15      	cmp	r3, #21
 80075a8:	d8f6      	bhi.n	8007598 <_printf_i+0x28>
 80075aa:	a101      	add	r1, pc, #4	@ (adr r1, 80075b0 <_printf_i+0x40>)
 80075ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075b0:	08007609 	.word	0x08007609
 80075b4:	0800761d 	.word	0x0800761d
 80075b8:	08007599 	.word	0x08007599
 80075bc:	08007599 	.word	0x08007599
 80075c0:	08007599 	.word	0x08007599
 80075c4:	08007599 	.word	0x08007599
 80075c8:	0800761d 	.word	0x0800761d
 80075cc:	08007599 	.word	0x08007599
 80075d0:	08007599 	.word	0x08007599
 80075d4:	08007599 	.word	0x08007599
 80075d8:	08007599 	.word	0x08007599
 80075dc:	0800771d 	.word	0x0800771d
 80075e0:	08007647 	.word	0x08007647
 80075e4:	080076d7 	.word	0x080076d7
 80075e8:	08007599 	.word	0x08007599
 80075ec:	08007599 	.word	0x08007599
 80075f0:	0800773f 	.word	0x0800773f
 80075f4:	08007599 	.word	0x08007599
 80075f8:	08007647 	.word	0x08007647
 80075fc:	08007599 	.word	0x08007599
 8007600:	08007599 	.word	0x08007599
 8007604:	080076df 	.word	0x080076df
 8007608:	6833      	ldr	r3, [r6, #0]
 800760a:	1d1a      	adds	r2, r3, #4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6032      	str	r2, [r6, #0]
 8007610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007618:	2301      	movs	r3, #1
 800761a:	e09d      	b.n	8007758 <_printf_i+0x1e8>
 800761c:	6833      	ldr	r3, [r6, #0]
 800761e:	6820      	ldr	r0, [r4, #0]
 8007620:	1d19      	adds	r1, r3, #4
 8007622:	6031      	str	r1, [r6, #0]
 8007624:	0606      	lsls	r6, r0, #24
 8007626:	d501      	bpl.n	800762c <_printf_i+0xbc>
 8007628:	681d      	ldr	r5, [r3, #0]
 800762a:	e003      	b.n	8007634 <_printf_i+0xc4>
 800762c:	0645      	lsls	r5, r0, #25
 800762e:	d5fb      	bpl.n	8007628 <_printf_i+0xb8>
 8007630:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007634:	2d00      	cmp	r5, #0
 8007636:	da03      	bge.n	8007640 <_printf_i+0xd0>
 8007638:	232d      	movs	r3, #45	@ 0x2d
 800763a:	426d      	negs	r5, r5
 800763c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007640:	4859      	ldr	r0, [pc, #356]	@ (80077a8 <_printf_i+0x238>)
 8007642:	230a      	movs	r3, #10
 8007644:	e011      	b.n	800766a <_printf_i+0xfa>
 8007646:	6821      	ldr	r1, [r4, #0]
 8007648:	6833      	ldr	r3, [r6, #0]
 800764a:	0608      	lsls	r0, r1, #24
 800764c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007650:	d402      	bmi.n	8007658 <_printf_i+0xe8>
 8007652:	0649      	lsls	r1, r1, #25
 8007654:	bf48      	it	mi
 8007656:	b2ad      	uxthmi	r5, r5
 8007658:	2f6f      	cmp	r7, #111	@ 0x6f
 800765a:	4853      	ldr	r0, [pc, #332]	@ (80077a8 <_printf_i+0x238>)
 800765c:	6033      	str	r3, [r6, #0]
 800765e:	bf14      	ite	ne
 8007660:	230a      	movne	r3, #10
 8007662:	2308      	moveq	r3, #8
 8007664:	2100      	movs	r1, #0
 8007666:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800766a:	6866      	ldr	r6, [r4, #4]
 800766c:	60a6      	str	r6, [r4, #8]
 800766e:	2e00      	cmp	r6, #0
 8007670:	bfa2      	ittt	ge
 8007672:	6821      	ldrge	r1, [r4, #0]
 8007674:	f021 0104 	bicge.w	r1, r1, #4
 8007678:	6021      	strge	r1, [r4, #0]
 800767a:	b90d      	cbnz	r5, 8007680 <_printf_i+0x110>
 800767c:	2e00      	cmp	r6, #0
 800767e:	d04b      	beq.n	8007718 <_printf_i+0x1a8>
 8007680:	4616      	mov	r6, r2
 8007682:	fbb5 f1f3 	udiv	r1, r5, r3
 8007686:	fb03 5711 	mls	r7, r3, r1, r5
 800768a:	5dc7      	ldrb	r7, [r0, r7]
 800768c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007690:	462f      	mov	r7, r5
 8007692:	42bb      	cmp	r3, r7
 8007694:	460d      	mov	r5, r1
 8007696:	d9f4      	bls.n	8007682 <_printf_i+0x112>
 8007698:	2b08      	cmp	r3, #8
 800769a:	d10b      	bne.n	80076b4 <_printf_i+0x144>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	07df      	lsls	r7, r3, #31
 80076a0:	d508      	bpl.n	80076b4 <_printf_i+0x144>
 80076a2:	6923      	ldr	r3, [r4, #16]
 80076a4:	6861      	ldr	r1, [r4, #4]
 80076a6:	4299      	cmp	r1, r3
 80076a8:	bfde      	ittt	le
 80076aa:	2330      	movle	r3, #48	@ 0x30
 80076ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076b4:	1b92      	subs	r2, r2, r6
 80076b6:	6122      	str	r2, [r4, #16]
 80076b8:	f8cd a000 	str.w	sl, [sp]
 80076bc:	464b      	mov	r3, r9
 80076be:	aa03      	add	r2, sp, #12
 80076c0:	4621      	mov	r1, r4
 80076c2:	4640      	mov	r0, r8
 80076c4:	f7ff fee6 	bl	8007494 <_printf_common>
 80076c8:	3001      	adds	r0, #1
 80076ca:	d14a      	bne.n	8007762 <_printf_i+0x1f2>
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295
 80076d0:	b004      	add	sp, #16
 80076d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	f043 0320 	orr.w	r3, r3, #32
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	4833      	ldr	r0, [pc, #204]	@ (80077ac <_printf_i+0x23c>)
 80076e0:	2778      	movs	r7, #120	@ 0x78
 80076e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	6831      	ldr	r1, [r6, #0]
 80076ea:	061f      	lsls	r7, r3, #24
 80076ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80076f0:	d402      	bmi.n	80076f8 <_printf_i+0x188>
 80076f2:	065f      	lsls	r7, r3, #25
 80076f4:	bf48      	it	mi
 80076f6:	b2ad      	uxthmi	r5, r5
 80076f8:	6031      	str	r1, [r6, #0]
 80076fa:	07d9      	lsls	r1, r3, #31
 80076fc:	bf44      	itt	mi
 80076fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007702:	6023      	strmi	r3, [r4, #0]
 8007704:	b11d      	cbz	r5, 800770e <_printf_i+0x19e>
 8007706:	2310      	movs	r3, #16
 8007708:	e7ac      	b.n	8007664 <_printf_i+0xf4>
 800770a:	4827      	ldr	r0, [pc, #156]	@ (80077a8 <_printf_i+0x238>)
 800770c:	e7e9      	b.n	80076e2 <_printf_i+0x172>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	f023 0320 	bic.w	r3, r3, #32
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	e7f6      	b.n	8007706 <_printf_i+0x196>
 8007718:	4616      	mov	r6, r2
 800771a:	e7bd      	b.n	8007698 <_printf_i+0x128>
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	6825      	ldr	r5, [r4, #0]
 8007720:	6961      	ldr	r1, [r4, #20]
 8007722:	1d18      	adds	r0, r3, #4
 8007724:	6030      	str	r0, [r6, #0]
 8007726:	062e      	lsls	r6, r5, #24
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	d501      	bpl.n	8007730 <_printf_i+0x1c0>
 800772c:	6019      	str	r1, [r3, #0]
 800772e:	e002      	b.n	8007736 <_printf_i+0x1c6>
 8007730:	0668      	lsls	r0, r5, #25
 8007732:	d5fb      	bpl.n	800772c <_printf_i+0x1bc>
 8007734:	8019      	strh	r1, [r3, #0]
 8007736:	2300      	movs	r3, #0
 8007738:	6123      	str	r3, [r4, #16]
 800773a:	4616      	mov	r6, r2
 800773c:	e7bc      	b.n	80076b8 <_printf_i+0x148>
 800773e:	6833      	ldr	r3, [r6, #0]
 8007740:	1d1a      	adds	r2, r3, #4
 8007742:	6032      	str	r2, [r6, #0]
 8007744:	681e      	ldr	r6, [r3, #0]
 8007746:	6862      	ldr	r2, [r4, #4]
 8007748:	2100      	movs	r1, #0
 800774a:	4630      	mov	r0, r6
 800774c:	f7f8 fd68 	bl	8000220 <memchr>
 8007750:	b108      	cbz	r0, 8007756 <_printf_i+0x1e6>
 8007752:	1b80      	subs	r0, r0, r6
 8007754:	6060      	str	r0, [r4, #4]
 8007756:	6863      	ldr	r3, [r4, #4]
 8007758:	6123      	str	r3, [r4, #16]
 800775a:	2300      	movs	r3, #0
 800775c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007760:	e7aa      	b.n	80076b8 <_printf_i+0x148>
 8007762:	6923      	ldr	r3, [r4, #16]
 8007764:	4632      	mov	r2, r6
 8007766:	4649      	mov	r1, r9
 8007768:	4640      	mov	r0, r8
 800776a:	47d0      	blx	sl
 800776c:	3001      	adds	r0, #1
 800776e:	d0ad      	beq.n	80076cc <_printf_i+0x15c>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	079b      	lsls	r3, r3, #30
 8007774:	d413      	bmi.n	800779e <_printf_i+0x22e>
 8007776:	68e0      	ldr	r0, [r4, #12]
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	4298      	cmp	r0, r3
 800777c:	bfb8      	it	lt
 800777e:	4618      	movlt	r0, r3
 8007780:	e7a6      	b.n	80076d0 <_printf_i+0x160>
 8007782:	2301      	movs	r3, #1
 8007784:	4632      	mov	r2, r6
 8007786:	4649      	mov	r1, r9
 8007788:	4640      	mov	r0, r8
 800778a:	47d0      	blx	sl
 800778c:	3001      	adds	r0, #1
 800778e:	d09d      	beq.n	80076cc <_printf_i+0x15c>
 8007790:	3501      	adds	r5, #1
 8007792:	68e3      	ldr	r3, [r4, #12]
 8007794:	9903      	ldr	r1, [sp, #12]
 8007796:	1a5b      	subs	r3, r3, r1
 8007798:	42ab      	cmp	r3, r5
 800779a:	dcf2      	bgt.n	8007782 <_printf_i+0x212>
 800779c:	e7eb      	b.n	8007776 <_printf_i+0x206>
 800779e:	2500      	movs	r5, #0
 80077a0:	f104 0619 	add.w	r6, r4, #25
 80077a4:	e7f5      	b.n	8007792 <_printf_i+0x222>
 80077a6:	bf00      	nop
 80077a8:	08008dbd 	.word	0x08008dbd
 80077ac:	08008dce 	.word	0x08008dce

080077b0 <__sflush_r>:
 80077b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b8:	0716      	lsls	r6, r2, #28
 80077ba:	4605      	mov	r5, r0
 80077bc:	460c      	mov	r4, r1
 80077be:	d454      	bmi.n	800786a <__sflush_r+0xba>
 80077c0:	684b      	ldr	r3, [r1, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	dc02      	bgt.n	80077cc <__sflush_r+0x1c>
 80077c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dd48      	ble.n	800785e <__sflush_r+0xae>
 80077cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077ce:	2e00      	cmp	r6, #0
 80077d0:	d045      	beq.n	800785e <__sflush_r+0xae>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077d8:	682f      	ldr	r7, [r5, #0]
 80077da:	6a21      	ldr	r1, [r4, #32]
 80077dc:	602b      	str	r3, [r5, #0]
 80077de:	d030      	beq.n	8007842 <__sflush_r+0x92>
 80077e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	0759      	lsls	r1, r3, #29
 80077e6:	d505      	bpl.n	80077f4 <__sflush_r+0x44>
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	1ad2      	subs	r2, r2, r3
 80077ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077ee:	b10b      	cbz	r3, 80077f4 <__sflush_r+0x44>
 80077f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077f2:	1ad2      	subs	r2, r2, r3
 80077f4:	2300      	movs	r3, #0
 80077f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077f8:	6a21      	ldr	r1, [r4, #32]
 80077fa:	4628      	mov	r0, r5
 80077fc:	47b0      	blx	r6
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	d106      	bne.n	8007812 <__sflush_r+0x62>
 8007804:	6829      	ldr	r1, [r5, #0]
 8007806:	291d      	cmp	r1, #29
 8007808:	d82b      	bhi.n	8007862 <__sflush_r+0xb2>
 800780a:	4a2a      	ldr	r2, [pc, #168]	@ (80078b4 <__sflush_r+0x104>)
 800780c:	410a      	asrs	r2, r1
 800780e:	07d6      	lsls	r6, r2, #31
 8007810:	d427      	bmi.n	8007862 <__sflush_r+0xb2>
 8007812:	2200      	movs	r2, #0
 8007814:	6062      	str	r2, [r4, #4]
 8007816:	04d9      	lsls	r1, r3, #19
 8007818:	6922      	ldr	r2, [r4, #16]
 800781a:	6022      	str	r2, [r4, #0]
 800781c:	d504      	bpl.n	8007828 <__sflush_r+0x78>
 800781e:	1c42      	adds	r2, r0, #1
 8007820:	d101      	bne.n	8007826 <__sflush_r+0x76>
 8007822:	682b      	ldr	r3, [r5, #0]
 8007824:	b903      	cbnz	r3, 8007828 <__sflush_r+0x78>
 8007826:	6560      	str	r0, [r4, #84]	@ 0x54
 8007828:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800782a:	602f      	str	r7, [r5, #0]
 800782c:	b1b9      	cbz	r1, 800785e <__sflush_r+0xae>
 800782e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007832:	4299      	cmp	r1, r3
 8007834:	d002      	beq.n	800783c <__sflush_r+0x8c>
 8007836:	4628      	mov	r0, r5
 8007838:	f7ff fbea 	bl	8007010 <_free_r>
 800783c:	2300      	movs	r3, #0
 800783e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007840:	e00d      	b.n	800785e <__sflush_r+0xae>
 8007842:	2301      	movs	r3, #1
 8007844:	4628      	mov	r0, r5
 8007846:	47b0      	blx	r6
 8007848:	4602      	mov	r2, r0
 800784a:	1c50      	adds	r0, r2, #1
 800784c:	d1c9      	bne.n	80077e2 <__sflush_r+0x32>
 800784e:	682b      	ldr	r3, [r5, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0c6      	beq.n	80077e2 <__sflush_r+0x32>
 8007854:	2b1d      	cmp	r3, #29
 8007856:	d001      	beq.n	800785c <__sflush_r+0xac>
 8007858:	2b16      	cmp	r3, #22
 800785a:	d11e      	bne.n	800789a <__sflush_r+0xea>
 800785c:	602f      	str	r7, [r5, #0]
 800785e:	2000      	movs	r0, #0
 8007860:	e022      	b.n	80078a8 <__sflush_r+0xf8>
 8007862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007866:	b21b      	sxth	r3, r3
 8007868:	e01b      	b.n	80078a2 <__sflush_r+0xf2>
 800786a:	690f      	ldr	r7, [r1, #16]
 800786c:	2f00      	cmp	r7, #0
 800786e:	d0f6      	beq.n	800785e <__sflush_r+0xae>
 8007870:	0793      	lsls	r3, r2, #30
 8007872:	680e      	ldr	r6, [r1, #0]
 8007874:	bf08      	it	eq
 8007876:	694b      	ldreq	r3, [r1, #20]
 8007878:	600f      	str	r7, [r1, #0]
 800787a:	bf18      	it	ne
 800787c:	2300      	movne	r3, #0
 800787e:	eba6 0807 	sub.w	r8, r6, r7
 8007882:	608b      	str	r3, [r1, #8]
 8007884:	f1b8 0f00 	cmp.w	r8, #0
 8007888:	dde9      	ble.n	800785e <__sflush_r+0xae>
 800788a:	6a21      	ldr	r1, [r4, #32]
 800788c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800788e:	4643      	mov	r3, r8
 8007890:	463a      	mov	r2, r7
 8007892:	4628      	mov	r0, r5
 8007894:	47b0      	blx	r6
 8007896:	2800      	cmp	r0, #0
 8007898:	dc08      	bgt.n	80078ac <__sflush_r+0xfc>
 800789a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ac:	4407      	add	r7, r0
 80078ae:	eba8 0800 	sub.w	r8, r8, r0
 80078b2:	e7e7      	b.n	8007884 <__sflush_r+0xd4>
 80078b4:	dfbffffe 	.word	0xdfbffffe

080078b8 <_fflush_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	690b      	ldr	r3, [r1, #16]
 80078bc:	4605      	mov	r5, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	b913      	cbnz	r3, 80078c8 <_fflush_r+0x10>
 80078c2:	2500      	movs	r5, #0
 80078c4:	4628      	mov	r0, r5
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	b118      	cbz	r0, 80078d2 <_fflush_r+0x1a>
 80078ca:	6a03      	ldr	r3, [r0, #32]
 80078cc:	b90b      	cbnz	r3, 80078d2 <_fflush_r+0x1a>
 80078ce:	f7ff f8e9 	bl	8006aa4 <__sinit>
 80078d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0f3      	beq.n	80078c2 <_fflush_r+0xa>
 80078da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078dc:	07d0      	lsls	r0, r2, #31
 80078de:	d404      	bmi.n	80078ea <_fflush_r+0x32>
 80078e0:	0599      	lsls	r1, r3, #22
 80078e2:	d402      	bmi.n	80078ea <_fflush_r+0x32>
 80078e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078e6:	f7ff fb90 	bl	800700a <__retarget_lock_acquire_recursive>
 80078ea:	4628      	mov	r0, r5
 80078ec:	4621      	mov	r1, r4
 80078ee:	f7ff ff5f 	bl	80077b0 <__sflush_r>
 80078f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078f4:	07da      	lsls	r2, r3, #31
 80078f6:	4605      	mov	r5, r0
 80078f8:	d4e4      	bmi.n	80078c4 <_fflush_r+0xc>
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	059b      	lsls	r3, r3, #22
 80078fe:	d4e1      	bmi.n	80078c4 <_fflush_r+0xc>
 8007900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007902:	f7ff fb83 	bl	800700c <__retarget_lock_release_recursive>
 8007906:	e7dd      	b.n	80078c4 <_fflush_r+0xc>

08007908 <__swhatbuf_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	460c      	mov	r4, r1
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	2900      	cmp	r1, #0
 8007912:	b096      	sub	sp, #88	@ 0x58
 8007914:	4615      	mov	r5, r2
 8007916:	461e      	mov	r6, r3
 8007918:	da0d      	bge.n	8007936 <__swhatbuf_r+0x2e>
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007920:	f04f 0100 	mov.w	r1, #0
 8007924:	bf14      	ite	ne
 8007926:	2340      	movne	r3, #64	@ 0x40
 8007928:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800792c:	2000      	movs	r0, #0
 800792e:	6031      	str	r1, [r6, #0]
 8007930:	602b      	str	r3, [r5, #0]
 8007932:	b016      	add	sp, #88	@ 0x58
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	466a      	mov	r2, sp
 8007938:	f000 f848 	bl	80079cc <_fstat_r>
 800793c:	2800      	cmp	r0, #0
 800793e:	dbec      	blt.n	800791a <__swhatbuf_r+0x12>
 8007940:	9901      	ldr	r1, [sp, #4]
 8007942:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007946:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800794a:	4259      	negs	r1, r3
 800794c:	4159      	adcs	r1, r3
 800794e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007952:	e7eb      	b.n	800792c <__swhatbuf_r+0x24>

08007954 <__smakebuf_r>:
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007958:	079d      	lsls	r5, r3, #30
 800795a:	4606      	mov	r6, r0
 800795c:	460c      	mov	r4, r1
 800795e:	d507      	bpl.n	8007970 <__smakebuf_r+0x1c>
 8007960:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	6123      	str	r3, [r4, #16]
 8007968:	2301      	movs	r3, #1
 800796a:	6163      	str	r3, [r4, #20]
 800796c:	b003      	add	sp, #12
 800796e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007970:	ab01      	add	r3, sp, #4
 8007972:	466a      	mov	r2, sp
 8007974:	f7ff ffc8 	bl	8007908 <__swhatbuf_r>
 8007978:	9f00      	ldr	r7, [sp, #0]
 800797a:	4605      	mov	r5, r0
 800797c:	4639      	mov	r1, r7
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff fbba 	bl	80070f8 <_malloc_r>
 8007984:	b948      	cbnz	r0, 800799a <__smakebuf_r+0x46>
 8007986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800798a:	059a      	lsls	r2, r3, #22
 800798c:	d4ee      	bmi.n	800796c <__smakebuf_r+0x18>
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	f043 0302 	orr.w	r3, r3, #2
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	e7e2      	b.n	8007960 <__smakebuf_r+0xc>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	6020      	str	r0, [r4, #0]
 800799e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079aa:	b15b      	cbz	r3, 80079c4 <__smakebuf_r+0x70>
 80079ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 f81d 	bl	80079f0 <_isatty_r>
 80079b6:	b128      	cbz	r0, 80079c4 <__smakebuf_r+0x70>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	431d      	orrs	r5, r3
 80079c8:	81a5      	strh	r5, [r4, #12]
 80079ca:	e7cf      	b.n	800796c <__smakebuf_r+0x18>

080079cc <_fstat_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d07      	ldr	r5, [pc, #28]	@ (80079ec <_fstat_r+0x20>)
 80079d0:	2300      	movs	r3, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	f7fa fbf8 	bl	80021ce <_fstat>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	d102      	bne.n	80079e8 <_fstat_r+0x1c>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	b103      	cbz	r3, 80079e8 <_fstat_r+0x1c>
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	bd38      	pop	{r3, r4, r5, pc}
 80079ea:	bf00      	nop
 80079ec:	200004a0 	.word	0x200004a0

080079f0 <_isatty_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d06      	ldr	r5, [pc, #24]	@ (8007a0c <_isatty_r+0x1c>)
 80079f4:	2300      	movs	r3, #0
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	f7fa fbf7 	bl	80021ee <_isatty>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_isatty_r+0x1a>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_isatty_r+0x1a>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	200004a0 	.word	0x200004a0

08007a10 <_sbrk_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d06      	ldr	r5, [pc, #24]	@ (8007a2c <_sbrk_r+0x1c>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	602b      	str	r3, [r5, #0]
 8007a1c:	f7fa fc00 	bl	8002220 <_sbrk>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d102      	bne.n	8007a2a <_sbrk_r+0x1a>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	b103      	cbz	r3, 8007a2a <_sbrk_r+0x1a>
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	200004a0 	.word	0x200004a0

08007a30 <cos>:
 8007a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a32:	ec53 2b10 	vmov	r2, r3, d0
 8007a36:	4826      	ldr	r0, [pc, #152]	@ (8007ad0 <cos+0xa0>)
 8007a38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a3c:	4281      	cmp	r1, r0
 8007a3e:	d806      	bhi.n	8007a4e <cos+0x1e>
 8007a40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007ac8 <cos+0x98>
 8007a44:	b005      	add	sp, #20
 8007a46:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a4a:	f000 b8b9 	b.w	8007bc0 <__kernel_cos>
 8007a4e:	4821      	ldr	r0, [pc, #132]	@ (8007ad4 <cos+0xa4>)
 8007a50:	4281      	cmp	r1, r0
 8007a52:	d908      	bls.n	8007a66 <cos+0x36>
 8007a54:	4610      	mov	r0, r2
 8007a56:	4619      	mov	r1, r3
 8007a58:	f7f8 fd60 	bl	800051c <__aeabi_dsub>
 8007a5c:	ec41 0b10 	vmov	d0, r0, r1
 8007a60:	b005      	add	sp, #20
 8007a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a66:	4668      	mov	r0, sp
 8007a68:	f000 fa2e 	bl	8007ec8 <__ieee754_rem_pio2>
 8007a6c:	f000 0003 	and.w	r0, r0, #3
 8007a70:	2801      	cmp	r0, #1
 8007a72:	d00b      	beq.n	8007a8c <cos+0x5c>
 8007a74:	2802      	cmp	r0, #2
 8007a76:	d015      	beq.n	8007aa4 <cos+0x74>
 8007a78:	b9d8      	cbnz	r0, 8007ab2 <cos+0x82>
 8007a7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a7e:	ed9d 0b00 	vldr	d0, [sp]
 8007a82:	f000 f89d 	bl	8007bc0 <__kernel_cos>
 8007a86:	ec51 0b10 	vmov	r0, r1, d0
 8007a8a:	e7e7      	b.n	8007a5c <cos+0x2c>
 8007a8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a90:	ed9d 0b00 	vldr	d0, [sp]
 8007a94:	f000 f95c 	bl	8007d50 <__kernel_sin>
 8007a98:	ec53 2b10 	vmov	r2, r3, d0
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007aa2:	e7db      	b.n	8007a5c <cos+0x2c>
 8007aa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007aa8:	ed9d 0b00 	vldr	d0, [sp]
 8007aac:	f000 f888 	bl	8007bc0 <__kernel_cos>
 8007ab0:	e7f2      	b.n	8007a98 <cos+0x68>
 8007ab2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ab6:	ed9d 0b00 	vldr	d0, [sp]
 8007aba:	2001      	movs	r0, #1
 8007abc:	f000 f948 	bl	8007d50 <__kernel_sin>
 8007ac0:	e7e1      	b.n	8007a86 <cos+0x56>
 8007ac2:	bf00      	nop
 8007ac4:	f3af 8000 	nop.w
	...
 8007ad0:	3fe921fb 	.word	0x3fe921fb
 8007ad4:	7fefffff 	.word	0x7fefffff

08007ad8 <sin>:
 8007ad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ada:	ec53 2b10 	vmov	r2, r3, d0
 8007ade:	4826      	ldr	r0, [pc, #152]	@ (8007b78 <sin+0xa0>)
 8007ae0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ae4:	4281      	cmp	r1, r0
 8007ae6:	d807      	bhi.n	8007af8 <sin+0x20>
 8007ae8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007b70 <sin+0x98>
 8007aec:	2000      	movs	r0, #0
 8007aee:	b005      	add	sp, #20
 8007af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007af4:	f000 b92c 	b.w	8007d50 <__kernel_sin>
 8007af8:	4820      	ldr	r0, [pc, #128]	@ (8007b7c <sin+0xa4>)
 8007afa:	4281      	cmp	r1, r0
 8007afc:	d908      	bls.n	8007b10 <sin+0x38>
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	f7f8 fd0b 	bl	800051c <__aeabi_dsub>
 8007b06:	ec41 0b10 	vmov	d0, r0, r1
 8007b0a:	b005      	add	sp, #20
 8007b0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b10:	4668      	mov	r0, sp
 8007b12:	f000 f9d9 	bl	8007ec8 <__ieee754_rem_pio2>
 8007b16:	f000 0003 	and.w	r0, r0, #3
 8007b1a:	2801      	cmp	r0, #1
 8007b1c:	d00c      	beq.n	8007b38 <sin+0x60>
 8007b1e:	2802      	cmp	r0, #2
 8007b20:	d011      	beq.n	8007b46 <sin+0x6e>
 8007b22:	b9e8      	cbnz	r0, 8007b60 <sin+0x88>
 8007b24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b28:	ed9d 0b00 	vldr	d0, [sp]
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	f000 f90f 	bl	8007d50 <__kernel_sin>
 8007b32:	ec51 0b10 	vmov	r0, r1, d0
 8007b36:	e7e6      	b.n	8007b06 <sin+0x2e>
 8007b38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b3c:	ed9d 0b00 	vldr	d0, [sp]
 8007b40:	f000 f83e 	bl	8007bc0 <__kernel_cos>
 8007b44:	e7f5      	b.n	8007b32 <sin+0x5a>
 8007b46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b4a:	ed9d 0b00 	vldr	d0, [sp]
 8007b4e:	2001      	movs	r0, #1
 8007b50:	f000 f8fe 	bl	8007d50 <__kernel_sin>
 8007b54:	ec53 2b10 	vmov	r2, r3, d0
 8007b58:	4610      	mov	r0, r2
 8007b5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007b5e:	e7d2      	b.n	8007b06 <sin+0x2e>
 8007b60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b64:	ed9d 0b00 	vldr	d0, [sp]
 8007b68:	f000 f82a 	bl	8007bc0 <__kernel_cos>
 8007b6c:	e7f2      	b.n	8007b54 <sin+0x7c>
 8007b6e:	bf00      	nop
	...
 8007b78:	3fe921fb 	.word	0x3fe921fb
 8007b7c:	7fefffff 	.word	0x7fefffff

08007b80 <fmodf>:
 8007b80:	b508      	push	{r3, lr}
 8007b82:	ed2d 8b02 	vpush	{d8}
 8007b86:	eef0 8a40 	vmov.f32	s17, s0
 8007b8a:	eeb0 8a60 	vmov.f32	s16, s1
 8007b8e:	f000 fb9f 	bl	80082d0 <__ieee754_fmodf>
 8007b92:	eef4 8a48 	vcmp.f32	s17, s16
 8007b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9a:	d60c      	bvs.n	8007bb6 <fmodf+0x36>
 8007b9c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007bbc <fmodf+0x3c>
 8007ba0:	eeb4 8a68 	vcmp.f32	s16, s17
 8007ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba8:	d105      	bne.n	8007bb6 <fmodf+0x36>
 8007baa:	f7ff fa03 	bl	8006fb4 <__errno>
 8007bae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007bb2:	2321      	movs	r3, #33	@ 0x21
 8007bb4:	6003      	str	r3, [r0, #0]
 8007bb6:	ecbd 8b02 	vpop	{d8}
 8007bba:	bd08      	pop	{r3, pc}
 8007bbc:	00000000 	.word	0x00000000

08007bc0 <__kernel_cos>:
 8007bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	ec57 6b10 	vmov	r6, r7, d0
 8007bc8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007bcc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007bd0:	ed8d 1b00 	vstr	d1, [sp]
 8007bd4:	d206      	bcs.n	8007be4 <__kernel_cos+0x24>
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	4639      	mov	r1, r7
 8007bda:	f7f8 fedf 	bl	800099c <__aeabi_d2iz>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f000 8088 	beq.w	8007cf4 <__kernel_cos+0x134>
 8007be4:	4632      	mov	r2, r6
 8007be6:	463b      	mov	r3, r7
 8007be8:	4630      	mov	r0, r6
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 fb68 	bl	80002c0 <__aeabi_dmul>
 8007bf0:	4b51      	ldr	r3, [pc, #324]	@ (8007d38 <__kernel_cos+0x178>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	f7f8 fb62 	bl	80002c0 <__aeabi_dmul>
 8007bfc:	a340      	add	r3, pc, #256	@ (adr r3, 8007d00 <__kernel_cos+0x140>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	4682      	mov	sl, r0
 8007c04:	468b      	mov	fp, r1
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	f7f8 fb59 	bl	80002c0 <__aeabi_dmul>
 8007c0e:	a33e      	add	r3, pc, #248	@ (adr r3, 8007d08 <__kernel_cos+0x148>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f7f8 fc84 	bl	8000520 <__adddf3>
 8007c18:	4622      	mov	r2, r4
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	f7f8 fb50 	bl	80002c0 <__aeabi_dmul>
 8007c20:	a33b      	add	r3, pc, #236	@ (adr r3, 8007d10 <__kernel_cos+0x150>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f7f8 fc79 	bl	800051c <__aeabi_dsub>
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	f7f8 fb47 	bl	80002c0 <__aeabi_dmul>
 8007c32:	a339      	add	r3, pc, #228	@ (adr r3, 8007d18 <__kernel_cos+0x158>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f7f8 fc72 	bl	8000520 <__adddf3>
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	462b      	mov	r3, r5
 8007c40:	f7f8 fb3e 	bl	80002c0 <__aeabi_dmul>
 8007c44:	a336      	add	r3, pc, #216	@ (adr r3, 8007d20 <__kernel_cos+0x160>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 fc67 	bl	800051c <__aeabi_dsub>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	462b      	mov	r3, r5
 8007c52:	f7f8 fb35 	bl	80002c0 <__aeabi_dmul>
 8007c56:	a334      	add	r3, pc, #208	@ (adr r3, 8007d28 <__kernel_cos+0x168>)
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	f7f8 fc60 	bl	8000520 <__adddf3>
 8007c60:	4622      	mov	r2, r4
 8007c62:	462b      	mov	r3, r5
 8007c64:	f7f8 fb2c 	bl	80002c0 <__aeabi_dmul>
 8007c68:	4622      	mov	r2, r4
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	f7f8 fb28 	bl	80002c0 <__aeabi_dmul>
 8007c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
 8007c78:	4630      	mov	r0, r6
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	f7f8 fb20 	bl	80002c0 <__aeabi_dmul>
 8007c80:	460b      	mov	r3, r1
 8007c82:	4602      	mov	r2, r0
 8007c84:	4629      	mov	r1, r5
 8007c86:	4620      	mov	r0, r4
 8007c88:	f7f8 fc48 	bl	800051c <__aeabi_dsub>
 8007c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d3c <__kernel_cos+0x17c>)
 8007c8e:	4598      	cmp	r8, r3
 8007c90:	4606      	mov	r6, r0
 8007c92:	460f      	mov	r7, r1
 8007c94:	d810      	bhi.n	8007cb8 <__kernel_cos+0xf8>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4650      	mov	r0, sl
 8007c9c:	4659      	mov	r1, fp
 8007c9e:	f7f8 fc3d 	bl	800051c <__aeabi_dsub>
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4926      	ldr	r1, [pc, #152]	@ (8007d40 <__kernel_cos+0x180>)
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f7f8 fc37 	bl	800051c <__aeabi_dsub>
 8007cae:	ec41 0b10 	vmov	d0, r0, r1
 8007cb2:	b003      	add	sp, #12
 8007cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb8:	4b22      	ldr	r3, [pc, #136]	@ (8007d44 <__kernel_cos+0x184>)
 8007cba:	4921      	ldr	r1, [pc, #132]	@ (8007d40 <__kernel_cos+0x180>)
 8007cbc:	4598      	cmp	r8, r3
 8007cbe:	bf8c      	ite	hi
 8007cc0:	4d21      	ldrhi	r5, [pc, #132]	@ (8007d48 <__kernel_cos+0x188>)
 8007cc2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007cc6:	2400      	movs	r4, #0
 8007cc8:	4622      	mov	r2, r4
 8007cca:	462b      	mov	r3, r5
 8007ccc:	2000      	movs	r0, #0
 8007cce:	f7f8 fc25 	bl	800051c <__aeabi_dsub>
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4689      	mov	r9, r1
 8007cd8:	462b      	mov	r3, r5
 8007cda:	4650      	mov	r0, sl
 8007cdc:	4659      	mov	r1, fp
 8007cde:	f7f8 fc1d 	bl	800051c <__aeabi_dsub>
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	f7f8 fc19 	bl	800051c <__aeabi_dsub>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4640      	mov	r0, r8
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	e7da      	b.n	8007caa <__kernel_cos+0xea>
 8007cf4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007d30 <__kernel_cos+0x170>
 8007cf8:	e7db      	b.n	8007cb2 <__kernel_cos+0xf2>
 8007cfa:	bf00      	nop
 8007cfc:	f3af 8000 	nop.w
 8007d00:	be8838d4 	.word	0xbe8838d4
 8007d04:	bda8fae9 	.word	0xbda8fae9
 8007d08:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d0c:	3e21ee9e 	.word	0x3e21ee9e
 8007d10:	809c52ad 	.word	0x809c52ad
 8007d14:	3e927e4f 	.word	0x3e927e4f
 8007d18:	19cb1590 	.word	0x19cb1590
 8007d1c:	3efa01a0 	.word	0x3efa01a0
 8007d20:	16c15177 	.word	0x16c15177
 8007d24:	3f56c16c 	.word	0x3f56c16c
 8007d28:	5555554c 	.word	0x5555554c
 8007d2c:	3fa55555 	.word	0x3fa55555
 8007d30:	00000000 	.word	0x00000000
 8007d34:	3ff00000 	.word	0x3ff00000
 8007d38:	3fe00000 	.word	0x3fe00000
 8007d3c:	3fd33332 	.word	0x3fd33332
 8007d40:	3ff00000 	.word	0x3ff00000
 8007d44:	3fe90000 	.word	0x3fe90000
 8007d48:	3fd20000 	.word	0x3fd20000
 8007d4c:	00000000 	.word	0x00000000

08007d50 <__kernel_sin>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	ec55 4b10 	vmov	r4, r5, d0
 8007d58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007d62:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007d66:	4680      	mov	r8, r0
 8007d68:	d205      	bcs.n	8007d76 <__kernel_sin+0x26>
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	f7f8 fe15 	bl	800099c <__aeabi_d2iz>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d052      	beq.n	8007e1c <__kernel_sin+0xcc>
 8007d76:	4622      	mov	r2, r4
 8007d78:	462b      	mov	r3, r5
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f7f8 fa9f 	bl	80002c0 <__aeabi_dmul>
 8007d82:	4682      	mov	sl, r0
 8007d84:	468b      	mov	fp, r1
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	f7f8 fa97 	bl	80002c0 <__aeabi_dmul>
 8007d92:	a342      	add	r3, pc, #264	@ (adr r3, 8007e9c <__kernel_sin+0x14c>)
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	e9cd 0100 	strd	r0, r1, [sp]
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	4659      	mov	r1, fp
 8007da0:	f7f8 fa8e 	bl	80002c0 <__aeabi_dmul>
 8007da4:	a33f      	add	r3, pc, #252	@ (adr r3, 8007ea4 <__kernel_sin+0x154>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 fbb7 	bl	800051c <__aeabi_dsub>
 8007dae:	4652      	mov	r2, sl
 8007db0:	465b      	mov	r3, fp
 8007db2:	f7f8 fa85 	bl	80002c0 <__aeabi_dmul>
 8007db6:	a33d      	add	r3, pc, #244	@ (adr r3, 8007eac <__kernel_sin+0x15c>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f7f8 fbb0 	bl	8000520 <__adddf3>
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	465b      	mov	r3, fp
 8007dc4:	f7f8 fa7c 	bl	80002c0 <__aeabi_dmul>
 8007dc8:	a33a      	add	r3, pc, #232	@ (adr r3, 8007eb4 <__kernel_sin+0x164>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fba5 	bl	800051c <__aeabi_dsub>
 8007dd2:	4652      	mov	r2, sl
 8007dd4:	465b      	mov	r3, fp
 8007dd6:	f7f8 fa73 	bl	80002c0 <__aeabi_dmul>
 8007dda:	a338      	add	r3, pc, #224	@ (adr r3, 8007ebc <__kernel_sin+0x16c>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fb9e 	bl	8000520 <__adddf3>
 8007de4:	4606      	mov	r6, r0
 8007de6:	460f      	mov	r7, r1
 8007de8:	f1b8 0f00 	cmp.w	r8, #0
 8007dec:	d11b      	bne.n	8007e26 <__kernel_sin+0xd6>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4650      	mov	r0, sl
 8007df4:	4659      	mov	r1, fp
 8007df6:	f7f8 fa63 	bl	80002c0 <__aeabi_dmul>
 8007dfa:	a325      	add	r3, pc, #148	@ (adr r3, 8007e90 <__kernel_sin+0x140>)
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f7f8 fb8c 	bl	800051c <__aeabi_dsub>
 8007e04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e08:	f7f8 fa5a 	bl	80002c0 <__aeabi_dmul>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4620      	mov	r0, r4
 8007e12:	4629      	mov	r1, r5
 8007e14:	f7f8 fb84 	bl	8000520 <__adddf3>
 8007e18:	4604      	mov	r4, r0
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	ec45 4b10 	vmov	d0, r4, r5
 8007e20:	b005      	add	sp, #20
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007e98 <__kernel_sin+0x148>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f7f8 fa47 	bl	80002c0 <__aeabi_dmul>
 8007e32:	4632      	mov	r2, r6
 8007e34:	4680      	mov	r8, r0
 8007e36:	4689      	mov	r9, r1
 8007e38:	463b      	mov	r3, r7
 8007e3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e3e:	f7f8 fa3f 	bl	80002c0 <__aeabi_dmul>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4640      	mov	r0, r8
 8007e48:	4649      	mov	r1, r9
 8007e4a:	f7f8 fb67 	bl	800051c <__aeabi_dsub>
 8007e4e:	4652      	mov	r2, sl
 8007e50:	465b      	mov	r3, fp
 8007e52:	f7f8 fa35 	bl	80002c0 <__aeabi_dmul>
 8007e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e5a:	f7f8 fb5f 	bl	800051c <__aeabi_dsub>
 8007e5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007e90 <__kernel_sin+0x140>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	4606      	mov	r6, r0
 8007e66:	460f      	mov	r7, r1
 8007e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e6c:	f7f8 fa28 	bl	80002c0 <__aeabi_dmul>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4630      	mov	r0, r6
 8007e76:	4639      	mov	r1, r7
 8007e78:	f7f8 fb52 	bl	8000520 <__adddf3>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4620      	mov	r0, r4
 8007e82:	4629      	mov	r1, r5
 8007e84:	f7f8 fb4a 	bl	800051c <__aeabi_dsub>
 8007e88:	e7c6      	b.n	8007e18 <__kernel_sin+0xc8>
 8007e8a:	bf00      	nop
 8007e8c:	f3af 8000 	nop.w
 8007e90:	55555549 	.word	0x55555549
 8007e94:	3fc55555 	.word	0x3fc55555
 8007e98:	3fe00000 	.word	0x3fe00000
 8007e9c:	5acfd57c 	.word	0x5acfd57c
 8007ea0:	3de5d93a 	.word	0x3de5d93a
 8007ea4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ea8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007eac:	57b1fe7d 	.word	0x57b1fe7d
 8007eb0:	3ec71de3 	.word	0x3ec71de3
 8007eb4:	19c161d5 	.word	0x19c161d5
 8007eb8:	3f2a01a0 	.word	0x3f2a01a0
 8007ebc:	1110f8a6 	.word	0x1110f8a6
 8007ec0:	3f811111 	.word	0x3f811111
 8007ec4:	00000000 	.word	0x00000000

08007ec8 <__ieee754_rem_pio2>:
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	ec57 6b10 	vmov	r6, r7, d0
 8007ed0:	4bc5      	ldr	r3, [pc, #788]	@ (80081e8 <__ieee754_rem_pio2+0x320>)
 8007ed2:	b08d      	sub	sp, #52	@ 0x34
 8007ed4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007ed8:	4598      	cmp	r8, r3
 8007eda:	4604      	mov	r4, r0
 8007edc:	9704      	str	r7, [sp, #16]
 8007ede:	d807      	bhi.n	8007ef0 <__ieee754_rem_pio2+0x28>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	ed80 0b00 	vstr	d0, [r0]
 8007ee8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007eec:	2500      	movs	r5, #0
 8007eee:	e028      	b.n	8007f42 <__ieee754_rem_pio2+0x7a>
 8007ef0:	4bbe      	ldr	r3, [pc, #760]	@ (80081ec <__ieee754_rem_pio2+0x324>)
 8007ef2:	4598      	cmp	r8, r3
 8007ef4:	d878      	bhi.n	8007fe8 <__ieee754_rem_pio2+0x120>
 8007ef6:	9b04      	ldr	r3, [sp, #16]
 8007ef8:	4dbd      	ldr	r5, [pc, #756]	@ (80081f0 <__ieee754_rem_pio2+0x328>)
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	4630      	mov	r0, r6
 8007efe:	a3ac      	add	r3, pc, #688	@ (adr r3, 80081b0 <__ieee754_rem_pio2+0x2e8>)
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	4639      	mov	r1, r7
 8007f06:	dd38      	ble.n	8007f7a <__ieee754_rem_pio2+0xb2>
 8007f08:	f7f8 fb08 	bl	800051c <__aeabi_dsub>
 8007f0c:	45a8      	cmp	r8, r5
 8007f0e:	4606      	mov	r6, r0
 8007f10:	460f      	mov	r7, r1
 8007f12:	d01a      	beq.n	8007f4a <__ieee754_rem_pio2+0x82>
 8007f14:	a3a8      	add	r3, pc, #672	@ (adr r3, 80081b8 <__ieee754_rem_pio2+0x2f0>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 faff 	bl	800051c <__aeabi_dsub>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4680      	mov	r8, r0
 8007f24:	4689      	mov	r9, r1
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 faf7 	bl	800051c <__aeabi_dsub>
 8007f2e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80081b8 <__ieee754_rem_pio2+0x2f0>)
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f7f8 faf2 	bl	800051c <__aeabi_dsub>
 8007f38:	e9c4 8900 	strd	r8, r9, [r4]
 8007f3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f40:	2501      	movs	r5, #1
 8007f42:	4628      	mov	r0, r5
 8007f44:	b00d      	add	sp, #52	@ 0x34
 8007f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4a:	a39d      	add	r3, pc, #628	@ (adr r3, 80081c0 <__ieee754_rem_pio2+0x2f8>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 fae4 	bl	800051c <__aeabi_dsub>
 8007f54:	a39c      	add	r3, pc, #624	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x300>)
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	460f      	mov	r7, r1
 8007f5e:	f7f8 fadd 	bl	800051c <__aeabi_dsub>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4680      	mov	r8, r0
 8007f68:	4689      	mov	r9, r1
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 fad5 	bl	800051c <__aeabi_dsub>
 8007f72:	a395      	add	r3, pc, #596	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x300>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	e7dc      	b.n	8007f34 <__ieee754_rem_pio2+0x6c>
 8007f7a:	f7f8 fad1 	bl	8000520 <__adddf3>
 8007f7e:	45a8      	cmp	r8, r5
 8007f80:	4606      	mov	r6, r0
 8007f82:	460f      	mov	r7, r1
 8007f84:	d018      	beq.n	8007fb8 <__ieee754_rem_pio2+0xf0>
 8007f86:	a38c      	add	r3, pc, #560	@ (adr r3, 80081b8 <__ieee754_rem_pio2+0x2f0>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 fac8 	bl	8000520 <__adddf3>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4680      	mov	r8, r0
 8007f96:	4689      	mov	r9, r1
 8007f98:	4630      	mov	r0, r6
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	f7f8 fabe 	bl	800051c <__aeabi_dsub>
 8007fa0:	a385      	add	r3, pc, #532	@ (adr r3, 80081b8 <__ieee754_rem_pio2+0x2f0>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 fabb 	bl	8000520 <__adddf3>
 8007faa:	f04f 35ff 	mov.w	r5, #4294967295
 8007fae:	e9c4 8900 	strd	r8, r9, [r4]
 8007fb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007fb6:	e7c4      	b.n	8007f42 <__ieee754_rem_pio2+0x7a>
 8007fb8:	a381      	add	r3, pc, #516	@ (adr r3, 80081c0 <__ieee754_rem_pio2+0x2f8>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 faaf 	bl	8000520 <__adddf3>
 8007fc2:	a381      	add	r3, pc, #516	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x300>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	4606      	mov	r6, r0
 8007fca:	460f      	mov	r7, r1
 8007fcc:	f7f8 faa8 	bl	8000520 <__adddf3>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4680      	mov	r8, r0
 8007fd6:	4689      	mov	r9, r1
 8007fd8:	4630      	mov	r0, r6
 8007fda:	4639      	mov	r1, r7
 8007fdc:	f7f8 fa9e 	bl	800051c <__aeabi_dsub>
 8007fe0:	a379      	add	r3, pc, #484	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x300>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	e7de      	b.n	8007fa6 <__ieee754_rem_pio2+0xde>
 8007fe8:	4b82      	ldr	r3, [pc, #520]	@ (80081f4 <__ieee754_rem_pio2+0x32c>)
 8007fea:	4598      	cmp	r8, r3
 8007fec:	f200 80d1 	bhi.w	8008192 <__ieee754_rem_pio2+0x2ca>
 8007ff0:	f000 f966 	bl	80082c0 <fabs>
 8007ff4:	ec57 6b10 	vmov	r6, r7, d0
 8007ff8:	a375      	add	r3, pc, #468	@ (adr r3, 80081d0 <__ieee754_rem_pio2+0x308>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	4630      	mov	r0, r6
 8008000:	4639      	mov	r1, r7
 8008002:	f7f8 f95d 	bl	80002c0 <__aeabi_dmul>
 8008006:	4b7c      	ldr	r3, [pc, #496]	@ (80081f8 <__ieee754_rem_pio2+0x330>)
 8008008:	2200      	movs	r2, #0
 800800a:	f7f8 fa89 	bl	8000520 <__adddf3>
 800800e:	f7f8 fcc5 	bl	800099c <__aeabi_d2iz>
 8008012:	4605      	mov	r5, r0
 8008014:	f7f8 fbd0 	bl	80007b8 <__aeabi_i2d>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008020:	a363      	add	r3, pc, #396	@ (adr r3, 80081b0 <__ieee754_rem_pio2+0x2e8>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f7f8 f94b 	bl	80002c0 <__aeabi_dmul>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4630      	mov	r0, r6
 8008030:	4639      	mov	r1, r7
 8008032:	f7f8 fa73 	bl	800051c <__aeabi_dsub>
 8008036:	a360      	add	r3, pc, #384	@ (adr r3, 80081b8 <__ieee754_rem_pio2+0x2f0>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	4682      	mov	sl, r0
 800803e:	468b      	mov	fp, r1
 8008040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008044:	f7f8 f93c 	bl	80002c0 <__aeabi_dmul>
 8008048:	2d1f      	cmp	r5, #31
 800804a:	4606      	mov	r6, r0
 800804c:	460f      	mov	r7, r1
 800804e:	dc0c      	bgt.n	800806a <__ieee754_rem_pio2+0x1a2>
 8008050:	4b6a      	ldr	r3, [pc, #424]	@ (80081fc <__ieee754_rem_pio2+0x334>)
 8008052:	1e6a      	subs	r2, r5, #1
 8008054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008058:	4543      	cmp	r3, r8
 800805a:	d006      	beq.n	800806a <__ieee754_rem_pio2+0x1a2>
 800805c:	4632      	mov	r2, r6
 800805e:	463b      	mov	r3, r7
 8008060:	4650      	mov	r0, sl
 8008062:	4659      	mov	r1, fp
 8008064:	f7f8 fa5a 	bl	800051c <__aeabi_dsub>
 8008068:	e00e      	b.n	8008088 <__ieee754_rem_pio2+0x1c0>
 800806a:	463b      	mov	r3, r7
 800806c:	4632      	mov	r2, r6
 800806e:	4650      	mov	r0, sl
 8008070:	4659      	mov	r1, fp
 8008072:	f7f8 fa53 	bl	800051c <__aeabi_dsub>
 8008076:	ea4f 5328 	mov.w	r3, r8, asr #20
 800807a:	9305      	str	r3, [sp, #20]
 800807c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008080:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008084:	2b10      	cmp	r3, #16
 8008086:	dc02      	bgt.n	800808e <__ieee754_rem_pio2+0x1c6>
 8008088:	e9c4 0100 	strd	r0, r1, [r4]
 800808c:	e039      	b.n	8008102 <__ieee754_rem_pio2+0x23a>
 800808e:	a34c      	add	r3, pc, #304	@ (adr r3, 80081c0 <__ieee754_rem_pio2+0x2f8>)
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008098:	f7f8 f912 	bl	80002c0 <__aeabi_dmul>
 800809c:	4606      	mov	r6, r0
 800809e:	460f      	mov	r7, r1
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4650      	mov	r0, sl
 80080a6:	4659      	mov	r1, fp
 80080a8:	f7f8 fa38 	bl	800051c <__aeabi_dsub>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4680      	mov	r8, r0
 80080b2:	4689      	mov	r9, r1
 80080b4:	4650      	mov	r0, sl
 80080b6:	4659      	mov	r1, fp
 80080b8:	f7f8 fa30 	bl	800051c <__aeabi_dsub>
 80080bc:	4632      	mov	r2, r6
 80080be:	463b      	mov	r3, r7
 80080c0:	f7f8 fa2c 	bl	800051c <__aeabi_dsub>
 80080c4:	a340      	add	r3, pc, #256	@ (adr r3, 80081c8 <__ieee754_rem_pio2+0x300>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	4606      	mov	r6, r0
 80080cc:	460f      	mov	r7, r1
 80080ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d2:	f7f8 f8f5 	bl	80002c0 <__aeabi_dmul>
 80080d6:	4632      	mov	r2, r6
 80080d8:	463b      	mov	r3, r7
 80080da:	f7f8 fa1f 	bl	800051c <__aeabi_dsub>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4606      	mov	r6, r0
 80080e4:	460f      	mov	r7, r1
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 fa17 	bl	800051c <__aeabi_dsub>
 80080ee:	9a05      	ldr	r2, [sp, #20]
 80080f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b31      	cmp	r3, #49	@ 0x31
 80080f8:	dc20      	bgt.n	800813c <__ieee754_rem_pio2+0x274>
 80080fa:	e9c4 0100 	strd	r0, r1, [r4]
 80080fe:	46c2      	mov	sl, r8
 8008100:	46cb      	mov	fp, r9
 8008102:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008106:	4650      	mov	r0, sl
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	4659      	mov	r1, fp
 800810e:	f7f8 fa05 	bl	800051c <__aeabi_dsub>
 8008112:	463b      	mov	r3, r7
 8008114:	4632      	mov	r2, r6
 8008116:	f7f8 fa01 	bl	800051c <__aeabi_dsub>
 800811a:	9b04      	ldr	r3, [sp, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008122:	f6bf af0e 	bge.w	8007f42 <__ieee754_rem_pio2+0x7a>
 8008126:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800812a:	6063      	str	r3, [r4, #4]
 800812c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008130:	f8c4 8000 	str.w	r8, [r4]
 8008134:	60a0      	str	r0, [r4, #8]
 8008136:	60e3      	str	r3, [r4, #12]
 8008138:	426d      	negs	r5, r5
 800813a:	e702      	b.n	8007f42 <__ieee754_rem_pio2+0x7a>
 800813c:	a326      	add	r3, pc, #152	@ (adr r3, 80081d8 <__ieee754_rem_pio2+0x310>)
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008146:	f7f8 f8bb 	bl	80002c0 <__aeabi_dmul>
 800814a:	4606      	mov	r6, r0
 800814c:	460f      	mov	r7, r1
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4640      	mov	r0, r8
 8008154:	4649      	mov	r1, r9
 8008156:	f7f8 f9e1 	bl	800051c <__aeabi_dsub>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4682      	mov	sl, r0
 8008160:	468b      	mov	fp, r1
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 f9d9 	bl	800051c <__aeabi_dsub>
 800816a:	4632      	mov	r2, r6
 800816c:	463b      	mov	r3, r7
 800816e:	f7f8 f9d5 	bl	800051c <__aeabi_dsub>
 8008172:	a31b      	add	r3, pc, #108	@ (adr r3, 80081e0 <__ieee754_rem_pio2+0x318>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	4606      	mov	r6, r0
 800817a:	460f      	mov	r7, r1
 800817c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008180:	f7f8 f89e 	bl	80002c0 <__aeabi_dmul>
 8008184:	4632      	mov	r2, r6
 8008186:	463b      	mov	r3, r7
 8008188:	f7f8 f9c8 	bl	800051c <__aeabi_dsub>
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	e764      	b.n	800805c <__ieee754_rem_pio2+0x194>
 8008192:	4b1b      	ldr	r3, [pc, #108]	@ (8008200 <__ieee754_rem_pio2+0x338>)
 8008194:	4598      	cmp	r8, r3
 8008196:	d935      	bls.n	8008204 <__ieee754_rem_pio2+0x33c>
 8008198:	4632      	mov	r2, r6
 800819a:	463b      	mov	r3, r7
 800819c:	4630      	mov	r0, r6
 800819e:	4639      	mov	r1, r7
 80081a0:	f7f8 f9bc 	bl	800051c <__aeabi_dsub>
 80081a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80081a8:	e9c4 0100 	strd	r0, r1, [r4]
 80081ac:	e69e      	b.n	8007eec <__ieee754_rem_pio2+0x24>
 80081ae:	bf00      	nop
 80081b0:	54400000 	.word	0x54400000
 80081b4:	3ff921fb 	.word	0x3ff921fb
 80081b8:	1a626331 	.word	0x1a626331
 80081bc:	3dd0b461 	.word	0x3dd0b461
 80081c0:	1a600000 	.word	0x1a600000
 80081c4:	3dd0b461 	.word	0x3dd0b461
 80081c8:	2e037073 	.word	0x2e037073
 80081cc:	3ba3198a 	.word	0x3ba3198a
 80081d0:	6dc9c883 	.word	0x6dc9c883
 80081d4:	3fe45f30 	.word	0x3fe45f30
 80081d8:	2e000000 	.word	0x2e000000
 80081dc:	3ba3198a 	.word	0x3ba3198a
 80081e0:	252049c1 	.word	0x252049c1
 80081e4:	397b839a 	.word	0x397b839a
 80081e8:	3fe921fb 	.word	0x3fe921fb
 80081ec:	4002d97b 	.word	0x4002d97b
 80081f0:	3ff921fb 	.word	0x3ff921fb
 80081f4:	413921fb 	.word	0x413921fb
 80081f8:	3fe00000 	.word	0x3fe00000
 80081fc:	08008de0 	.word	0x08008de0
 8008200:	7fefffff 	.word	0x7fefffff
 8008204:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008208:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800820c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008210:	4630      	mov	r0, r6
 8008212:	460f      	mov	r7, r1
 8008214:	f7f8 fbc2 	bl	800099c <__aeabi_d2iz>
 8008218:	f7f8 face 	bl	80007b8 <__aeabi_i2d>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008228:	f7f8 f978 	bl	800051c <__aeabi_dsub>
 800822c:	4b22      	ldr	r3, [pc, #136]	@ (80082b8 <__ieee754_rem_pio2+0x3f0>)
 800822e:	2200      	movs	r2, #0
 8008230:	f7f8 f846 	bl	80002c0 <__aeabi_dmul>
 8008234:	460f      	mov	r7, r1
 8008236:	4606      	mov	r6, r0
 8008238:	f7f8 fbb0 	bl	800099c <__aeabi_d2iz>
 800823c:	f7f8 fabc 	bl	80007b8 <__aeabi_i2d>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800824c:	f7f8 f966 	bl	800051c <__aeabi_dsub>
 8008250:	4b19      	ldr	r3, [pc, #100]	@ (80082b8 <__ieee754_rem_pio2+0x3f0>)
 8008252:	2200      	movs	r2, #0
 8008254:	f7f8 f834 	bl	80002c0 <__aeabi_dmul>
 8008258:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800825c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008260:	f04f 0803 	mov.w	r8, #3
 8008264:	2600      	movs	r6, #0
 8008266:	2700      	movs	r7, #0
 8008268:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	46c2      	mov	sl, r8
 8008272:	f108 38ff 	add.w	r8, r8, #4294967295
 8008276:	f7f8 fb5f 	bl	8000938 <__aeabi_dcmpeq>
 800827a:	2800      	cmp	r0, #0
 800827c:	d1f4      	bne.n	8008268 <__ieee754_rem_pio2+0x3a0>
 800827e:	4b0f      	ldr	r3, [pc, #60]	@ (80082bc <__ieee754_rem_pio2+0x3f4>)
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	2302      	movs	r3, #2
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	462a      	mov	r2, r5
 8008288:	4653      	mov	r3, sl
 800828a:	4621      	mov	r1, r4
 800828c:	a806      	add	r0, sp, #24
 800828e:	f000 f8a3 	bl	80083d8 <__kernel_rem_pio2>
 8008292:	9b04      	ldr	r3, [sp, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	4605      	mov	r5, r0
 8008298:	f6bf ae53 	bge.w	8007f42 <__ieee754_rem_pio2+0x7a>
 800829c:	e9d4 2100 	ldrd	r2, r1, [r4]
 80082a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082a4:	e9c4 2300 	strd	r2, r3, [r4]
 80082a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80082ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80082b4:	e740      	b.n	8008138 <__ieee754_rem_pio2+0x270>
 80082b6:	bf00      	nop
 80082b8:	41700000 	.word	0x41700000
 80082bc:	08008e60 	.word	0x08008e60

080082c0 <fabs>:
 80082c0:	ec51 0b10 	vmov	r0, r1, d0
 80082c4:	4602      	mov	r2, r0
 80082c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80082ca:	ec43 2b10 	vmov	d0, r2, r3
 80082ce:	4770      	bx	lr

080082d0 <__ieee754_fmodf>:
 80082d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082d2:	ee10 5a90 	vmov	r5, s1
 80082d6:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 80082da:	1e43      	subs	r3, r0, #1
 80082dc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80082e0:	d206      	bcs.n	80082f0 <__ieee754_fmodf+0x20>
 80082e2:	ee10 3a10 	vmov	r3, s0
 80082e6:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80082ea:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80082ee:	d304      	bcc.n	80082fa <__ieee754_fmodf+0x2a>
 80082f0:	ee60 0a20 	vmul.f32	s1, s0, s1
 80082f4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80082f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082fa:	4286      	cmp	r6, r0
 80082fc:	dbfc      	blt.n	80082f8 <__ieee754_fmodf+0x28>
 80082fe:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 8008302:	d105      	bne.n	8008310 <__ieee754_fmodf+0x40>
 8008304:	4b32      	ldr	r3, [pc, #200]	@ (80083d0 <__ieee754_fmodf+0x100>)
 8008306:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800830a:	ed93 0a00 	vldr	s0, [r3]
 800830e:	e7f3      	b.n	80082f8 <__ieee754_fmodf+0x28>
 8008310:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008314:	d140      	bne.n	8008398 <__ieee754_fmodf+0xc8>
 8008316:	0232      	lsls	r2, r6, #8
 8008318:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800831c:	2a00      	cmp	r2, #0
 800831e:	dc38      	bgt.n	8008392 <__ieee754_fmodf+0xc2>
 8008320:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 8008324:	d13e      	bne.n	80083a4 <__ieee754_fmodf+0xd4>
 8008326:	0207      	lsls	r7, r0, #8
 8008328:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800832c:	2f00      	cmp	r7, #0
 800832e:	da36      	bge.n	800839e <__ieee754_fmodf+0xce>
 8008330:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 8008334:	bfb9      	ittee	lt
 8008336:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800833a:	1a5b      	sublt	r3, r3, r1
 800833c:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 8008340:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 8008344:	bfb8      	it	lt
 8008346:	fa06 f303 	lsllt.w	r3, r6, r3
 800834a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800834e:	bfb5      	itete	lt
 8008350:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 8008354:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 8008358:	1aad      	sublt	r5, r5, r2
 800835a:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800835e:	bfb8      	it	lt
 8008360:	40a8      	lsllt	r0, r5
 8008362:	1a89      	subs	r1, r1, r2
 8008364:	1a1d      	subs	r5, r3, r0
 8008366:	bb01      	cbnz	r1, 80083aa <__ieee754_fmodf+0xda>
 8008368:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800836c:	bf38      	it	cc
 800836e:	462b      	movcc	r3, r5
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0c7      	beq.n	8008304 <__ieee754_fmodf+0x34>
 8008374:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008378:	db1f      	blt.n	80083ba <__ieee754_fmodf+0xea>
 800837a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800837e:	db1f      	blt.n	80083c0 <__ieee754_fmodf+0xf0>
 8008380:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8008384:	327f      	adds	r2, #127	@ 0x7f
 8008386:	4323      	orrs	r3, r4
 8008388:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800838c:	ee00 3a10 	vmov	s0, r3
 8008390:	e7b2      	b.n	80082f8 <__ieee754_fmodf+0x28>
 8008392:	3901      	subs	r1, #1
 8008394:	0052      	lsls	r2, r2, #1
 8008396:	e7c1      	b.n	800831c <__ieee754_fmodf+0x4c>
 8008398:	15f1      	asrs	r1, r6, #23
 800839a:	397f      	subs	r1, #127	@ 0x7f
 800839c:	e7c0      	b.n	8008320 <__ieee754_fmodf+0x50>
 800839e:	3a01      	subs	r2, #1
 80083a0:	007f      	lsls	r7, r7, #1
 80083a2:	e7c3      	b.n	800832c <__ieee754_fmodf+0x5c>
 80083a4:	15c2      	asrs	r2, r0, #23
 80083a6:	3a7f      	subs	r2, #127	@ 0x7f
 80083a8:	e7c2      	b.n	8008330 <__ieee754_fmodf+0x60>
 80083aa:	2d00      	cmp	r5, #0
 80083ac:	da02      	bge.n	80083b4 <__ieee754_fmodf+0xe4>
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	3901      	subs	r1, #1
 80083b2:	e7d7      	b.n	8008364 <__ieee754_fmodf+0x94>
 80083b4:	d0a6      	beq.n	8008304 <__ieee754_fmodf+0x34>
 80083b6:	006b      	lsls	r3, r5, #1
 80083b8:	e7fa      	b.n	80083b0 <__ieee754_fmodf+0xe0>
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	3a01      	subs	r2, #1
 80083be:	e7d9      	b.n	8008374 <__ieee754_fmodf+0xa4>
 80083c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80083c4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80083c8:	3282      	adds	r2, #130	@ 0x82
 80083ca:	4113      	asrs	r3, r2
 80083cc:	4323      	orrs	r3, r4
 80083ce:	e7dd      	b.n	800838c <__ieee754_fmodf+0xbc>
 80083d0:	08008f68 	.word	0x08008f68
 80083d4:	00000000 	.word	0x00000000

080083d8 <__kernel_rem_pio2>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	ed2d 8b02 	vpush	{d8}
 80083e0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80083e4:	f112 0f14 	cmn.w	r2, #20
 80083e8:	9306      	str	r3, [sp, #24]
 80083ea:	9104      	str	r1, [sp, #16]
 80083ec:	4bbe      	ldr	r3, [pc, #760]	@ (80086e8 <__kernel_rem_pio2+0x310>)
 80083ee:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80083f0:	9008      	str	r0, [sp, #32]
 80083f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	9b06      	ldr	r3, [sp, #24]
 80083fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80083fe:	bfa8      	it	ge
 8008400:	1ed4      	subge	r4, r2, #3
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	bfb2      	itee	lt
 8008406:	2400      	movlt	r4, #0
 8008408:	2318      	movge	r3, #24
 800840a:	fb94 f4f3 	sdivge	r4, r4, r3
 800840e:	f06f 0317 	mvn.w	r3, #23
 8008412:	fb04 3303 	mla	r3, r4, r3, r3
 8008416:	eb03 0b02 	add.w	fp, r3, r2
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	9a05      	ldr	r2, [sp, #20]
 800841e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80086d8 <__kernel_rem_pio2+0x300>
 8008422:	eb03 0802 	add.w	r8, r3, r2
 8008426:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008428:	1aa7      	subs	r7, r4, r2
 800842a:	ae20      	add	r6, sp, #128	@ 0x80
 800842c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008430:	2500      	movs	r5, #0
 8008432:	4545      	cmp	r5, r8
 8008434:	dd13      	ble.n	800845e <__kernel_rem_pio2+0x86>
 8008436:	9b06      	ldr	r3, [sp, #24]
 8008438:	aa20      	add	r2, sp, #128	@ 0x80
 800843a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800843e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8008442:	f04f 0800 	mov.w	r8, #0
 8008446:	9b00      	ldr	r3, [sp, #0]
 8008448:	4598      	cmp	r8, r3
 800844a:	dc31      	bgt.n	80084b0 <__kernel_rem_pio2+0xd8>
 800844c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80086d8 <__kernel_rem_pio2+0x300>
 8008450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008454:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008458:	462f      	mov	r7, r5
 800845a:	2600      	movs	r6, #0
 800845c:	e01b      	b.n	8008496 <__kernel_rem_pio2+0xbe>
 800845e:	42ef      	cmn	r7, r5
 8008460:	d407      	bmi.n	8008472 <__kernel_rem_pio2+0x9a>
 8008462:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008466:	f7f8 f9a7 	bl	80007b8 <__aeabi_i2d>
 800846a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800846e:	3501      	adds	r5, #1
 8008470:	e7df      	b.n	8008432 <__kernel_rem_pio2+0x5a>
 8008472:	ec51 0b18 	vmov	r0, r1, d8
 8008476:	e7f8      	b.n	800846a <__kernel_rem_pio2+0x92>
 8008478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800847c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008480:	f7f7 ff1e 	bl	80002c0 <__aeabi_dmul>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848c:	f7f8 f848 	bl	8000520 <__adddf3>
 8008490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008494:	3601      	adds	r6, #1
 8008496:	9b05      	ldr	r3, [sp, #20]
 8008498:	429e      	cmp	r6, r3
 800849a:	f1a7 0708 	sub.w	r7, r7, #8
 800849e:	ddeb      	ble.n	8008478 <__kernel_rem_pio2+0xa0>
 80084a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084a4:	f108 0801 	add.w	r8, r8, #1
 80084a8:	ecaa 7b02 	vstmia	sl!, {d7}
 80084ac:	3508      	adds	r5, #8
 80084ae:	e7ca      	b.n	8008446 <__kernel_rem_pio2+0x6e>
 80084b0:	9b00      	ldr	r3, [sp, #0]
 80084b2:	f8dd 8000 	ldr.w	r8, [sp]
 80084b6:	aa0c      	add	r2, sp, #48	@ 0x30
 80084b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80084be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80084c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80084c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80084ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084cc:	ab98      	add	r3, sp, #608	@ 0x260
 80084ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80084d2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80084d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084da:	ac0c      	add	r4, sp, #48	@ 0x30
 80084dc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80084de:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80084e2:	46a1      	mov	r9, r4
 80084e4:	46c2      	mov	sl, r8
 80084e6:	f1ba 0f00 	cmp.w	sl, #0
 80084ea:	f1a5 0508 	sub.w	r5, r5, #8
 80084ee:	dc77      	bgt.n	80085e0 <__kernel_rem_pio2+0x208>
 80084f0:	4658      	mov	r0, fp
 80084f2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80084f6:	f000 fac7 	bl	8008a88 <scalbn>
 80084fa:	ec57 6b10 	vmov	r6, r7, d0
 80084fe:	2200      	movs	r2, #0
 8008500:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008504:	4630      	mov	r0, r6
 8008506:	4639      	mov	r1, r7
 8008508:	f7f7 feda 	bl	80002c0 <__aeabi_dmul>
 800850c:	ec41 0b10 	vmov	d0, r0, r1
 8008510:	f000 fb3a 	bl	8008b88 <floor>
 8008514:	4b75      	ldr	r3, [pc, #468]	@ (80086ec <__kernel_rem_pio2+0x314>)
 8008516:	ec51 0b10 	vmov	r0, r1, d0
 800851a:	2200      	movs	r2, #0
 800851c:	f7f7 fed0 	bl	80002c0 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4630      	mov	r0, r6
 8008526:	4639      	mov	r1, r7
 8008528:	f7f7 fff8 	bl	800051c <__aeabi_dsub>
 800852c:	460f      	mov	r7, r1
 800852e:	4606      	mov	r6, r0
 8008530:	f7f8 fa34 	bl	800099c <__aeabi_d2iz>
 8008534:	9002      	str	r0, [sp, #8]
 8008536:	f7f8 f93f 	bl	80007b8 <__aeabi_i2d>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4630      	mov	r0, r6
 8008540:	4639      	mov	r1, r7
 8008542:	f7f7 ffeb 	bl	800051c <__aeabi_dsub>
 8008546:	f1bb 0f00 	cmp.w	fp, #0
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	dd6c      	ble.n	800862a <__kernel_rem_pio2+0x252>
 8008550:	f108 31ff 	add.w	r1, r8, #4294967295
 8008554:	ab0c      	add	r3, sp, #48	@ 0x30
 8008556:	9d02      	ldr	r5, [sp, #8]
 8008558:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800855c:	f1cb 0018 	rsb	r0, fp, #24
 8008560:	fa43 f200 	asr.w	r2, r3, r0
 8008564:	4415      	add	r5, r2
 8008566:	4082      	lsls	r2, r0
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	aa0c      	add	r2, sp, #48	@ 0x30
 800856c:	9502      	str	r5, [sp, #8]
 800856e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008572:	f1cb 0217 	rsb	r2, fp, #23
 8008576:	fa43 f902 	asr.w	r9, r3, r2
 800857a:	f1b9 0f00 	cmp.w	r9, #0
 800857e:	dd64      	ble.n	800864a <__kernel_rem_pio2+0x272>
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	2200      	movs	r2, #0
 8008584:	3301      	adds	r3, #1
 8008586:	9302      	str	r3, [sp, #8]
 8008588:	4615      	mov	r5, r2
 800858a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800858e:	4590      	cmp	r8, r2
 8008590:	f300 80b8 	bgt.w	8008704 <__kernel_rem_pio2+0x32c>
 8008594:	f1bb 0f00 	cmp.w	fp, #0
 8008598:	dd07      	ble.n	80085aa <__kernel_rem_pio2+0x1d2>
 800859a:	f1bb 0f01 	cmp.w	fp, #1
 800859e:	f000 80bf 	beq.w	8008720 <__kernel_rem_pio2+0x348>
 80085a2:	f1bb 0f02 	cmp.w	fp, #2
 80085a6:	f000 80c6 	beq.w	8008736 <__kernel_rem_pio2+0x35e>
 80085aa:	f1b9 0f02 	cmp.w	r9, #2
 80085ae:	d14c      	bne.n	800864a <__kernel_rem_pio2+0x272>
 80085b0:	4632      	mov	r2, r6
 80085b2:	463b      	mov	r3, r7
 80085b4:	494e      	ldr	r1, [pc, #312]	@ (80086f0 <__kernel_rem_pio2+0x318>)
 80085b6:	2000      	movs	r0, #0
 80085b8:	f7f7 ffb0 	bl	800051c <__aeabi_dsub>
 80085bc:	4606      	mov	r6, r0
 80085be:	460f      	mov	r7, r1
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	d042      	beq.n	800864a <__kernel_rem_pio2+0x272>
 80085c4:	4658      	mov	r0, fp
 80085c6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80086e0 <__kernel_rem_pio2+0x308>
 80085ca:	f000 fa5d 	bl	8008a88 <scalbn>
 80085ce:	4630      	mov	r0, r6
 80085d0:	4639      	mov	r1, r7
 80085d2:	ec53 2b10 	vmov	r2, r3, d0
 80085d6:	f7f7 ffa1 	bl	800051c <__aeabi_dsub>
 80085da:	4606      	mov	r6, r0
 80085dc:	460f      	mov	r7, r1
 80085de:	e034      	b.n	800864a <__kernel_rem_pio2+0x272>
 80085e0:	4b44      	ldr	r3, [pc, #272]	@ (80086f4 <__kernel_rem_pio2+0x31c>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085e8:	f7f7 fe6a 	bl	80002c0 <__aeabi_dmul>
 80085ec:	f7f8 f9d6 	bl	800099c <__aeabi_d2iz>
 80085f0:	f7f8 f8e2 	bl	80007b8 <__aeabi_i2d>
 80085f4:	4b40      	ldr	r3, [pc, #256]	@ (80086f8 <__kernel_rem_pio2+0x320>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	4606      	mov	r6, r0
 80085fa:	460f      	mov	r7, r1
 80085fc:	f7f7 fe60 	bl	80002c0 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008608:	f7f7 ff88 	bl	800051c <__aeabi_dsub>
 800860c:	f7f8 f9c6 	bl	800099c <__aeabi_d2iz>
 8008610:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008614:	f849 0b04 	str.w	r0, [r9], #4
 8008618:	4639      	mov	r1, r7
 800861a:	4630      	mov	r0, r6
 800861c:	f7f7 ff80 	bl	8000520 <__adddf3>
 8008620:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008628:	e75d      	b.n	80084e6 <__kernel_rem_pio2+0x10e>
 800862a:	d107      	bne.n	800863c <__kernel_rem_pio2+0x264>
 800862c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008630:	aa0c      	add	r2, sp, #48	@ 0x30
 8008632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008636:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800863a:	e79e      	b.n	800857a <__kernel_rem_pio2+0x1a2>
 800863c:	4b2f      	ldr	r3, [pc, #188]	@ (80086fc <__kernel_rem_pio2+0x324>)
 800863e:	2200      	movs	r2, #0
 8008640:	f7f8 f998 	bl	8000974 <__aeabi_dcmpge>
 8008644:	2800      	cmp	r0, #0
 8008646:	d143      	bne.n	80086d0 <__kernel_rem_pio2+0x2f8>
 8008648:	4681      	mov	r9, r0
 800864a:	2200      	movs	r2, #0
 800864c:	2300      	movs	r3, #0
 800864e:	4630      	mov	r0, r6
 8008650:	4639      	mov	r1, r7
 8008652:	f7f8 f971 	bl	8000938 <__aeabi_dcmpeq>
 8008656:	2800      	cmp	r0, #0
 8008658:	f000 80bf 	beq.w	80087da <__kernel_rem_pio2+0x402>
 800865c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008660:	2200      	movs	r2, #0
 8008662:	9900      	ldr	r1, [sp, #0]
 8008664:	428b      	cmp	r3, r1
 8008666:	da6e      	bge.n	8008746 <__kernel_rem_pio2+0x36e>
 8008668:	2a00      	cmp	r2, #0
 800866a:	f000 8089 	beq.w	8008780 <__kernel_rem_pio2+0x3a8>
 800866e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008672:	ab0c      	add	r3, sp, #48	@ 0x30
 8008674:	f1ab 0b18 	sub.w	fp, fp, #24
 8008678:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f6      	beq.n	800866e <__kernel_rem_pio2+0x296>
 8008680:	4658      	mov	r0, fp
 8008682:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80086e0 <__kernel_rem_pio2+0x308>
 8008686:	f000 f9ff 	bl	8008a88 <scalbn>
 800868a:	f108 0301 	add.w	r3, r8, #1
 800868e:	00da      	lsls	r2, r3, #3
 8008690:	9205      	str	r2, [sp, #20]
 8008692:	ec55 4b10 	vmov	r4, r5, d0
 8008696:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008698:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80086f4 <__kernel_rem_pio2+0x31c>
 800869c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80086a0:	4646      	mov	r6, r8
 80086a2:	f04f 0a00 	mov.w	sl, #0
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	f280 80cf 	bge.w	800884a <__kernel_rem_pio2+0x472>
 80086ac:	4644      	mov	r4, r8
 80086ae:	2c00      	cmp	r4, #0
 80086b0:	f2c0 80fd 	blt.w	80088ae <__kernel_rem_pio2+0x4d6>
 80086b4:	4b12      	ldr	r3, [pc, #72]	@ (8008700 <__kernel_rem_pio2+0x328>)
 80086b6:	461f      	mov	r7, r3
 80086b8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80086ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086be:	9306      	str	r3, [sp, #24]
 80086c0:	f04f 0a00 	mov.w	sl, #0
 80086c4:	f04f 0b00 	mov.w	fp, #0
 80086c8:	2600      	movs	r6, #0
 80086ca:	eba8 0504 	sub.w	r5, r8, r4
 80086ce:	e0e2      	b.n	8008896 <__kernel_rem_pio2+0x4be>
 80086d0:	f04f 0902 	mov.w	r9, #2
 80086d4:	e754      	b.n	8008580 <__kernel_rem_pio2+0x1a8>
 80086d6:	bf00      	nop
	...
 80086e4:	3ff00000 	.word	0x3ff00000
 80086e8:	08008fb0 	.word	0x08008fb0
 80086ec:	40200000 	.word	0x40200000
 80086f0:	3ff00000 	.word	0x3ff00000
 80086f4:	3e700000 	.word	0x3e700000
 80086f8:	41700000 	.word	0x41700000
 80086fc:	3fe00000 	.word	0x3fe00000
 8008700:	08008f70 	.word	0x08008f70
 8008704:	f854 3b04 	ldr.w	r3, [r4], #4
 8008708:	b945      	cbnz	r5, 800871c <__kernel_rem_pio2+0x344>
 800870a:	b123      	cbz	r3, 8008716 <__kernel_rem_pio2+0x33e>
 800870c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008710:	f844 3c04 	str.w	r3, [r4, #-4]
 8008714:	2301      	movs	r3, #1
 8008716:	3201      	adds	r2, #1
 8008718:	461d      	mov	r5, r3
 800871a:	e738      	b.n	800858e <__kernel_rem_pio2+0x1b6>
 800871c:	1acb      	subs	r3, r1, r3
 800871e:	e7f7      	b.n	8008710 <__kernel_rem_pio2+0x338>
 8008720:	f108 32ff 	add.w	r2, r8, #4294967295
 8008724:	ab0c      	add	r3, sp, #48	@ 0x30
 8008726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800872e:	a90c      	add	r1, sp, #48	@ 0x30
 8008730:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008734:	e739      	b.n	80085aa <__kernel_rem_pio2+0x1d2>
 8008736:	f108 32ff 	add.w	r2, r8, #4294967295
 800873a:	ab0c      	add	r3, sp, #48	@ 0x30
 800873c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008740:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008744:	e7f3      	b.n	800872e <__kernel_rem_pio2+0x356>
 8008746:	a90c      	add	r1, sp, #48	@ 0x30
 8008748:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800874c:	3b01      	subs	r3, #1
 800874e:	430a      	orrs	r2, r1
 8008750:	e787      	b.n	8008662 <__kernel_rem_pio2+0x28a>
 8008752:	3401      	adds	r4, #1
 8008754:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008758:	2a00      	cmp	r2, #0
 800875a:	d0fa      	beq.n	8008752 <__kernel_rem_pio2+0x37a>
 800875c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800875e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008762:	eb0d 0503 	add.w	r5, sp, r3
 8008766:	9b06      	ldr	r3, [sp, #24]
 8008768:	aa20      	add	r2, sp, #128	@ 0x80
 800876a:	4443      	add	r3, r8
 800876c:	f108 0701 	add.w	r7, r8, #1
 8008770:	3d98      	subs	r5, #152	@ 0x98
 8008772:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8008776:	4444      	add	r4, r8
 8008778:	42bc      	cmp	r4, r7
 800877a:	da04      	bge.n	8008786 <__kernel_rem_pio2+0x3ae>
 800877c:	46a0      	mov	r8, r4
 800877e:	e6a2      	b.n	80084c6 <__kernel_rem_pio2+0xee>
 8008780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008782:	2401      	movs	r4, #1
 8008784:	e7e6      	b.n	8008754 <__kernel_rem_pio2+0x37c>
 8008786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008788:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800878c:	f7f8 f814 	bl	80007b8 <__aeabi_i2d>
 8008790:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8008a58 <__kernel_rem_pio2+0x680>
 8008794:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008798:	ed8d 7b02 	vstr	d7, [sp, #8]
 800879c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087a0:	46b2      	mov	sl, r6
 80087a2:	f04f 0800 	mov.w	r8, #0
 80087a6:	9b05      	ldr	r3, [sp, #20]
 80087a8:	4598      	cmp	r8, r3
 80087aa:	dd05      	ble.n	80087b8 <__kernel_rem_pio2+0x3e0>
 80087ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087b0:	3701      	adds	r7, #1
 80087b2:	eca5 7b02 	vstmia	r5!, {d7}
 80087b6:	e7df      	b.n	8008778 <__kernel_rem_pio2+0x3a0>
 80087b8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80087bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80087c0:	f7f7 fd7e 	bl	80002c0 <__aeabi_dmul>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087cc:	f7f7 fea8 	bl	8000520 <__adddf3>
 80087d0:	f108 0801 	add.w	r8, r8, #1
 80087d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087d8:	e7e5      	b.n	80087a6 <__kernel_rem_pio2+0x3ce>
 80087da:	f1cb 0000 	rsb	r0, fp, #0
 80087de:	ec47 6b10 	vmov	d0, r6, r7
 80087e2:	f000 f951 	bl	8008a88 <scalbn>
 80087e6:	ec55 4b10 	vmov	r4, r5, d0
 80087ea:	4b9d      	ldr	r3, [pc, #628]	@ (8008a60 <__kernel_rem_pio2+0x688>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	4620      	mov	r0, r4
 80087f0:	4629      	mov	r1, r5
 80087f2:	f7f8 f8bf 	bl	8000974 <__aeabi_dcmpge>
 80087f6:	b300      	cbz	r0, 800883a <__kernel_rem_pio2+0x462>
 80087f8:	4b9a      	ldr	r3, [pc, #616]	@ (8008a64 <__kernel_rem_pio2+0x68c>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	4620      	mov	r0, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	f7f7 fd5e 	bl	80002c0 <__aeabi_dmul>
 8008804:	f7f8 f8ca 	bl	800099c <__aeabi_d2iz>
 8008808:	4606      	mov	r6, r0
 800880a:	f7f7 ffd5 	bl	80007b8 <__aeabi_i2d>
 800880e:	4b94      	ldr	r3, [pc, #592]	@ (8008a60 <__kernel_rem_pio2+0x688>)
 8008810:	2200      	movs	r2, #0
 8008812:	f7f7 fd55 	bl	80002c0 <__aeabi_dmul>
 8008816:	460b      	mov	r3, r1
 8008818:	4602      	mov	r2, r0
 800881a:	4629      	mov	r1, r5
 800881c:	4620      	mov	r0, r4
 800881e:	f7f7 fe7d 	bl	800051c <__aeabi_dsub>
 8008822:	f7f8 f8bb 	bl	800099c <__aeabi_d2iz>
 8008826:	ab0c      	add	r3, sp, #48	@ 0x30
 8008828:	f10b 0b18 	add.w	fp, fp, #24
 800882c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008830:	f108 0801 	add.w	r8, r8, #1
 8008834:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008838:	e722      	b.n	8008680 <__kernel_rem_pio2+0x2a8>
 800883a:	4620      	mov	r0, r4
 800883c:	4629      	mov	r1, r5
 800883e:	f7f8 f8ad 	bl	800099c <__aeabi_d2iz>
 8008842:	ab0c      	add	r3, sp, #48	@ 0x30
 8008844:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008848:	e71a      	b.n	8008680 <__kernel_rem_pio2+0x2a8>
 800884a:	ab0c      	add	r3, sp, #48	@ 0x30
 800884c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008850:	f7f7 ffb2 	bl	80007b8 <__aeabi_i2d>
 8008854:	4622      	mov	r2, r4
 8008856:	462b      	mov	r3, r5
 8008858:	f7f7 fd32 	bl	80002c0 <__aeabi_dmul>
 800885c:	4652      	mov	r2, sl
 800885e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8008862:	465b      	mov	r3, fp
 8008864:	4620      	mov	r0, r4
 8008866:	4629      	mov	r1, r5
 8008868:	f7f7 fd2a 	bl	80002c0 <__aeabi_dmul>
 800886c:	3e01      	subs	r6, #1
 800886e:	4604      	mov	r4, r0
 8008870:	460d      	mov	r5, r1
 8008872:	e718      	b.n	80086a6 <__kernel_rem_pio2+0x2ce>
 8008874:	9906      	ldr	r1, [sp, #24]
 8008876:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800887a:	9106      	str	r1, [sp, #24]
 800887c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008880:	f7f7 fd1e 	bl	80002c0 <__aeabi_dmul>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4650      	mov	r0, sl
 800888a:	4659      	mov	r1, fp
 800888c:	f7f7 fe48 	bl	8000520 <__adddf3>
 8008890:	3601      	adds	r6, #1
 8008892:	4682      	mov	sl, r0
 8008894:	468b      	mov	fp, r1
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	429e      	cmp	r6, r3
 800889a:	dc01      	bgt.n	80088a0 <__kernel_rem_pio2+0x4c8>
 800889c:	42b5      	cmp	r5, r6
 800889e:	dae9      	bge.n	8008874 <__kernel_rem_pio2+0x49c>
 80088a0:	ab48      	add	r3, sp, #288	@ 0x120
 80088a2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80088a6:	e9c5 ab00 	strd	sl, fp, [r5]
 80088aa:	3c01      	subs	r4, #1
 80088ac:	e6ff      	b.n	80086ae <__kernel_rem_pio2+0x2d6>
 80088ae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	dc0b      	bgt.n	80088cc <__kernel_rem_pio2+0x4f4>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc39      	bgt.n	800892c <__kernel_rem_pio2+0x554>
 80088b8:	d05d      	beq.n	8008976 <__kernel_rem_pio2+0x59e>
 80088ba:	9b02      	ldr	r3, [sp, #8]
 80088bc:	f003 0007 	and.w	r0, r3, #7
 80088c0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80088c4:	ecbd 8b02 	vpop	{d8}
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088cc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d1f3      	bne.n	80088ba <__kernel_rem_pio2+0x4e2>
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80088d8:	eb0d 0403 	add.w	r4, sp, r3
 80088dc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80088e0:	4625      	mov	r5, r4
 80088e2:	46c2      	mov	sl, r8
 80088e4:	f1ba 0f00 	cmp.w	sl, #0
 80088e8:	f1a5 0508 	sub.w	r5, r5, #8
 80088ec:	dc6b      	bgt.n	80089c6 <__kernel_rem_pio2+0x5ee>
 80088ee:	4645      	mov	r5, r8
 80088f0:	2d01      	cmp	r5, #1
 80088f2:	f1a4 0408 	sub.w	r4, r4, #8
 80088f6:	f300 8087 	bgt.w	8008a08 <__kernel_rem_pio2+0x630>
 80088fa:	9c05      	ldr	r4, [sp, #20]
 80088fc:	ab48      	add	r3, sp, #288	@ 0x120
 80088fe:	441c      	add	r4, r3
 8008900:	2000      	movs	r0, #0
 8008902:	2100      	movs	r1, #0
 8008904:	f1b8 0f01 	cmp.w	r8, #1
 8008908:	f300 809c 	bgt.w	8008a44 <__kernel_rem_pio2+0x66c>
 800890c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8008910:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8008914:	f1b9 0f00 	cmp.w	r9, #0
 8008918:	f040 80a6 	bne.w	8008a68 <__kernel_rem_pio2+0x690>
 800891c:	9b04      	ldr	r3, [sp, #16]
 800891e:	e9c3 7800 	strd	r7, r8, [r3]
 8008922:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008926:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800892a:	e7c6      	b.n	80088ba <__kernel_rem_pio2+0x4e2>
 800892c:	9d05      	ldr	r5, [sp, #20]
 800892e:	ab48      	add	r3, sp, #288	@ 0x120
 8008930:	441d      	add	r5, r3
 8008932:	4644      	mov	r4, r8
 8008934:	2000      	movs	r0, #0
 8008936:	2100      	movs	r1, #0
 8008938:	2c00      	cmp	r4, #0
 800893a:	da35      	bge.n	80089a8 <__kernel_rem_pio2+0x5d0>
 800893c:	f1b9 0f00 	cmp.w	r9, #0
 8008940:	d038      	beq.n	80089b4 <__kernel_rem_pio2+0x5dc>
 8008942:	4602      	mov	r2, r0
 8008944:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008948:	9c04      	ldr	r4, [sp, #16]
 800894a:	e9c4 2300 	strd	r2, r3, [r4]
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8008956:	f7f7 fde1 	bl	800051c <__aeabi_dsub>
 800895a:	ad4a      	add	r5, sp, #296	@ 0x128
 800895c:	2401      	movs	r4, #1
 800895e:	45a0      	cmp	r8, r4
 8008960:	da2b      	bge.n	80089ba <__kernel_rem_pio2+0x5e2>
 8008962:	f1b9 0f00 	cmp.w	r9, #0
 8008966:	d002      	beq.n	800896e <__kernel_rem_pio2+0x596>
 8008968:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800896c:	4619      	mov	r1, r3
 800896e:	9b04      	ldr	r3, [sp, #16]
 8008970:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008974:	e7a1      	b.n	80088ba <__kernel_rem_pio2+0x4e2>
 8008976:	9c05      	ldr	r4, [sp, #20]
 8008978:	ab48      	add	r3, sp, #288	@ 0x120
 800897a:	441c      	add	r4, r3
 800897c:	2000      	movs	r0, #0
 800897e:	2100      	movs	r1, #0
 8008980:	f1b8 0f00 	cmp.w	r8, #0
 8008984:	da09      	bge.n	800899a <__kernel_rem_pio2+0x5c2>
 8008986:	f1b9 0f00 	cmp.w	r9, #0
 800898a:	d002      	beq.n	8008992 <__kernel_rem_pio2+0x5ba>
 800898c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008990:	4619      	mov	r1, r3
 8008992:	9b04      	ldr	r3, [sp, #16]
 8008994:	e9c3 0100 	strd	r0, r1, [r3]
 8008998:	e78f      	b.n	80088ba <__kernel_rem_pio2+0x4e2>
 800899a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800899e:	f7f7 fdbf 	bl	8000520 <__adddf3>
 80089a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80089a6:	e7eb      	b.n	8008980 <__kernel_rem_pio2+0x5a8>
 80089a8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80089ac:	f7f7 fdb8 	bl	8000520 <__adddf3>
 80089b0:	3c01      	subs	r4, #1
 80089b2:	e7c1      	b.n	8008938 <__kernel_rem_pio2+0x560>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	e7c6      	b.n	8008948 <__kernel_rem_pio2+0x570>
 80089ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80089be:	f7f7 fdaf 	bl	8000520 <__adddf3>
 80089c2:	3401      	adds	r4, #1
 80089c4:	e7cb      	b.n	800895e <__kernel_rem_pio2+0x586>
 80089c6:	ed95 7b00 	vldr	d7, [r5]
 80089ca:	ed8d 7b00 	vstr	d7, [sp]
 80089ce:	ed95 7b02 	vldr	d7, [r5, #8]
 80089d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089d6:	ec53 2b17 	vmov	r2, r3, d7
 80089da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089de:	f7f7 fd9f 	bl	8000520 <__adddf3>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4606      	mov	r6, r0
 80089e8:	460f      	mov	r7, r1
 80089ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089ee:	f7f7 fd95 	bl	800051c <__aeabi_dsub>
 80089f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089f6:	f7f7 fd93 	bl	8000520 <__adddf3>
 80089fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008a02:	e9c5 6700 	strd	r6, r7, [r5]
 8008a06:	e76d      	b.n	80088e4 <__kernel_rem_pio2+0x50c>
 8008a08:	ed94 7b00 	vldr	d7, [r4]
 8008a0c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008a10:	ec51 0b17 	vmov	r0, r1, d7
 8008a14:	4652      	mov	r2, sl
 8008a16:	465b      	mov	r3, fp
 8008a18:	ed8d 7b00 	vstr	d7, [sp]
 8008a1c:	f7f7 fd80 	bl	8000520 <__adddf3>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4606      	mov	r6, r0
 8008a26:	460f      	mov	r7, r1
 8008a28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a2c:	f7f7 fd76 	bl	800051c <__aeabi_dsub>
 8008a30:	4652      	mov	r2, sl
 8008a32:	465b      	mov	r3, fp
 8008a34:	f7f7 fd74 	bl	8000520 <__adddf3>
 8008a38:	3d01      	subs	r5, #1
 8008a3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a3e:	e9c4 6700 	strd	r6, r7, [r4]
 8008a42:	e755      	b.n	80088f0 <__kernel_rem_pio2+0x518>
 8008a44:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a48:	f7f7 fd6a 	bl	8000520 <__adddf3>
 8008a4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a50:	e758      	b.n	8008904 <__kernel_rem_pio2+0x52c>
 8008a52:	bf00      	nop
 8008a54:	f3af 8000 	nop.w
	...
 8008a60:	41700000 	.word	0x41700000
 8008a64:	3e700000 	.word	0x3e700000
 8008a68:	9b04      	ldr	r3, [sp, #16]
 8008a6a:	9a04      	ldr	r2, [sp, #16]
 8008a6c:	601f      	str	r7, [r3, #0]
 8008a6e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8008a72:	605c      	str	r4, [r3, #4]
 8008a74:	609d      	str	r5, [r3, #8]
 8008a76:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a7a:	60d3      	str	r3, [r2, #12]
 8008a7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a80:	6110      	str	r0, [r2, #16]
 8008a82:	6153      	str	r3, [r2, #20]
 8008a84:	e719      	b.n	80088ba <__kernel_rem_pio2+0x4e2>
 8008a86:	bf00      	nop

08008a88 <scalbn>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	ec55 4b10 	vmov	r4, r5, d0
 8008a8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008a92:	4606      	mov	r6, r0
 8008a94:	462b      	mov	r3, r5
 8008a96:	b991      	cbnz	r1, 8008abe <scalbn+0x36>
 8008a98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008a9c:	4323      	orrs	r3, r4
 8008a9e:	d03d      	beq.n	8008b1c <scalbn+0x94>
 8008aa0:	4b35      	ldr	r3, [pc, #212]	@ (8008b78 <scalbn+0xf0>)
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f7f7 fc0a 	bl	80002c0 <__aeabi_dmul>
 8008aac:	4b33      	ldr	r3, [pc, #204]	@ (8008b7c <scalbn+0xf4>)
 8008aae:	429e      	cmp	r6, r3
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	460d      	mov	r5, r1
 8008ab4:	da0f      	bge.n	8008ad6 <scalbn+0x4e>
 8008ab6:	a328      	add	r3, pc, #160	@ (adr r3, 8008b58 <scalbn+0xd0>)
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	e01e      	b.n	8008afc <scalbn+0x74>
 8008abe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	d10b      	bne.n	8008ade <scalbn+0x56>
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4620      	mov	r0, r4
 8008aca:	4629      	mov	r1, r5
 8008acc:	f7f7 fd28 	bl	8000520 <__adddf3>
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	e022      	b.n	8008b1c <scalbn+0x94>
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008adc:	3936      	subs	r1, #54	@ 0x36
 8008ade:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008ae2:	4296      	cmp	r6, r2
 8008ae4:	dd0d      	ble.n	8008b02 <scalbn+0x7a>
 8008ae6:	2d00      	cmp	r5, #0
 8008ae8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008b60 <scalbn+0xd8>)
 8008aea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aee:	da02      	bge.n	8008af6 <scalbn+0x6e>
 8008af0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008b68 <scalbn+0xe0>)
 8008af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008af6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008b60 <scalbn+0xd8>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 fbe0 	bl	80002c0 <__aeabi_dmul>
 8008b00:	e7e6      	b.n	8008ad0 <scalbn+0x48>
 8008b02:	1872      	adds	r2, r6, r1
 8008b04:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008b08:	428a      	cmp	r2, r1
 8008b0a:	dcec      	bgt.n	8008ae6 <scalbn+0x5e>
 8008b0c:	2a00      	cmp	r2, #0
 8008b0e:	dd08      	ble.n	8008b22 <scalbn+0x9a>
 8008b10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008b14:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008b18:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b1c:	ec45 4b10 	vmov	d0, r4, r5
 8008b20:	bd70      	pop	{r4, r5, r6, pc}
 8008b22:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008b26:	da08      	bge.n	8008b3a <scalbn+0xb2>
 8008b28:	2d00      	cmp	r5, #0
 8008b2a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008b58 <scalbn+0xd0>)
 8008b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b30:	dac1      	bge.n	8008ab6 <scalbn+0x2e>
 8008b32:	a10f      	add	r1, pc, #60	@ (adr r1, 8008b70 <scalbn+0xe8>)
 8008b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b38:	e7bd      	b.n	8008ab6 <scalbn+0x2e>
 8008b3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008b3e:	3236      	adds	r2, #54	@ 0x36
 8008b40:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008b44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b48:	4620      	mov	r0, r4
 8008b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b80 <scalbn+0xf8>)
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	2200      	movs	r2, #0
 8008b50:	e7d4      	b.n	8008afc <scalbn+0x74>
 8008b52:	bf00      	nop
 8008b54:	f3af 8000 	nop.w
 8008b58:	c2f8f359 	.word	0xc2f8f359
 8008b5c:	01a56e1f 	.word	0x01a56e1f
 8008b60:	8800759c 	.word	0x8800759c
 8008b64:	7e37e43c 	.word	0x7e37e43c
 8008b68:	8800759c 	.word	0x8800759c
 8008b6c:	fe37e43c 	.word	0xfe37e43c
 8008b70:	c2f8f359 	.word	0xc2f8f359
 8008b74:	81a56e1f 	.word	0x81a56e1f
 8008b78:	43500000 	.word	0x43500000
 8008b7c:	ffff3cb0 	.word	0xffff3cb0
 8008b80:	3c900000 	.word	0x3c900000
 8008b84:	00000000 	.word	0x00000000

08008b88 <floor>:
 8008b88:	ec51 0b10 	vmov	r0, r1, d0
 8008b8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008b98:	2e13      	cmp	r6, #19
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	4680      	mov	r8, r0
 8008ba0:	dc34      	bgt.n	8008c0c <floor+0x84>
 8008ba2:	2e00      	cmp	r6, #0
 8008ba4:	da17      	bge.n	8008bd6 <floor+0x4e>
 8008ba6:	a332      	add	r3, pc, #200	@ (adr r3, 8008c70 <floor+0xe8>)
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	f7f7 fcb8 	bl	8000520 <__adddf3>
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f7f7 fee8 	bl	8000988 <__aeabi_dcmpgt>
 8008bb8:	b150      	cbz	r0, 8008bd0 <floor+0x48>
 8008bba:	2c00      	cmp	r4, #0
 8008bbc:	da55      	bge.n	8008c6a <floor+0xe2>
 8008bbe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008bc2:	432c      	orrs	r4, r5
 8008bc4:	2500      	movs	r5, #0
 8008bc6:	42ac      	cmp	r4, r5
 8008bc8:	4c2b      	ldr	r4, [pc, #172]	@ (8008c78 <floor+0xf0>)
 8008bca:	bf08      	it	eq
 8008bcc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	e023      	b.n	8008c1e <floor+0x96>
 8008bd6:	4f29      	ldr	r7, [pc, #164]	@ (8008c7c <floor+0xf4>)
 8008bd8:	4137      	asrs	r7, r6
 8008bda:	ea01 0307 	and.w	r3, r1, r7
 8008bde:	4303      	orrs	r3, r0
 8008be0:	d01d      	beq.n	8008c1e <floor+0x96>
 8008be2:	a323      	add	r3, pc, #140	@ (adr r3, 8008c70 <floor+0xe8>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fc9a 	bl	8000520 <__adddf3>
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f7f7 feca 	bl	8000988 <__aeabi_dcmpgt>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d0eb      	beq.n	8008bd0 <floor+0x48>
 8008bf8:	2c00      	cmp	r4, #0
 8008bfa:	bfbe      	ittt	lt
 8008bfc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008c00:	4133      	asrlt	r3, r6
 8008c02:	18e4      	addlt	r4, r4, r3
 8008c04:	ea24 0407 	bic.w	r4, r4, r7
 8008c08:	2500      	movs	r5, #0
 8008c0a:	e7e1      	b.n	8008bd0 <floor+0x48>
 8008c0c:	2e33      	cmp	r6, #51	@ 0x33
 8008c0e:	dd0a      	ble.n	8008c26 <floor+0x9e>
 8008c10:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008c14:	d103      	bne.n	8008c1e <floor+0x96>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	f7f7 fc81 	bl	8000520 <__adddf3>
 8008c1e:	ec41 0b10 	vmov	d0, r0, r1
 8008c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c26:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008c2a:	f04f 37ff 	mov.w	r7, #4294967295
 8008c2e:	40df      	lsrs	r7, r3
 8008c30:	4207      	tst	r7, r0
 8008c32:	d0f4      	beq.n	8008c1e <floor+0x96>
 8008c34:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c70 <floor+0xe8>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fc71 	bl	8000520 <__adddf3>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2300      	movs	r3, #0
 8008c42:	f7f7 fea1 	bl	8000988 <__aeabi_dcmpgt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d0c2      	beq.n	8008bd0 <floor+0x48>
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	da0a      	bge.n	8008c64 <floor+0xdc>
 8008c4e:	2e14      	cmp	r6, #20
 8008c50:	d101      	bne.n	8008c56 <floor+0xce>
 8008c52:	3401      	adds	r4, #1
 8008c54:	e006      	b.n	8008c64 <floor+0xdc>
 8008c56:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	40b3      	lsls	r3, r6
 8008c5e:	441d      	add	r5, r3
 8008c60:	4545      	cmp	r5, r8
 8008c62:	d3f6      	bcc.n	8008c52 <floor+0xca>
 8008c64:	ea25 0507 	bic.w	r5, r5, r7
 8008c68:	e7b2      	b.n	8008bd0 <floor+0x48>
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	462c      	mov	r4, r5
 8008c6e:	e7af      	b.n	8008bd0 <floor+0x48>
 8008c70:	8800759c 	.word	0x8800759c
 8008c74:	7e37e43c 	.word	0x7e37e43c
 8008c78:	bff00000 	.word	0xbff00000
 8008c7c:	000fffff 	.word	0x000fffff

08008c80 <_init>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	bf00      	nop
 8008c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c86:	bc08      	pop	{r3}
 8008c88:	469e      	mov	lr, r3
 8008c8a:	4770      	bx	lr

08008c8c <_fini>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr
