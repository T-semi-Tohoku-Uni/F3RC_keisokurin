
F3RC_keisokurin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006680  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006860  08006860  00007860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006934  08006934  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006934  08006934  00007934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800693c  0800693c  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800693c  0800693c  0000793c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006940  08006940  00007940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006944  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000074  080069b8  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080069b8  0000848c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019780  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d84  00000000  00000000  00021824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000245a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001190  00000000  00000000  00025c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028696  00000000  00000000  00026da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a540  00000000  00000000  0004f436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105e2c  00000000  00000000  00069976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f7a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006930  00000000  00000000  0016f7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00176118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006848 	.word	0x08006848

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006848 	.word	0x08006848

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
		TxData[1] = (uint8_t)(encoder[0].count & 0xff);
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
			Error_Handler();
		}
	}*/
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <read_encoder_value>:

int16_t read_encoder_value(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
  int32_t count_t = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
  uint32_t enc_buff = TIM5->CNT;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <read_encoder_value+0x3c>)
 80005d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005d2:	603b      	str	r3, [r7, #0]
  TIM5->CNT = 0;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <read_encoder_value+0x3c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (enc_buff > 0x8fffffff)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f1b3 4f10 	cmp.w	r3, #2415919104	@ 0x90000000
 80005e0:	d303      	bcc.n	80005ea <read_encoder_value+0x26>
  {
    count_t = (int32_t)enc_buff*-1;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	425b      	negs	r3, r3
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	e001      	b.n	80005ee <read_encoder_value+0x2a>
  }
  else
  {
    count_t = (int32_t)enc_buff;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	607b      	str	r3, [r7, #4]
  }
  return count_t;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	b21b      	sxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40000c00 	.word	0x40000c00

08000604 <FDCAN_TxSettings>:


void FDCAN_TxSettings(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	  TxHeader.Identifier = 0x300;
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <FDCAN_TxSettings+0x5c>)
 800060a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800060e:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000610:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <FDCAN_TxSettings+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <FDCAN_TxSettings+0x5c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <FDCAN_TxSettings+0x5c>)
 800061e:	2208      	movs	r2, #8
 8000620:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <FDCAN_TxSettings+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <FDCAN_TxSettings+0x5c>)
 800062a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800062e:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <FDCAN_TxSettings+0x5c>)
 8000632:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000636:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <FDCAN_TxSettings+0x5c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0;
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <FDCAN_TxSettings+0x5c>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000644:	4807      	ldr	r0, [pc, #28]	@ (8000664 <FDCAN_TxSettings+0x60>)
 8000646:	f001 fa95 	bl	8001b74 <HAL_FDCAN_Start>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d004      	beq.n	800065a <FDCAN_TxSettings+0x56>
		  printf("fdcan_start is error\r\n");
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <FDCAN_TxSettings+0x64>)
 8000652:	f005 f9d1 	bl	80059f8 <puts>
		  Error_Handler();
 8000656:	f000 fb69 	bl	8000d2c <Error_Handler>
	  }
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000030c 	.word	0x2000030c
 8000664:	20000090 	.word	0x20000090
 8000668:	08006860 	.word	0x08006860

0800066c <_write>:

int _write(int file, char *ptr, int len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	b29a      	uxth	r2, r3
 800067c:	230a      	movs	r3, #10
 800067e:	68b9      	ldr	r1, [r7, #8]
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <_write+0x24>)
 8000682:	f003 fe3e 	bl	8004302 <HAL_UART_Transmit>
    return len;
 8000686:	687b      	ldr	r3, [r7, #4]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000278 	.word	0x20000278

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000698:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <main+0xac>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 f9b1 	bl	8005a08 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f000 fea8 	bl	80013fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f85d 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 fad3 	bl	8000c58 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006b2:	f000 f92d 	bl	8000910 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006b6:	f000 f99f 	bl	80009f8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006ba:	f000 f9f3 	bl	8000aa4 <MX_TIM5_Init>
  MX_I2C1_Init();
 80006be:	f000 f8e7 	bl	8000890 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 fa7b 	bl	8000bbc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80006c6:	f000 fa43 	bl	8000b50 <MX_TIM6_Init>
  MX_FDCAN1_Init();
 80006ca:	f000 f899 	bl	8000800 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  printf("encoder start\r\n");
 80006ce:	481d      	ldr	r0, [pc, #116]	@ (8000744 <main+0xb0>)
 80006d0:	f005 f992 	bl	80059f8 <puts>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80006d4:	213c      	movs	r1, #60	@ 0x3c
 80006d6:	481c      	ldr	r0, [pc, #112]	@ (8000748 <main+0xb4>)
 80006d8:	f003 f9ac 	bl	8003a34 <HAL_TIM_Encoder_Start>
  printf("can tx start\r\n");
 80006dc:	481b      	ldr	r0, [pc, #108]	@ (800074c <main+0xb8>)
 80006de:	f005 f98b 	bl	80059f8 <puts>
  FDCAN_TxSettings();
 80006e2:	f7ff ff8f 	bl	8000604 <FDCAN_TxSettings>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim6);
 80006e6:	481a      	ldr	r0, [pc, #104]	@ (8000750 <main+0xbc>)
 80006e8:	f003 f886 	bl	80037f8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  encoder[0].count = read_encoder_value();
 80006ec:	f7ff ff6a 	bl	80005c4 <read_encoder_value>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <main+0xc0>)
 80006f6:	805a      	strh	r2, [r3, #2]
	  printf("encoder:%d\n\r", encoder[0].count);
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <main+0xc0>)
 80006fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006fe:	4619      	mov	r1, r3
 8000700:	4815      	ldr	r0, [pc, #84]	@ (8000758 <main+0xc4>)
 8000702:	f005 f911 	bl	8005928 <iprintf>
	  TxData[0] = encoder[0].count >> 8;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <main+0xc0>)
 8000708:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800070c:	121b      	asrs	r3, r3, #8
 800070e:	b21b      	sxth	r3, r3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <main+0xc8>)
 8000714:	701a      	strb	r2, [r3, #0]
	  TxData[1] = (uint8_t)(encoder[0].count & 0xff);
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <main+0xc0>)
 8000718:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <main+0xc8>)
 8000720:	705a      	strb	r2, [r3, #1]
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000722:	4a0e      	ldr	r2, [pc, #56]	@ (800075c <main+0xc8>)
 8000724:	490e      	ldr	r1, [pc, #56]	@ (8000760 <main+0xcc>)
 8000726:	480f      	ldr	r0, [pc, #60]	@ (8000764 <main+0xd0>)
 8000728:	f001 fa4c 	bl	8001bc4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <main+0xa2>
		  Error_Handler();
 8000732:	f000 fafb 	bl	8000d2c <Error_Handler>
	  }

	  HAL_Delay(10);
 8000736:	200a      	movs	r0, #10
 8000738:	f000 fed0 	bl	80014dc <HAL_Delay>
	  encoder[0].count = read_encoder_value();
 800073c:	e7d6      	b.n	80006ec <main+0x58>
 800073e:	bf00      	nop
 8000740:	20000024 	.word	0x20000024
 8000744:	08006878 	.word	0x08006878
 8000748:	200001e0 	.word	0x200001e0
 800074c:	08006888 	.word	0x08006888
 8000750:	2000022c 	.word	0x2000022c
 8000754:	20000000 	.word	0x20000000
 8000758:	08006898 	.word	0x08006898
 800075c:	20000330 	.word	0x20000330
 8000760:	2000030c 	.word	0x2000030c
 8000764:	20000090 	.word	0x20000090

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	@ 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2238      	movs	r2, #56	@ 0x38
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f005 fada 	bl	8005d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800078e:	f001 ffab 	bl	80026e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2340      	movs	r3, #64	@ 0x40
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007ac:	230a      	movs	r3, #10
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 f845 	bl	8002850 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007cc:	f000 faae 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2303      	movs	r3, #3
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2102      	movs	r1, #2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fb43 	bl	8002e74 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007f4:	f000 fa9a 	bl	8000d2c <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	@ 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000806:	4a21      	ldr	r2, [pc, #132]	@ (800088c <MX_FDCAN1_Init+0x8c>)
 8000808:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000812:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000816:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000820:	2200      	movs	r2, #0
 8000822:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000826:	2200      	movs	r2, #0
 8000828:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 800082c:	2200      	movs	r2, #0
 800082e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000832:	2204      	movs	r2, #4
 8000834:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000838:	2201      	movs	r2, #1
 800083a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 800083e:	220f      	movs	r2, #15
 8000840:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2*2;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000844:	2204      	movs	r2, #4
 8000846:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 800084a:	2202      	movs	r2, #2
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000850:	2201      	movs	r2, #1
 8000852:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000856:	220f      	movs	r2, #15
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 800085c:	2204      	movs	r2, #4
 800085e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000862:	2201      	movs	r2, #1
 8000864:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000868:	2200      	movs	r2, #0
 800086a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 800086e:	2200      	movs	r2, #0
 8000870:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_FDCAN1_Init+0x88>)
 8000874:	f001 f824 	bl	80018c0 <HAL_FDCAN_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800087e:	f000 fa55 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000090 	.word	0x20000090
 800088c:	40006400 	.word	0x40006400

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_I2C1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	@ (8000908 <MX_I2C1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800089a:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <MX_I2C1_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	@ (800090c <MX_I2C1_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ca:	480e      	ldr	r0, [pc, #56]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008cc:	f001 fdda 	bl	8002484 <HAL_I2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 fa29 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008de:	f001 fe6c 	bl	80025ba <HAL_I2CEx_ConfigAnalogFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 fa20 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_I2C1_Init+0x74>)
 80008f0:	f001 feae 	bl	8002650 <HAL_I2CEx_ConfigDigitalFilter>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 fa17 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000f4 	.word	0x200000f4
 8000908:	40005400 	.word	0x40005400
 800090c:	10909cec 	.word	0x10909cec

08000910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b092      	sub	sp, #72	@ 0x48
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	2224      	movs	r2, #36	@ 0x24
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f005 fa06 	bl	8005d30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000940:	4b2c      	ldr	r3, [pc, #176]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000942:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000948:	4b2a      	ldr	r3, [pc, #168]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000954:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b24      	ldr	r3, [pc, #144]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000968:	2301      	movs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC1Filter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800097c:	2300      	movs	r3, #0
 800097e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000980:	2301      	movs	r3, #1
 8000982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfig.IC2Filter = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800098c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	4818      	ldr	r0, [pc, #96]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 8000994:	f002 ffa8 	bl	80038e8 <HAL_TIM_Encoder_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800099e:	f000 f9c5 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4810      	ldr	r0, [pc, #64]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 80009b2:	f003 fb3f 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80009bc:	f000 f9b6 	bl	8000d2c <Error_Handler>
  }
  sEncoderIndexConfig.Polarity = TIM_ENCODERINDEX_POLARITY_NONINVERTED;
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  sEncoderIndexConfig.Filter = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	733b      	strb	r3, [r7, #12]
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_ConfigEncoderIndex(&htim2, &sEncoderIndexConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_TIM2_Init+0xe4>)
 80009de:	f003 fbbf 	bl	8004160 <HAL_TIMEx_ConfigEncoderIndex>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80009e8:	f000 f9a0 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3748      	adds	r7, #72	@ 0x48
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000148 	.word	0x20000148

080009f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2224      	movs	r2, #36	@ 0x24
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f005 f992 	bl	8005d30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <MX_TIM3_Init+0xa4>)
 8000a18:	4a21      	ldr	r2, [pc, #132]	@ (8000aa0 <MX_TIM3_Init+0xa8>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_TIM3_Init+0xa4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b1e      	ldr	r3, [pc, #120]	@ (8000a9c <MX_TIM3_Init+0xa4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a28:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_TIM3_Init+0xa4>)
 8000a2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_TIM3_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_TIM3_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a44:	2301      	movs	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a54:	2301      	movs	r3, #1
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4619      	mov	r1, r3
 8000a66:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <MX_TIM3_Init+0xa4>)
 8000a68:	f002 ff3e 	bl	80038e8 <HAL_TIM_Encoder_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000a72:	f000 f95b 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4619      	mov	r1, r3
 8000a82:	4806      	ldr	r0, [pc, #24]	@ (8000a9c <MX_TIM3_Init+0xa4>)
 8000a84:	f003 fad6 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000a8e:	f000 f94d 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	@ 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000194 	.word	0x20000194
 8000aa0:	40000400 	.word	0x40000400

08000aa4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	@ 0x30
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2224      	movs	r2, #36	@ 0x24
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f005 f93c 	bl	8005d30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <MX_TIM5_Init+0xa4>)
 8000ac4:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <MX_TIM5_Init+0xa8>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <MX_TIM5_Init+0xa4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <MX_TIM5_Init+0xa4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <MX_TIM5_Init+0xa4>)
 8000ad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ada:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_TIM5_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <MX_TIM5_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b00:	2301      	movs	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <MX_TIM5_Init+0xa4>)
 8000b14:	f002 fee8 	bl	80038e8 <HAL_TIM_Encoder_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000b1e:	f000 f905 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <MX_TIM5_Init+0xa4>)
 8000b30:	f003 fa80 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000b3a:	f000 f8f7 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	@ 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200001e0 	.word	0x200001e0
 8000b4c:	40000c00 	.word	0x40000c00

08000b50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_TIM6_Init+0x64>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	@ (8000bb8 <MX_TIM6_Init+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_TIM6_Init+0x64>)
 8000b68:	2209      	movs	r2, #9
 8000b6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_TIM6_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_TIM6_Init+0x64>)
 8000b74:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b78:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_TIM6_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <MX_TIM6_Init+0x64>)
 8000b82:	f002 fde1 	bl	8003748 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b8c:	f000 f8ce 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_TIM6_Init+0x64>)
 8000b9e:	f003 fa49 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ba8:	f000 f8c0 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000022c 	.word	0x2000022c
 8000bb8:	40001000 	.word	0x40001000

08000bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bc2:	4a23      	ldr	r2, [pc, #140]	@ (8000c50 <MX_USART2_UART_Init+0x94>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bc8:	4a22      	ldr	r2, [pc, #136]	@ (8000c54 <MX_USART2_UART_Init+0x98>)
 8000bca:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000be0:	220c      	movs	r2, #12
 8000be2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be4:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c02:	4812      	ldr	r0, [pc, #72]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000c04:	f003 fb2d 	bl	8004262 <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000c0e:	f000 f88d 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c12:	2100      	movs	r1, #0
 8000c14:	480d      	ldr	r0, [pc, #52]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000c16:	f004 fcfa 	bl	800560e <HAL_UARTEx_SetTxFifoThreshold>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000c20:	f000 f884 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	4809      	ldr	r0, [pc, #36]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000c28:	f004 fd2f 	bl	800568a <HAL_UARTEx_SetRxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000c32:	f000 f87b 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_USART2_UART_Init+0x90>)
 8000c38:	f004 fcb0 	bl	800559c <HAL_UARTEx_DisableFifoMode>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000c42:	f000 f873 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000278 	.word	0x20000278
 8000c50:	40004400 	.word	0x40004400
 8000c54:	000f4240 	.word	0x000f4240

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	4a2b      	ldr	r2, [pc, #172]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	4a25      	ldr	r2, [pc, #148]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c92:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_GPIO_Init+0xc8>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(eno_rst_GPIO_Port, eno_rst_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cbc:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <MX_GPIO_Init+0xcc>)
 8000cbe:	f001 fbc9 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : eno_rst_Pin */
  GPIO_InitStruct.Pin = eno_rst_Pin;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(eno_rst_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4812      	ldr	r0, [pc, #72]	@ (8000d24 <MX_GPIO_Init+0xcc>)
 8000cdc:	f001 fa38 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : lmt_sw5_Pin lmt_sw6_Pin lmt_sw7_Pin lmt_sw8_Pin */
  GPIO_InitStruct.Pin = lmt_sw5_Pin|lmt_sw6_Pin|lmt_sw7_Pin|lmt_sw8_Pin;
 8000ce0:	233c      	movs	r3, #60	@ 0x3c
 8000ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <MX_GPIO_Init+0xcc>)
 8000cf6:	f001 fa2b 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : lmt_sw1_Pin lmt_sw2_Pin lmt_sw3_Pin lmt_sw4_Pin */
  GPIO_InitStruct.Pin = lmt_sw1_Pin|lmt_sw2_Pin|lmt_sw3_Pin|lmt_sw4_Pin;
 8000cfa:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 8000cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_GPIO_Init+0xd0>)
 8000d12:	f001 fa1d 	bl	8002150 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000400 	.word	0x48000400

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error\r\n");
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <Error_Handler+0x14>)
 8000d36:	f004 fe5f 	bl	80059f8 <puts>
  while (1)
 8000d3a:	bf00      	nop
 8000d3c:	e7fd      	b.n	8000d3a <Error_Handler+0xe>
 8000d3e:	bf00      	nop
 8000d40:	080068a8 	.word	0x080068a8

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d7a:	f001 fd59 	bl	8002830 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b09e      	sub	sp, #120	@ 0x78
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2254      	movs	r2, #84	@ 0x54
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 ffbf 	bl	8005d30 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a28      	ldr	r2, [pc, #160]	@ (8000e58 <HAL_FDCAN_MspInit+0xcc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d149      	bne.n	8000e50 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000dc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fa6d 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000dd8:	f7ff ffa8 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <HAL_FDCAN_MspInit+0xd0>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e5c <HAL_FDCAN_MspInit+0xd0>)
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000de8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <HAL_FDCAN_MspInit+0xd0>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_FDCAN_MspInit+0xd0>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <HAL_FDCAN_MspInit+0xd0>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e00:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <HAL_FDCAN_MspInit+0xd0>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e0c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e1e:	2309      	movs	r3, #9
 8000e20:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2c:	f001 f990 	bl	8002150 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2015      	movs	r0, #21
 8000e36:	f000 fc4e 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e3a:	2015      	movs	r0, #21
 8000e3c:	f000 fc65 	bl	800170a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2016      	movs	r0, #22
 8000e46:	f000 fc46 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e4a:	2016      	movs	r0, #22
 8000e4c:	f000 fc5d 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3778      	adds	r7, #120	@ 0x78
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40006400 	.word	0x40006400
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09e      	sub	sp, #120	@ 0x78
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	2254      	movs	r2, #84	@ 0x54
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f004 ff55 	bl	8005d30 <memset>
  if(hi2c->Instance==I2C1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f08 <HAL_I2C_MspInit+0xa8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d136      	bne.n	8000efe <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e90:	2340      	movs	r3, #64	@ 0x40
 8000e92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 fa05 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ea8:	f7ff ff40 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	4a16      	ldr	r2, [pc, #88]	@ (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ec4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ec8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480b      	ldr	r0, [pc, #44]	@ (8000f10 <HAL_I2C_MspInit+0xb0>)
 8000ee2:	f001 f935 	bl	8002150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <HAL_I2C_MspInit+0xac>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	4a08      	ldr	r2, [pc, #32]	@ (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_I2C_MspInit+0xac>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3778      	adds	r7, #120	@ 0x78
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400

08000f14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	@ 0x38
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f34:	d13a      	bne.n	8000fac <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f36:	4b5b      	ldr	r3, [pc, #364]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	4a5a      	ldr	r2, [pc, #360]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f42:	4b58      	ldr	r3, [pc, #352]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a54      	ldr	r2, [pc, #336]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b52      	ldr	r3, [pc, #328]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8000f66:	2303      	movs	r3, #3
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f76:	2301      	movs	r3, #1
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f84:	f001 f8e4 	bl	8002150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa6:	f001 f8d3 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000faa:	e077      	b.n	800109c <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM3)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a3d      	ldr	r2, [pc, #244]	@ (80010a8 <HAL_TIM_Encoder_MspInit+0x194>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d128      	bne.n	8001008 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fba:	4a3a      	ldr	r2, [pc, #232]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc2:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b35      	ldr	r3, [pc, #212]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	4a34      	ldr	r2, [pc, #208]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fda:	4b32      	ldr	r3, [pc, #200]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8000fe6:	2330      	movs	r3, #48	@ 0x30
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	482a      	ldr	r0, [pc, #168]	@ (80010ac <HAL_TIM_Encoder_MspInit+0x198>)
 8001002:	f001 f8a5 	bl	8002150 <HAL_GPIO_Init>
}
 8001006:	e049      	b.n	800109c <HAL_TIM_Encoder_MspInit+0x188>
  else if(htim_encoder->Instance==TIM5)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a28      	ldr	r2, [pc, #160]	@ (80010b0 <HAL_TIM_Encoder_MspInit+0x19c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d144      	bne.n	800109c <HAL_TIM_Encoder_MspInit+0x188>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001016:	4a23      	ldr	r2, [pc, #140]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	6593      	str	r3, [r2, #88]	@ 0x58
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x190>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3_A_Pin;
 800105a:	2304      	movs	r3, #4
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001062:	2301      	movs	r3, #1
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800106a:	2302      	movs	r3, #2
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ENC3_A_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <HAL_TIM_Encoder_MspInit+0x198>)
 8001076:	f001 f86b 	bl	8002150 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC3_B_Pin;
 800107a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001084:	2301      	movs	r3, #1
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800108c:	2301      	movs	r3, #1
 800108e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ENC3_B_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001098:	f001 f85a 	bl	8002150 <HAL_GPIO_Init>
}
 800109c:	bf00      	nop
 800109e:	3738      	adds	r7, #56	@ 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40000400 	.word	0x40000400
 80010ac:	48000400 	.word	0x48000400
 80010b0:	40000c00 	.word	0x40000c00
 80010b4:	48000800 	.word	0x48000800

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d113      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_TIM_Base_MspInit+0x48>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2036      	movs	r0, #54	@ 0x36
 80010e8:	f000 faf5 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010ec:	2036      	movs	r0, #54	@ 0x36
 80010ee:	f000 fb0c 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40001000 	.word	0x40001000
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b09e      	sub	sp, #120	@ 0x78
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2254      	movs	r2, #84	@ 0x54
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f004 fe03 	bl	8005d30 <memset>
  if(huart->Instance==USART2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a23      	ldr	r2, [pc, #140]	@ (80011bc <HAL_UART_MspInit+0xb8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d13e      	bne.n	80011b2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4618      	mov	r0, r3
 8001142:	f002 f8b3 	bl	80032ac <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800114c:	f7ff fdee 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001150:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <HAL_UART_MspInit+0xbc>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001154:	4a1a      	ldr	r2, [pc, #104]	@ (80011c0 <HAL_UART_MspInit+0xbc>)
 8001156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800115a:	6593      	str	r3, [r2, #88]	@ 0x58
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_UART_MspInit+0xbc>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_UART_MspInit+0xbc>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <HAL_UART_MspInit+0xbc>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_UART_MspInit+0xbc>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001180:	230c      	movs	r3, #12
 8001182:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001190:	2307      	movs	r3, #7
 8001192:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119e:	f000 ffd7 	bl	8002150 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2026      	movs	r0, #38	@ 0x26
 80011a8:	f000 fa95 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ac:	2026      	movs	r0, #38	@ 0x26
 80011ae:	f000 faac 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3778      	adds	r7, #120	@ 0x78
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40004400 	.word	0x40004400
 80011c0:	40021000 	.word	0x40021000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f000 f941 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <FDCAN1_IT0_IRQHandler+0x10>)
 800122a:	f000 fd0f 	bl	8001c4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000090 	.word	0x20000090

08001238 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <FDCAN1_IT1_IRQHandler+0x10>)
 800123e:	f000 fd05 	bl	8001c4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000090 	.word	0x20000090

0800124c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <USART2_IRQHandler+0x10>)
 8001252:	f003 f8e5 	bl	8004420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000278 	.word	0x20000278

08001260 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <TIM6_DAC_IRQHandler+0x10>)
 8001266:	f002 fc73 	bl	8003b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000022c 	.word	0x2000022c

08001274 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e00a      	b.n	800129c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001286:	f3af 8000 	nop.w
 800128a:	4601      	mov	r1, r0
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	60ba      	str	r2, [r7, #8]
 8001292:	b2ca      	uxtb	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf0      	blt.n	8001286 <_read+0x12>
  }

  return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012d6:	605a      	str	r2, [r3, #4]
  return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_isatty>:

int _isatty(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f004 fd40 	bl	8005dcc <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20020000 	.word	0x20020000
 8001378:	00000400 	.word	0x00000400
 800137c:	20000338 	.word	0x20000338
 8001380:	20000490 	.word	0x20000490

08001384 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a8:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ac:	f7ff ffea 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f004 fcff 	bl	8005dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013da:	f7ff f95b 	bl	8000694 <main>

080013de <LoopForever>:

LoopForever:
    b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   r0, =_estack
 80013e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013ec:	08006944 	.word	0x08006944
  ldr r2, =_sbss
 80013f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013f4:	2000048c 	.word	0x2000048c

080013f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_2_IRQHandler>

080013fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f95b 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140a:	200f      	movs	r0, #15
 800140c:	f000 f80e 	bl	800142c <HAL_InitTick>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e001      	b.n	8001420 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800141c:	f7ff fc92 	bl	8000d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001420:	79fb      	ldrb	r3, [r7, #7]

}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <HAL_InitTick+0x68>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d022      	beq.n	8001486 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001440:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_InitTick+0x6c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <HAL_InitTick+0x68>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800144c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001450:	fbb2 f3f3 	udiv	r3, r2, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f966 	bl	8001726 <HAL_SYSTICK_Config>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10f      	bne.n	8001480 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	d809      	bhi.n	800147a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001466:	2200      	movs	r2, #0
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	f04f 30ff 	mov.w	r0, #4294967295
 800146e:	f000 f932 	bl	80016d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <HAL_InitTick+0x70>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e007      	b.n	800148a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e004      	b.n	800148a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e001      	b.n	800148a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000014 	.word	0x20000014
 8001498:	2000000c 	.word	0x2000000c
 800149c:	20000010 	.word	0x20000010

080014a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_IncTick+0x1c>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_IncTick+0x20>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a03      	ldr	r2, [pc, #12]	@ (80014bc <HAL_IncTick+0x1c>)
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	2000033c 	.word	0x2000033c
 80014c0:	20000014 	.word	0x20000014

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000033c 	.word	0x2000033c

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d004      	beq.n	8001500 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <HAL_Delay+0x40>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001500:	bf00      	nop
 8001502:	f7ff ffdf 	bl	80014c4 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	429a      	cmp	r2, r3
 8001510:	d8f7      	bhi.n	8001502 <HAL_Delay+0x26>
  {
  }
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000014 	.word	0x20000014

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	@ (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	@ (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff29 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff40 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff90 	bl	8001614 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5f 	bl	80015c0 <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff33 	bl	8001584 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa4 	bl	800167c <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d005      	beq.n	8001762 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2204      	movs	r2, #4
 800175a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e037      	b.n	80017d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 020e 	bic.w	r2, r2, #14
 8001770:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800177c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001780:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0201 	bic.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f003 021f 	and.w	r2, r3, #31
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00c      	beq.n	80017d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d00d      	beq.n	8001824 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2204      	movs	r2, #4
 800180c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	e047      	b.n	80018b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 020e 	bic.w	r2, r2, #14
 8001832:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001852:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f202 	lsl.w	r2, r1, r2
 8001866:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001870:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00c      	beq.n	8001894 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001888:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001892:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
    }
  }
  return status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e147      	b.n	8001b62 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fa50 	bl	8000d8c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0210 	bic.w	r2, r2, #16
 80018fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018fc:	f7ff fde2 	bl	80014c4 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001902:	e012      	b.n	800192a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001904:	f7ff fdde 	bl	80014c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b0a      	cmp	r3, #10
 8001910:	d90b      	bls.n	800192a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2203      	movs	r2, #3
 8001922:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e11b      	b.n	8001b62 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b08      	cmp	r3, #8
 8001936:	d0e5      	beq.n	8001904 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7ff fdbc 	bl	80014c4 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800194e:	e012      	b.n	8001976 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001950:	f7ff fdb8 	bl	80014c4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b0a      	cmp	r3, #10
 800195c:	d90b      	bls.n	8001976 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0f5      	b.n	8001b62 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0e5      	beq.n	8001950 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0202 	orr.w	r2, r2, #2
 8001992:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a74      	ldr	r2, [pc, #464]	@ (8001b6c <HAL_FDCAN_Init+0x2ac>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d103      	bne.n	80019a6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800199e:	4a74      	ldr	r2, [pc, #464]	@ (8001b70 <HAL_FDCAN_Init+0x2b0>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7c1b      	ldrb	r3, [r3, #16]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d108      	bne.n	80019c0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019bc:	619a      	str	r2, [r3, #24]
 80019be:	e007      	b.n	80019d0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7c5b      	ldrb	r3, [r3, #17]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d108      	bne.n	80019ea <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019e6:	619a      	str	r2, [r3, #24]
 80019e8:	e007      	b.n	80019fa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699a      	ldr	r2, [r3, #24]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7c9b      	ldrb	r3, [r3, #18]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d108      	bne.n	8001a14 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a10:	619a      	str	r2, [r3, #24]
 8001a12:	e007      	b.n	8001a24 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a22:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001a48:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0210 	bic.w	r2, r2, #16
 8001a58:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d108      	bne.n	8001a74 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0204 	orr.w	r2, r2, #4
 8001a70:	619a      	str	r2, [r3, #24]
 8001a72:	e02c      	b.n	8001ace <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d028      	beq.n	8001ace <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d01c      	beq.n	8001abe <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a92:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0210 	orr.w	r2, r2, #16
 8001aa2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d110      	bne.n	8001ace <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699a      	ldr	r2, [r3, #24]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0220 	orr.w	r2, r2, #32
 8001aba:	619a      	str	r2, [r3, #24]
 8001abc:	e007      	b.n	8001ace <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0220 	orr.w	r2, r2, #32
 8001acc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ade:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001ae6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001af6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001af8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b02:	d115      	bne.n	8001b30 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b08:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b12:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b1c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	3b01      	subs	r3, #1
 8001b26:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b2c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b2e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fa1a 	bl	8001f80 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40006400 	.word	0x40006400
 8001b70:	40006500 	.word	0x40006500

08001b74 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d110      	bne.n	8001baa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e006      	b.n	8001bb8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bae:	f043 0204 	orr.w	r2, r3, #4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
  }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d12c      	bne.n	8001c36 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d007      	beq.n	8001bfc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e023      	b.n	8001c44 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fa20 	bl	8002058 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e006      	b.n	8001c44 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3a:	f043 0208 	orr.w	r2, r3, #8
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	@ 0x30
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c5a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c68:	4013      	ands	r3, r2
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c80:	4013      	ands	r3, r2
 8001c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c98:	4013      	ands	r3, r2
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ca2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001ca6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cae:	6a3a      	ldr	r2, [r7, #32]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001cbe:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cda:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2240      	movs	r2, #64	@ 0x40
 8001cf6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f921 	bl	8001f40 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d019      	beq.n	8001d3c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d014      	beq.n	8001d3c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d1a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d32:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d34:	6939      	ldr	r1, [r7, #16]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8e3 	bl	8001f02 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d48:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8a2 	bl	8001e96 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8a2 	bl	8001eac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d74:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001d76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f8a2 	bl	8001ec2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00c      	beq.n	8001da2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f89b 	bl	8001ed8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d018      	beq.n	8001dde <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d013      	beq.n	8001dde <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001dbe:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2280      	movs	r2, #128	@ 0x80
 8001dd4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001dd6:	68f9      	ldr	r1, [r7, #12]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f887 	bl	8001eec <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00c      	beq.n	8001e02 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dfa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f88b 	bl	8001f18 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e1e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f883 	bl	8001f2c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00f      	beq.n	8001e50 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e5e:	69f9      	ldr	r1, [r7, #28]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f881 	bl	8001f68 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6a3a      	ldr	r2, [r7, #32]
 8001e72:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f863 	bl	8001f54 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3730      	adds	r7, #48	@ 0x30
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001f8a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d103      	bne.n	8001f9e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001f9c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8002054 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d103      	bne.n	8001fb0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001fae:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fbe:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fe4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fec:	061a      	lsls	r2, r3, #24
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e005      	b.n	8002032 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	429a      	cmp	r2, r3
 800203c:	d3f3      	bcc.n	8002026 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	4000a400 	.word	0x4000a400
 8002050:	40006800 	.word	0x40006800
 8002054:	40006c00 	.word	0x40006c00

08002058 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	@ 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10a      	bne.n	8002084 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002076:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800207e:	4313      	orrs	r3, r2
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e00a      	b.n	800209a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800208c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002092:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002094:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002098:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020a4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80020aa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80020b0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	3304      	adds	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	3304      	adds	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e020      	b.n	800212e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3303      	adds	r3, #3
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3302      	adds	r3, #2
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	440b      	add	r3, r1
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002104:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	440b      	add	r3, r1
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002112:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	440a      	add	r2, r1
 800211a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800211c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	3304      	adds	r3, #4
 8002126:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3304      	adds	r3, #4
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a06      	ldr	r2, [pc, #24]	@ (800214c <FDCAN_CopyMessageToRAM+0xf4>)
 8002134:	5cd3      	ldrb	r3, [r2, r3]
 8002136:	461a      	mov	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	4293      	cmp	r3, r2
 800213c:	d3d6      	bcc.n	80020ec <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3724      	adds	r7, #36	@ 0x24
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	080068c8 	.word	0x080068c8

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800215e:	e15a      	b.n	8002416 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2101      	movs	r1, #1
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 814c 	beq.w	8002410 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d005      	beq.n	8002190 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800218c:	2b02      	cmp	r3, #2
 800218e:	d130      	bne.n	80021f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021c6:	2201      	movs	r2, #1
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 0201 	and.w	r2, r3, #1
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d017      	beq.n	800222e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d123      	bne.n	8002282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	6939      	ldr	r1, [r7, #16]
 800227e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0203 	and.w	r2, r3, #3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80a6 	beq.w	8002410 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80022c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80022d0:	4b58      	ldr	r3, [pc, #352]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80022d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022dc:	4a56      	ldr	r2, [pc, #344]	@ (8002438 <HAL_GPIO_Init+0x2e8>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002306:	d01f      	beq.n	8002348 <HAL_GPIO_Init+0x1f8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a4c      	ldr	r2, [pc, #304]	@ (800243c <HAL_GPIO_Init+0x2ec>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d019      	beq.n	8002344 <HAL_GPIO_Init+0x1f4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a4b      	ldr	r2, [pc, #300]	@ (8002440 <HAL_GPIO_Init+0x2f0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d013      	beq.n	8002340 <HAL_GPIO_Init+0x1f0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a4a      	ldr	r2, [pc, #296]	@ (8002444 <HAL_GPIO_Init+0x2f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00d      	beq.n	800233c <HAL_GPIO_Init+0x1ec>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a49      	ldr	r2, [pc, #292]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d007      	beq.n	8002338 <HAL_GPIO_Init+0x1e8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a48      	ldr	r2, [pc, #288]	@ (800244c <HAL_GPIO_Init+0x2fc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <HAL_GPIO_Init+0x1e4>
 8002330:	2305      	movs	r3, #5
 8002332:	e00a      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002334:	2306      	movs	r3, #6
 8002336:	e008      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002338:	2304      	movs	r3, #4
 800233a:	e006      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 800233c:	2303      	movs	r3, #3
 800233e:	e004      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002340:	2302      	movs	r3, #2
 8002342:	e002      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_GPIO_Init+0x1fa>
 8002348:	2300      	movs	r3, #0
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	f002 0203 	and.w	r2, r2, #3
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	4093      	lsls	r3, r2
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800235a:	4937      	ldr	r1, [pc, #220]	@ (8002438 <HAL_GPIO_Init+0x2e8>)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002368:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <HAL_GPIO_Init+0x300>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800238c:	4a30      	ldr	r2, [pc, #192]	@ (8002450 <HAL_GPIO_Init+0x300>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002392:	4b2f      	ldr	r3, [pc, #188]	@ (8002450 <HAL_GPIO_Init+0x300>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023b6:	4a26      	ldr	r2, [pc, #152]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023bc:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <HAL_GPIO_Init+0x300>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800240a:	4a11      	ldr	r2, [pc, #68]	@ (8002450 <HAL_GPIO_Init+0x300>)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	f47f ae9d 	bne.w	8002160 <HAL_GPIO_Init+0x10>
  }
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40021000 	.word	0x40021000
 8002438:	40010000 	.word	0x40010000
 800243c:	48000400 	.word	0x48000400
 8002440:	48000800 	.word	0x48000800
 8002444:	48000c00 	.word	0x48000c00
 8002448:	48001000 	.word	0x48001000
 800244c:	48001400 	.word	0x48001400
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002470:	e002      	b.n	8002478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e08d      	b.n	80025b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fcd8 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	@ 0x24
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	e006      	b.n	800250c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800250a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d108      	bne.n	8002526 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	e007      	b.n	8002536 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002534:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69d9      	ldr	r1, [r3, #28]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1a      	ldr	r2, [r3, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d138      	bne.n	8002642 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025da:	2302      	movs	r3, #2
 80025dc:	e032      	b.n	8002644 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2224      	movs	r2, #36	@ 0x24
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800260c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b20      	cmp	r3, #32
 8002664:	d139      	bne.n	80026da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002670:	2302      	movs	r3, #2
 8002672:	e033      	b.n	80026dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	@ 0x24
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026da:	2302      	movs	r3, #2
  }
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d141      	bne.n	800277a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002702:	d131      	bne.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002704:	4b47      	ldr	r3, [pc, #284]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800270a:	4a46      	ldr	r2, [pc, #280]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002714:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800271c:	4a41      	ldr	r2, [pc, #260]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002722:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002724:	4b40      	ldr	r3, [pc, #256]	@ (8002828 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2232      	movs	r2, #50	@ 0x32
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	4a3f      	ldr	r2, [pc, #252]	@ (800282c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	0c9b      	lsrs	r3, r3, #18
 8002736:	3301      	adds	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273a:	e002      	b.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3b01      	subs	r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002742:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800274e:	d102      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f2      	bne.n	800273c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002756:	4b33      	ldr	r3, [pc, #204]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002762:	d158      	bne.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e057      	b.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002768:	4b2e      	ldr	r3, [pc, #184]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800276e:	4a2d      	ldr	r2, [pc, #180]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002774:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002778:	e04d      	b.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002780:	d141      	bne.n	8002806 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002782:	4b28      	ldr	r3, [pc, #160]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800278a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800278e:	d131      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002790:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002796:	4a23      	ldr	r2, [pc, #140]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800279c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a0:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002828 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2232      	movs	r2, #50	@ 0x32
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	3301      	adds	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c6:	e002      	b.n	80027ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027da:	d102      	bne.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f2      	bne.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ee:	d112      	bne.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e011      	b.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002800:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002804:	e007      	b.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002806:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800280e:	4a05      	ldr	r2, [pc, #20]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002814:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40007000 	.word	0x40007000
 8002828:	2000000c 	.word	0x2000000c
 800282c:	431bde83 	.word	0x431bde83

08002830 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002834:	4b05      	ldr	r3, [pc, #20]	@ (800284c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a04      	ldr	r2, [pc, #16]	@ (800284c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800283a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800283e:	6093      	str	r3, [r2, #8]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40007000 	.word	0x40007000

08002850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e2fe      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d075      	beq.n	800295a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286e:	4b97      	ldr	r3, [pc, #604]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002878:	4b94      	ldr	r3, [pc, #592]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b0c      	cmp	r3, #12
 8002886:	d102      	bne.n	800288e <HAL_RCC_OscConfig+0x3e>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b03      	cmp	r3, #3
 800288c:	d002      	beq.n	8002894 <HAL_RCC_OscConfig+0x44>
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d10b      	bne.n	80028ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	4b8d      	ldr	r3, [pc, #564]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d05b      	beq.n	8002958 <HAL_RCC_OscConfig+0x108>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d157      	bne.n	8002958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e2d9      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b4:	d106      	bne.n	80028c4 <HAL_RCC_OscConfig+0x74>
 80028b6:	4b85      	ldr	r3, [pc, #532]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a84      	ldr	r2, [pc, #528]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e01d      	b.n	8002900 <HAL_RCC_OscConfig+0xb0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x98>
 80028ce:	4b7f      	ldr	r3, [pc, #508]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7e      	ldr	r2, [pc, #504]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b7c      	ldr	r3, [pc, #496]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7b      	ldr	r2, [pc, #492]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0xb0>
 80028e8:	4b78      	ldr	r3, [pc, #480]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a77      	ldr	r2, [pc, #476]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b75      	ldr	r3, [pc, #468]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a74      	ldr	r2, [pc, #464]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fddc 	bl	80014c4 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe fdd8 	bl	80014c4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e29e      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002922:	4b6a      	ldr	r3, [pc, #424]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0xc0>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fdc8 	bl	80014c4 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002938:	f7fe fdc4 	bl	80014c4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	@ 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e28a      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800294a:	4b60      	ldr	r3, [pc, #384]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0xe8>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d075      	beq.n	8002a52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002966:	4b59      	ldr	r3, [pc, #356]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002970:	4b56      	ldr	r3, [pc, #344]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	d102      	bne.n	8002986 <HAL_RCC_OscConfig+0x136>
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d002      	beq.n	800298c <HAL_RCC_OscConfig+0x13c>
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d11f      	bne.n	80029cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298c:	4b4f      	ldr	r3, [pc, #316]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_OscConfig+0x154>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e25d      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b49      	ldr	r3, [pc, #292]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	4946      	ldr	r1, [pc, #280]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029b8:	4b45      	ldr	r3, [pc, #276]	@ (8002ad0 <HAL_RCC_OscConfig+0x280>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fd35 	bl	800142c <HAL_InitTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d043      	beq.n	8002a50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e249      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d023      	beq.n	8002a1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d4:	4b3d      	ldr	r3, [pc, #244]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a3c      	ldr	r2, [pc, #240]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fd70 	bl	80014c4 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e8:	f7fe fd6c 	bl	80014c4 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e232      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029fa:	4b34      	ldr	r3, [pc, #208]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a06:	4b31      	ldr	r3, [pc, #196]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	061b      	lsls	r3, r3, #24
 8002a14:	492d      	ldr	r1, [pc, #180]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
 8002a1a:	e01a      	b.n	8002a52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2a      	ldr	r2, [pc, #168]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fd4c 	bl	80014c4 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a30:	f7fe fd48 	bl	80014c4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e20e      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a42:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x1e0>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d041      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6c:	4a17      	ldr	r2, [pc, #92]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7fe fd25 	bl	80014c4 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7e:	f7fe fd21 	bl	80014c4 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1e7      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a90:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0ef      	beq.n	8002a7e <HAL_RCC_OscConfig+0x22e>
 8002a9e:	e020      	b.n	8002ae2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa6:	4a09      	ldr	r2, [pc, #36]	@ (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fd08 	bl	80014c4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab6:	e00d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7fe fd04 	bl	80014c4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d906      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1ca      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad4:	4b8c      	ldr	r3, [pc, #560]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ea      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80a6 	beq.w	8002c3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002af4:	4b84      	ldr	r3, [pc, #528]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2b4>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x2b6>
 8002b04:	2300      	movs	r3, #0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b16:	4b7c      	ldr	r3, [pc, #496]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b22:	2301      	movs	r3, #1
 8002b24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b26:	4b79      	ldr	r3, [pc, #484]	@ (8002d0c <HAL_RCC_OscConfig+0x4bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d118      	bne.n	8002b64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b32:	4b76      	ldr	r3, [pc, #472]	@ (8002d0c <HAL_RCC_OscConfig+0x4bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a75      	ldr	r2, [pc, #468]	@ (8002d0c <HAL_RCC_OscConfig+0x4bc>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fcc1 	bl	80014c4 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7fe fcbd 	bl	80014c4 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e183      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b58:	4b6c      	ldr	r3, [pc, #432]	@ (8002d0c <HAL_RCC_OscConfig+0x4bc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d108      	bne.n	8002b7e <HAL_RCC_OscConfig+0x32e>
 8002b6c:	4b66      	ldr	r3, [pc, #408]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	4a65      	ldr	r2, [pc, #404]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b7c:	e024      	b.n	8002bc8 <HAL_RCC_OscConfig+0x378>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d110      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x358>
 8002b86:	4b60      	ldr	r3, [pc, #384]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8c:	4a5e      	ldr	r2, [pc, #376]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b96:	4b5c      	ldr	r3, [pc, #368]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ba6:	e00f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x378>
 8002ba8:	4b57      	ldr	r3, [pc, #348]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bae:	4a56      	ldr	r2, [pc, #344]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bb8:	4b53      	ldr	r3, [pc, #332]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbe:	4a52      	ldr	r2, [pc, #328]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d016      	beq.n	8002bfe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fc78 	bl	80014c4 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fc74 	bl	80014c4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e138      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bee:	4b46      	ldr	r3, [pc, #280]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ed      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x388>
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fc61 	bl	80014c4 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe fc5d 	bl	80014c4 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e121      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ed      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b35      	ldr	r3, [pc, #212]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	4a34      	ldr	r2, [pc, #208]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d03c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01c      	beq.n	8002c8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c50:	4b2d      	ldr	r3, [pc, #180]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c56:	4a2c      	ldr	r2, [pc, #176]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fc30 	bl	80014c4 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c68:	f7fe fc2c 	bl	80014c4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e0f2      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c7a:	4b23      	ldr	r3, [pc, #140]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ef      	beq.n	8002c68 <HAL_RCC_OscConfig+0x418>
 8002c88:	e01b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fc13 	bl	80014c4 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca2:	f7fe fc0f 	bl	80014c4 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e0d5      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cb4:	4b14      	ldr	r3, [pc, #80]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ef      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80c9 	beq.w	8002e5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b0c      	cmp	r3, #12
 8002cd6:	f000 8083 	beq.w	8002de0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d15e      	bne.n	8002da0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <HAL_RCC_OscConfig+0x4b8>)
 8002ce8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fbe9 	bl	80014c4 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf4:	e00c      	b.n	8002d10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fe fbe5 	bl	80014c4 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d905      	bls.n	8002d10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0ab      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d10:	4b55      	ldr	r3, [pc, #340]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ec      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d1c:	4b52      	ldr	r3, [pc, #328]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	4b52      	ldr	r3, [pc, #328]	@ (8002e6c <HAL_RCC_OscConfig+0x61c>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6a11      	ldr	r1, [r2, #32]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	4311      	orrs	r1, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d36:	0212      	lsls	r2, r2, #8
 8002d38:	4311      	orrs	r1, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d3e:	0852      	lsrs	r2, r2, #1
 8002d40:	3a01      	subs	r2, #1
 8002d42:	0552      	lsls	r2, r2, #21
 8002d44:	4311      	orrs	r1, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d4a:	0852      	lsrs	r2, r2, #1
 8002d4c:	3a01      	subs	r2, #1
 8002d4e:	0652      	lsls	r2, r2, #25
 8002d50:	4311      	orrs	r1, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d56:	06d2      	lsls	r2, r2, #27
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	4943      	ldr	r1, [pc, #268]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d60:	4b41      	ldr	r3, [pc, #260]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a40      	ldr	r2, [pc, #256]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a3d      	ldr	r2, [pc, #244]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fba4 	bl	80014c4 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe fba0 	bl	80014c4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e066      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d92:	4b35      	ldr	r3, [pc, #212]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x530>
 8002d9e:	e05e      	b.n	8002e5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da0:	4b31      	ldr	r3, [pc, #196]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a30      	ldr	r2, [pc, #192]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002da6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe fb8a 	bl	80014c4 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe fb86 	bl	80014c4 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e04c      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc6:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002dd2:	4b25      	ldr	r3, [pc, #148]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	4924      	ldr	r1, [pc, #144]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002dd8:	4b25      	ldr	r3, [pc, #148]	@ (8002e70 <HAL_RCC_OscConfig+0x620>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60cb      	str	r3, [r1, #12]
 8002dde:	e03e      	b.n	8002e5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e039      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002dec:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <HAL_RCC_OscConfig+0x618>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d12c      	bne.n	8002e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d123      	bne.n	8002e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d11b      	bne.n	8002e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d113      	bne.n	8002e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	3b01      	subs	r3, #1
 8002e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	019f800c 	.word	0x019f800c
 8002e70:	feeefffc 	.word	0xfeeefffc

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e11e      	b.n	80030ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b91      	ldr	r3, [pc, #580]	@ (80030d4 <HAL_RCC_ClockConfig+0x260>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d910      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b8e      	ldr	r3, [pc, #568]	@ (80030d4 <HAL_RCC_ClockConfig+0x260>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	498c      	ldr	r1, [pc, #560]	@ (80030d4 <HAL_RCC_ClockConfig+0x260>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b8a      	ldr	r3, [pc, #552]	@ (80030d4 <HAL_RCC_ClockConfig+0x260>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e106      	b.n	80030ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d073      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d129      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed0:	4b81      	ldr	r3, [pc, #516]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0f4      	b.n	80030ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ee0:	f000 f99e 	bl	8003220 <RCC_GetSysClockFreqFromPLLSource>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4a7c      	ldr	r2, [pc, #496]	@ (80030dc <HAL_RCC_ClockConfig+0x268>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d93f      	bls.n	8002f6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eee:	4b7a      	ldr	r3, [pc, #488]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d033      	beq.n	8002f6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d12f      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f0e:	4b72      	ldr	r3, [pc, #456]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f16:	4a70      	ldr	r2, [pc, #448]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	e024      	b.n	8002f6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0c6      	b.n	80030ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3c:	4b66      	ldr	r3, [pc, #408]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0be      	b.n	80030ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f4c:	f000 f8ce 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4a61      	ldr	r2, [pc, #388]	@ (80030dc <HAL_RCC_ClockConfig+0x268>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d909      	bls.n	8002f6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f62:	4a5d      	ldr	r2, [pc, #372]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f6a:	2380      	movs	r3, #128	@ 0x80
 8002f6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4957      	ldr	r1, [pc, #348]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f80:	f7fe faa0 	bl	80014c4 <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fe fa9c 	bl	80014c4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e095      	b.n	80030ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 020c 	and.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1eb      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d023      	beq.n	8003004 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc8:	4b43      	ldr	r3, [pc, #268]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a42      	ldr	r2, [pc, #264]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002fce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002fe8:	4a3b      	ldr	r2, [pc, #236]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002fea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b39      	ldr	r3, [pc, #228]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4936      	ldr	r1, [pc, #216]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
 8003002:	e008      	b.n	8003016 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b80      	cmp	r3, #128	@ 0x80
 8003008:	d105      	bne.n	8003016 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800300a:	4b33      	ldr	r3, [pc, #204]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4a32      	ldr	r2, [pc, #200]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 8003010:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003014:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003016:	4b2f      	ldr	r3, [pc, #188]	@ (80030d4 <HAL_RCC_ClockConfig+0x260>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d21d      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003024:	4b2b      	ldr	r3, [pc, #172]	@ (80030d4 <HAL_RCC_ClockConfig+0x260>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 020f 	bic.w	r2, r3, #15
 800302c:	4929      	ldr	r1, [pc, #164]	@ (80030d4 <HAL_RCC_ClockConfig+0x260>)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003034:	f7fe fa46 	bl	80014c4 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303c:	f7fe fa42 	bl	80014c4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e03b      	b.n	80030ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <HAL_RCC_ClockConfig+0x260>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d1ed      	bne.n	800303c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b1a      	ldr	r3, [pc, #104]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4917      	ldr	r1, [pc, #92]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308a:	4b13      	ldr	r3, [pc, #76]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490f      	ldr	r1, [pc, #60]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800309e:	f000 f825 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <HAL_RCC_ClockConfig+0x264>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490c      	ldr	r1, [pc, #48]	@ (80030e0 <HAL_RCC_ClockConfig+0x26c>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <HAL_RCC_ClockConfig+0x270>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030be:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <HAL_RCC_ClockConfig+0x274>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe f9b2 	bl	800142c <HAL_InitTick>
 80030c8:	4603      	mov	r3, r0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	04c4b400 	.word	0x04c4b400
 80030e0:	080068b0 	.word	0x080068b0
 80030e4:	2000000c 	.word	0x2000000c
 80030e8:	20000010 	.word	0x20000010

080030ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030f2:	4b2c      	ldr	r3, [pc, #176]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d102      	bne.n	8003104 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030fe:	4b2a      	ldr	r3, [pc, #168]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	e047      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003104:	4b27      	ldr	r3, [pc, #156]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d102      	bne.n	8003116 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003110:	4b26      	ldr	r3, [pc, #152]	@ (80031ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	e03e      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003116:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d136      	bne.n	8003190 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003122:	4b20      	ldr	r3, [pc, #128]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800312c:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3301      	adds	r3, #1
 8003138:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d10c      	bne.n	800315a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003140:	4a1a      	ldr	r2, [pc, #104]	@ (80031ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	4a16      	ldr	r2, [pc, #88]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800314a:	68d2      	ldr	r2, [r2, #12]
 800314c:	0a12      	lsrs	r2, r2, #8
 800314e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	617b      	str	r3, [r7, #20]
      break;
 8003158:	e00c      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800315a:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	4a10      	ldr	r2, [pc, #64]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003164:	68d2      	ldr	r2, [r2, #12]
 8003166:	0a12      	lsrs	r2, r2, #8
 8003168:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]
      break;
 8003172:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003174:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	0e5b      	lsrs	r3, r3, #25
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	3301      	adds	r3, #1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	e001      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003194:	693b      	ldr	r3, [r7, #16]
}
 8003196:	4618      	mov	r0, r3
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	007a1200 	.word	0x007a1200

080031b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b4:	4b03      	ldr	r3, [pc, #12]	@ (80031c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	2000000c 	.word	0x2000000c

080031c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031cc:	f7ff fff0 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4904      	ldr	r1, [pc, #16]	@ (80031f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	080068c0 	.word	0x080068c0

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031f8:	f7ff ffda 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	0adb      	lsrs	r3, r3, #11
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4904      	ldr	r1, [pc, #16]	@ (800321c <HAL_RCC_GetPCLK2Freq+0x28>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	080068c0 	.word	0x080068c0

08003220 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003226:	4b1e      	ldr	r3, [pc, #120]	@ (80032a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003230:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3301      	adds	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d10c      	bne.n	800325e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003244:	4a17      	ldr	r2, [pc, #92]	@ (80032a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800324e:	68d2      	ldr	r2, [r2, #12]
 8003250:	0a12      	lsrs	r2, r2, #8
 8003252:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	617b      	str	r3, [r7, #20]
    break;
 800325c:	e00c      	b.n	8003278 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800325e:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	4a0e      	ldr	r2, [pc, #56]	@ (80032a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003268:	68d2      	ldr	r2, [r2, #12]
 800326a:	0a12      	lsrs	r2, r2, #8
 800326c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003270:	fb02 f303 	mul.w	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
    break;
 8003276:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003278:	4b09      	ldr	r3, [pc, #36]	@ (80032a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0e5b      	lsrs	r3, r3, #25
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	3301      	adds	r3, #1
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003292:	687b      	ldr	r3, [r7, #4]
}
 8003294:	4618      	mov	r0, r3
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40021000 	.word	0x40021000
 80032a4:	007a1200 	.word	0x007a1200
 80032a8:	00f42400 	.word	0x00f42400

080032ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b4:	2300      	movs	r3, #0
 80032b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b8:	2300      	movs	r3, #0
 80032ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8098 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ce:	4b43      	ldr	r3, [pc, #268]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	4b40      	ldr	r3, [pc, #256]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032de:	4a3f      	ldr	r2, [pc, #252]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e6:	4b3d      	ldr	r3, [pc, #244]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f2:	2301      	movs	r3, #1
 80032f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f6:	4b3a      	ldr	r3, [pc, #232]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a39      	ldr	r2, [pc, #228]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003300:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003302:	f7fe f8df 	bl	80014c4 <HAL_GetTick>
 8003306:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003308:	e009      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330a:	f7fe f8db 	bl	80014c4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d902      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	74fb      	strb	r3, [r7, #19]
        break;
 800331c:	e005      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800331e:	4b30      	ldr	r3, [pc, #192]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ef      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d159      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003330:	4b2a      	ldr	r3, [pc, #168]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800333a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01e      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	d019      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800334c:	4b23      	ldr	r3, [pc, #140]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003356:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003358:	4b20      	ldr	r3, [pc, #128]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335e:	4a1f      	ldr	r2, [pc, #124]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003368:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336e:	4a1b      	ldr	r2, [pc, #108]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003378:	4a18      	ldr	r2, [pc, #96]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe f89b 	bl	80014c4 <HAL_GetTick>
 800338e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003390:	e00b      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fe f897 	bl	80014c4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d902      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	74fb      	strb	r3, [r7, #19]
            break;
 80033a8:	e006      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033aa:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ec      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033be:	4b07      	ldr	r3, [pc, #28]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033cc:	4903      	ldr	r1, [pc, #12]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033d4:	e008      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	74bb      	strb	r3, [r7, #18]
 80033da:	e005      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e8:	7c7b      	ldrb	r3, [r7, #17]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4ba7      	ldr	r3, [pc, #668]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	4aa6      	ldr	r2, [pc, #664]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003406:	4ba1      	ldr	r3, [pc, #644]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340c:	f023 0203 	bic.w	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	499d      	ldr	r1, [pc, #628]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003428:	4b98      	ldr	r3, [pc, #608]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342e:	f023 020c 	bic.w	r2, r3, #12
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4995      	ldr	r1, [pc, #596]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800344a:	4b90      	ldr	r3, [pc, #576]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003450:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	498c      	ldr	r1, [pc, #560]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800346c:	4b87      	ldr	r3, [pc, #540]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003472:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	4984      	ldr	r1, [pc, #528]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800348e:	4b7f      	ldr	r3, [pc, #508]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	497b      	ldr	r1, [pc, #492]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034b0:	4b76      	ldr	r3, [pc, #472]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	4973      	ldr	r1, [pc, #460]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034d2:	4b6e      	ldr	r3, [pc, #440]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	496a      	ldr	r1, [pc, #424]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034f4:	4b65      	ldr	r3, [pc, #404]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4962      	ldr	r1, [pc, #392]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003516:	4b5d      	ldr	r3, [pc, #372]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	4959      	ldr	r1, [pc, #356]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003538:	4b54      	ldr	r3, [pc, #336]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003546:	4951      	ldr	r1, [pc, #324]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800355a:	4b4c      	ldr	r3, [pc, #304]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003560:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	4948      	ldr	r1, [pc, #288]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800357c:	4b43      	ldr	r3, [pc, #268]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	4940      	ldr	r1, [pc, #256]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800359a:	d105      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359c:	4b3b      	ldr	r3, [pc, #236]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a3a      	ldr	r2, [pc, #232]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d015      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035b4:	4b35      	ldr	r3, [pc, #212]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c2:	4932      	ldr	r1, [pc, #200]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035d2:	d105      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d4:	4b2d      	ldr	r3, [pc, #180]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4a2c      	ldr	r2, [pc, #176]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035ec:	4b27      	ldr	r3, [pc, #156]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fa:	4924      	ldr	r1, [pc, #144]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800360a:	d105      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360c:	4b1f      	ldr	r3, [pc, #124]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a1e      	ldr	r2, [pc, #120]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003616:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003624:	4b19      	ldr	r3, [pc, #100]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003632:	4916      	ldr	r1, [pc, #88]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003642:	d105      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003644:	4b11      	ldr	r3, [pc, #68]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a10      	ldr	r2, [pc, #64]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800364e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d019      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003662:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	4908      	ldr	r1, [pc, #32]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800367a:	d109      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800367c:	4b03      	ldr	r3, [pc, #12]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a02      	ldr	r2, [pc, #8]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003686:	60d3      	str	r3, [r2, #12]
 8003688:	e002      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d015      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800369c:	4b29      	ldr	r3, [pc, #164]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	4926      	ldr	r1, [pc, #152]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ba:	d105      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036bc:	4b21      	ldr	r3, [pc, #132]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a20      	ldr	r2, [pc, #128]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80036d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036da:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e2:	4918      	ldr	r1, [pc, #96]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f2:	d105      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036f4:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d015      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800370c:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800370e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003712:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	490a      	ldr	r1, [pc, #40]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003726:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800372a:	d105      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a04      	ldr	r2, [pc, #16]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003736:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003738:	7cbb      	ldrb	r3, [r7, #18]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000

08003748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e049      	b.n	80037ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fca2 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f000 fb5a 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d001      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e054      	b.n	80038ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a26      	ldr	r2, [pc, #152]	@ (80038c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d022      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383a:	d01d      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a22      	ldr	r2, [pc, #136]	@ (80038cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d018      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a21      	ldr	r2, [pc, #132]	@ (80038d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1f      	ldr	r2, [pc, #124]	@ (80038d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00e      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1e      	ldr	r2, [pc, #120]	@ (80038d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <HAL_TIM_Base_Start_IT+0xe4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x80>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1b      	ldr	r2, [pc, #108]	@ (80038e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d115      	bne.n	80038a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	4b19      	ldr	r3, [pc, #100]	@ (80038e4 <HAL_TIM_Base_Start_IT+0xec>)
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b06      	cmp	r3, #6
 8003888:	d015      	beq.n	80038b6 <HAL_TIM_Base_Start_IT+0xbe>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003890:	d011      	beq.n	80038b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e000      	b.n	80038b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40013400 	.word	0x40013400
 80038dc:	40014000 	.word	0x40014000
 80038e0:	40015000 	.word	0x40015000
 80038e4:	00010007 	.word	0x00010007

080038e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e097      	b.n	8003a2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fd faff 	bl	8000f14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800392c:	f023 0307 	bic.w	r3, r3, #7
 8003930:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 fa7f 	bl	8003e40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	4313      	orrs	r3, r2
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003988:	f023 030c 	bic.w	r3, r3, #12
 800398c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003994:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	4313      	orrs	r3, r2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	011a      	lsls	r2, r3, #4
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	031b      	lsls	r3, r3, #12
 80039b8:	4313      	orrs	r3, r2
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	4313      	orrs	r3, r2
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d110      	bne.n	8003a86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d102      	bne.n	8003a70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a6a:	7b7b      	ldrb	r3, [r7, #13]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e069      	b.n	8003b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a84:	e031      	b.n	8003aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d110      	bne.n	8003aae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d102      	bne.n	8003a98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a92:	7b3b      	ldrb	r3, [r7, #12]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d001      	beq.n	8003a9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e055      	b.n	8003b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aac:	e01d      	b.n	8003aea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d108      	bne.n	8003ac6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aba:	7b7b      	ldrb	r3, [r7, #13]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d102      	bne.n	8003ac6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ac0:	7b3b      	ldrb	r3, [r7, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d001      	beq.n	8003aca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e03e      	b.n	8003b48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2202      	movs	r2, #2
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_TIM_Encoder_Start+0xc4>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d008      	beq.n	8003b08 <HAL_TIM_Encoder_Start+0xd4>
 8003af6:	e00f      	b.n	8003b18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2201      	movs	r2, #1
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fa71 	bl	8003fe8 <TIM_CCxChannelCmd>
      break;
 8003b06:	e016      	b.n	8003b36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	2104      	movs	r1, #4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fa69 	bl	8003fe8 <TIM_CCxChannelCmd>
      break;
 8003b16:	e00e      	b.n	8003b36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fa61 	bl	8003fe8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2104      	movs	r1, #4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fa5a 	bl	8003fe8 <TIM_CCxChannelCmd>
      break;
 8003b34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0201 	orr.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d020      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01b      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0202 	mvn.w	r2, #2
 8003b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f931 	bl	8003e02 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f923 	bl	8003dee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f934 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d020      	beq.n	8003c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01b      	beq.n	8003c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0204 	mvn.w	r2, #4
 8003bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f90b 	bl	8003e02 <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8fd 	bl	8003dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f90e 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d020      	beq.n	8003c4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01b      	beq.n	8003c4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0208 	mvn.w	r2, #8
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2204      	movs	r2, #4
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8e5 	bl	8003e02 <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8d7 	bl	8003dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f8e8 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d020      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01b      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0210 	mvn.w	r2, #16
 8003c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8bf 	bl	8003e02 <HAL_TIM_IC_CaptureCallback>
 8003c84:	e005      	b.n	8003c92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8b1 	bl	8003dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f8c2 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00c      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0201 	mvn.w	r2, #1
 8003cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fc fc7a 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00c      	beq.n	8003cea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fa80 	bl	80041ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fa78 	bl	80041fe <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00c      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f87c 	bl	8003e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00c      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f06f 0220 	mvn.w	r2, #32
 8003d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fa40 	bl	80041d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00c      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fa4c 	bl	8004212 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00c      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fa44 	bl	8004226 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00c      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fa3c 	bl	800423a <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00c      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fa34 	bl	800424e <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a4c      	ldr	r2, [pc, #304]	@ (8003f84 <TIM_Base_SetConfig+0x144>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d017      	beq.n	8003e88 <TIM_Base_SetConfig+0x48>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5e:	d013      	beq.n	8003e88 <TIM_Base_SetConfig+0x48>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a49      	ldr	r2, [pc, #292]	@ (8003f88 <TIM_Base_SetConfig+0x148>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00f      	beq.n	8003e88 <TIM_Base_SetConfig+0x48>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a48      	ldr	r2, [pc, #288]	@ (8003f8c <TIM_Base_SetConfig+0x14c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00b      	beq.n	8003e88 <TIM_Base_SetConfig+0x48>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a47      	ldr	r2, [pc, #284]	@ (8003f90 <TIM_Base_SetConfig+0x150>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <TIM_Base_SetConfig+0x48>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a46      	ldr	r2, [pc, #280]	@ (8003f94 <TIM_Base_SetConfig+0x154>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_Base_SetConfig+0x48>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a45      	ldr	r2, [pc, #276]	@ (8003f98 <TIM_Base_SetConfig+0x158>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d108      	bne.n	8003e9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a39      	ldr	r2, [pc, #228]	@ (8003f84 <TIM_Base_SetConfig+0x144>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d023      	beq.n	8003eea <TIM_Base_SetConfig+0xaa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea8:	d01f      	beq.n	8003eea <TIM_Base_SetConfig+0xaa>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a36      	ldr	r2, [pc, #216]	@ (8003f88 <TIM_Base_SetConfig+0x148>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01b      	beq.n	8003eea <TIM_Base_SetConfig+0xaa>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a35      	ldr	r2, [pc, #212]	@ (8003f8c <TIM_Base_SetConfig+0x14c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d017      	beq.n	8003eea <TIM_Base_SetConfig+0xaa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a34      	ldr	r2, [pc, #208]	@ (8003f90 <TIM_Base_SetConfig+0x150>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <TIM_Base_SetConfig+0xaa>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a33      	ldr	r2, [pc, #204]	@ (8003f94 <TIM_Base_SetConfig+0x154>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00f      	beq.n	8003eea <TIM_Base_SetConfig+0xaa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a33      	ldr	r2, [pc, #204]	@ (8003f9c <TIM_Base_SetConfig+0x15c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_Base_SetConfig+0xaa>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a32      	ldr	r2, [pc, #200]	@ (8003fa0 <TIM_Base_SetConfig+0x160>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <TIM_Base_SetConfig+0xaa>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a31      	ldr	r2, [pc, #196]	@ (8003fa4 <TIM_Base_SetConfig+0x164>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_Base_SetConfig+0xaa>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8003f98 <TIM_Base_SetConfig+0x158>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d108      	bne.n	8003efc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <TIM_Base_SetConfig+0x144>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <TIM_Base_SetConfig+0x110>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f94 <TIM_Base_SetConfig+0x154>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00f      	beq.n	8003f50 <TIM_Base_SetConfig+0x110>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <TIM_Base_SetConfig+0x15c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00b      	beq.n	8003f50 <TIM_Base_SetConfig+0x110>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <TIM_Base_SetConfig+0x160>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0x110>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <TIM_Base_SetConfig+0x164>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0x110>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a13      	ldr	r2, [pc, #76]	@ (8003f98 <TIM_Base_SetConfig+0x158>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d103      	bne.n	8003f58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d105      	bne.n	8003f76 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	611a      	str	r2, [r3, #16]
  }
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40015000 	.word	0x40015000
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800

08003fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	021a      	lsls	r2, r3, #8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1a      	ldr	r2, [r3, #32]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	43db      	mvns	r3, r3
 800400a:	401a      	ands	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1a      	ldr	r2, [r3, #32]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004048:	2302      	movs	r3, #2
 800404a:	e074      	b.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a34      	ldr	r2, [pc, #208]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a33      	ldr	r2, [pc, #204]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a31      	ldr	r2, [pc, #196]	@ (800414c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004090:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80040a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a21      	ldr	r2, [pc, #132]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d022      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040cc:	d01d      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004150 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d018      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004158 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a15      	ldr	r2, [pc, #84]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d009      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a18      	ldr	r2, [pc, #96]	@ (800415c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a11      	ldr	r2, [pc, #68]	@ (800414c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d10c      	bne.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	4313      	orrs	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40013400 	.word	0x40013400
 800414c:	40015000 	.word	0x40015000
 8004150:	40000400 	.word	0x40000400
 8004154:	40000800 	.word	0x40000800
 8004158:	40000c00 	.word	0x40000c00
 800415c:	40014000 	.word	0x40014000

08004160 <HAL_TIMEx_ConfigEncoderIndex>:
  * @param  sEncoderIndexConfig Encoder index configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigEncoderIndex(TIM_HandleTypeDef *htim,
                                               TIMEx_EncoderIndexConfigTypeDef *sEncoderIndexConfig)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_TIMEx_ConfigEncoderIndex+0x18>
 8004174:	2302      	movs	r3, #2
 8004176:	e02a      	b.n	80041ce <HAL_TIMEx_ConfigEncoderIndex+0x6e>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f7ff ff0a 	bl	8003fa8 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	f023 02e6 	bic.w	r2, r3, #230	@ 0xe6
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	6839      	ldr	r1, [r7, #0]
 80041a4:	7b09      	ldrb	r1, [r1, #12]
 80041a6:	2901      	cmp	r1, #1
 80041a8:	d101      	bne.n	80041ae <HAL_TIMEx_ConfigEncoderIndex+0x4e>
 80041aa:	2120      	movs	r1, #32
 80041ac:	e000      	b.n	80041b0 <HAL_TIMEx_ConfigEncoderIndex+0x50>
 80041ae:	2100      	movs	r1, #0
 80041b0:	4319      	orrs	r1, r3
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	430b      	orrs	r3, r1
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	659a      	str	r2, [r3, #88]	@ 0x58
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e042      	b.n	80042fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fc ff3c 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	@ 0x24
 8004290:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fef7 	bl	80050a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fbf8 	bl	8004aa8 <UART_SetConfig>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e01b      	b.n	80042fa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 ff76 	bl	80051e4 <UART_CheckIdleState>
 80042f8:	4603      	mov	r3, r0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08a      	sub	sp, #40	@ 0x28
 8004306:	af02      	add	r7, sp, #8
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004318:	2b20      	cmp	r3, #32
 800431a:	d17b      	bne.n	8004414 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_UART_Transmit+0x26>
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e074      	b.n	8004416 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2221      	movs	r2, #33	@ 0x21
 8004338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800433c:	f7fd f8c2 	bl	80014c4 <HAL_GetTick>
 8004340:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435a:	d108      	bne.n	800436e <HAL_UART_Transmit+0x6c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	e003      	b.n	8004376 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004376:	e030      	b.n	80043da <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2200      	movs	r2, #0
 8004380:	2180      	movs	r1, #128	@ 0x80
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 ffd8 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e03d      	b.n	8004416 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	3302      	adds	r3, #2
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e007      	b.n	80043c8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3301      	adds	r3, #1
 80043c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1c8      	bne.n	8004378 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2140      	movs	r1, #64	@ 0x40
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 ffa1 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e006      	b.n	8004416 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e000      	b.n	8004416 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
  }
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b0ba      	sub	sp, #232	@ 0xe8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800444a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800444e:	4013      	ands	r3, r2
 8004450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d11b      	bne.n	8004494 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800445c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d015      	beq.n	8004494 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d009      	beq.n	8004494 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 82e3 	beq.w	8004a50 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
      }
      return;
 8004492:	e2dd      	b.n	8004a50 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8123 	beq.w	80046e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800449e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80044a2:	4b8d      	ldr	r3, [pc, #564]	@ (80046d8 <HAL_UART_IRQHandler+0x2b8>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80044aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80044ae:	4b8b      	ldr	r3, [pc, #556]	@ (80046dc <HAL_UART_IRQHandler+0x2bc>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8116 	beq.w	80046e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d011      	beq.n	80044e8 <HAL_UART_IRQHandler+0xc8>
 80044c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00b      	beq.n	80044e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2201      	movs	r2, #1
 80044d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	f043 0201 	orr.w	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d011      	beq.n	8004518 <HAL_UART_IRQHandler+0xf8>
 80044f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2202      	movs	r2, #2
 8004506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450e:	f043 0204 	orr.w	r2, r3, #4
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d011      	beq.n	8004548 <HAL_UART_IRQHandler+0x128>
 8004524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2204      	movs	r2, #4
 8004536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	f043 0202 	orr.w	r2, r3, #2
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d017      	beq.n	8004584 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004564:	4b5c      	ldr	r3, [pc, #368]	@ (80046d8 <HAL_UART_IRQHandler+0x2b8>)
 8004566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2208      	movs	r2, #8
 8004572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457a:	f043 0208 	orr.w	r2, r3, #8
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800458c:	2b00      	cmp	r3, #0
 800458e:	d012      	beq.n	80045b6 <HAL_UART_IRQHandler+0x196>
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00c      	beq.n	80045b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8249 	beq.w	8004a54 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d013      	beq.n	80045f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460a:	2b40      	cmp	r3, #64	@ 0x40
 800460c:	d005      	beq.n	800461a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800460e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004612:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004616:	2b00      	cmp	r3, #0
 8004618:	d054      	beq.n	80046c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fef9 	bl	8005412 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b40      	cmp	r3, #64	@ 0x40
 800462c:	d146      	bne.n	80046bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800464c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800465a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800465e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1d9      	bne.n	800462e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004680:	2b00      	cmp	r3, #0
 8004682:	d017      	beq.n	80046b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800468a:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <HAL_UART_IRQHandler+0x2c0>)
 800468c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004694:	4618      	mov	r0, r3
 8004696:	f7fd f8ab 	bl	80017f0 <HAL_DMA_Abort_IT>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d019      	beq.n	80046d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80046ae:	4610      	mov	r0, r2
 80046b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b2:	e00f      	b.n	80046d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f9e1 	bl	8004a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ba:	e00b      	b.n	80046d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f9dd 	bl	8004a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c2:	e007      	b.n	80046d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f9d9 	bl	8004a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80046d2:	e1bf      	b.n	8004a54 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	bf00      	nop
    return;
 80046d6:	e1bd      	b.n	8004a54 <HAL_UART_IRQHandler+0x634>
 80046d8:	10000001 	.word	0x10000001
 80046dc:	04000120 	.word	0x04000120
 80046e0:	080054df 	.word	0x080054df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	f040 8153 	bne.w	8004994 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 814c 	beq.w	8004994 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8145 	beq.w	8004994 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2210      	movs	r2, #16
 8004710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b40      	cmp	r3, #64	@ 0x40
 800471e:	f040 80bb 	bne.w	8004898 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 818f 	beq.w	8004a58 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004744:	429a      	cmp	r2, r3
 8004746:	f080 8187 	bcs.w	8004a58 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004750:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	f040 8087 	bne.w	8004876 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800477c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004796:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800479e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1da      	bne.n	8004768 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3308      	adds	r3, #8
 80047b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e1      	bne.n	80047b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3308      	adds	r3, #8
 800480e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004812:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004814:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004818:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e3      	bne.n	80047ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004844:	f023 0310 	bic.w	r3, r3, #16
 8004848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004856:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004858:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800485c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e4      	bne.n	8004834 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004870:	4618      	mov	r0, r3
 8004872:	f7fc ff64 	bl	800173e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004888:	b29b      	uxth	r3, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	b29b      	uxth	r3, r3
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f8fd 	bl	8004a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004896:	e0df      	b.n	8004a58 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80d1 	beq.w	8004a5c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80048ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80cc 	beq.w	8004a5c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e4      	bne.n	80048c4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3308      	adds	r3, #8
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	623b      	str	r3, [r7, #32]
   return(result);
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3308      	adds	r3, #8
 800491e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004922:	633a      	str	r2, [r7, #48]	@ 0x30
 8004924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e1      	bne.n	80048fa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	60fb      	str	r3, [r7, #12]
   return(result);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0310 	bic.w	r3, r3, #16
 800495e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	69b9      	ldr	r1, [r7, #24]
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	617b      	str	r3, [r7, #20]
   return(result);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e4      	bne.n	800494a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f87f 	bl	8004a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004992:	e063      	b.n	8004a5c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <HAL_UART_IRQHandler+0x59e>
 80049a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80049b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fdd2 	bl	8005560 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049bc:	e051      	b.n	8004a62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d014      	beq.n	80049f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80049ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80049d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d03a      	beq.n	8004a60 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
    }
    return;
 80049f2:	e035      	b.n	8004a60 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <HAL_UART_IRQHandler+0x5f4>
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fd7c 	bl	800550a <UART_EndTransmit_IT>
    return;
 8004a12:	e026      	b.n	8004a62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <HAL_UART_IRQHandler+0x614>
 8004a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fdab 	bl	8005588 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a32:	e016      	b.n	8004a62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d010      	beq.n	8004a62 <HAL_UART_IRQHandler+0x642>
 8004a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	da0c      	bge.n	8004a62 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fd93 	bl	8005574 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a4e:	e008      	b.n	8004a62 <HAL_UART_IRQHandler+0x642>
      return;
 8004a50:	bf00      	nop
 8004a52:	e006      	b.n	8004a62 <HAL_UART_IRQHandler+0x642>
    return;
 8004a54:	bf00      	nop
 8004a56:	e004      	b.n	8004a62 <HAL_UART_IRQHandler+0x642>
      return;
 8004a58:	bf00      	nop
 8004a5a:	e002      	b.n	8004a62 <HAL_UART_IRQHandler+0x642>
      return;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <HAL_UART_IRQHandler+0x642>
    return;
 8004a60:	bf00      	nop
  }
}
 8004a62:	37e8      	adds	r7, #232	@ 0xe8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aac:	b08c      	sub	sp, #48	@ 0x30
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4baa      	ldr	r3, [pc, #680]	@ (8004d80 <UART_SetConfig+0x2d8>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a9f      	ldr	r2, [pc, #636]	@ (8004d84 <UART_SetConfig+0x2dc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b10:	4313      	orrs	r3, r2
 8004b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004b1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b32:	f023 010f 	bic.w	r1, r3, #15
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a90      	ldr	r2, [pc, #576]	@ (8004d88 <UART_SetConfig+0x2e0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d125      	bne.n	8004b98 <UART_SetConfig+0xf0>
 8004b4c:	4b8f      	ldr	r3, [pc, #572]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d81a      	bhi.n	8004b90 <UART_SetConfig+0xe8>
 8004b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <UART_SetConfig+0xb8>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b89 	.word	0x08004b89
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b76:	e116      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b7e:	e112      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b86:	e10e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8e:	e10a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b96:	e106      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a7c      	ldr	r2, [pc, #496]	@ (8004d90 <UART_SetConfig+0x2e8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d138      	bne.n	8004c14 <UART_SetConfig+0x16c>
 8004ba2:	4b7a      	ldr	r3, [pc, #488]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba8:	f003 030c 	and.w	r3, r3, #12
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d82d      	bhi.n	8004c0c <UART_SetConfig+0x164>
 8004bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <UART_SetConfig+0x110>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004c0d 	.word	0x08004c0d
 8004bc0:	08004c0d 	.word	0x08004c0d
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004bfd 	.word	0x08004bfd
 8004bcc:	08004c0d 	.word	0x08004c0d
 8004bd0:	08004c0d 	.word	0x08004c0d
 8004bd4:	08004c0d 	.word	0x08004c0d
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	08004c0d 	.word	0x08004c0d
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c05 	.word	0x08004c05
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bf2:	e0d8      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfa:	e0d4      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c02:	e0d0      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0a:	e0cc      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c12:	e0c8      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a5e      	ldr	r2, [pc, #376]	@ (8004d94 <UART_SetConfig+0x2ec>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d125      	bne.n	8004c6a <UART_SetConfig+0x1c2>
 8004c1e:	4b5b      	ldr	r3, [pc, #364]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c28:	2b30      	cmp	r3, #48	@ 0x30
 8004c2a:	d016      	beq.n	8004c5a <UART_SetConfig+0x1b2>
 8004c2c:	2b30      	cmp	r3, #48	@ 0x30
 8004c2e:	d818      	bhi.n	8004c62 <UART_SetConfig+0x1ba>
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d00a      	beq.n	8004c4a <UART_SetConfig+0x1a2>
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d814      	bhi.n	8004c62 <UART_SetConfig+0x1ba>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <UART_SetConfig+0x19a>
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d008      	beq.n	8004c52 <UART_SetConfig+0x1aa>
 8004c40:	e00f      	b.n	8004c62 <UART_SetConfig+0x1ba>
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c48:	e0ad      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c50:	e0a9      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c52:	2304      	movs	r3, #4
 8004c54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c58:	e0a5      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c60:	e0a1      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c62:	2310      	movs	r3, #16
 8004c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c68:	e09d      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d98 <UART_SetConfig+0x2f0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d125      	bne.n	8004cc0 <UART_SetConfig+0x218>
 8004c74:	4b45      	ldr	r3, [pc, #276]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c80:	d016      	beq.n	8004cb0 <UART_SetConfig+0x208>
 8004c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c84:	d818      	bhi.n	8004cb8 <UART_SetConfig+0x210>
 8004c86:	2b80      	cmp	r3, #128	@ 0x80
 8004c88:	d00a      	beq.n	8004ca0 <UART_SetConfig+0x1f8>
 8004c8a:	2b80      	cmp	r3, #128	@ 0x80
 8004c8c:	d814      	bhi.n	8004cb8 <UART_SetConfig+0x210>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <UART_SetConfig+0x1f0>
 8004c92:	2b40      	cmp	r3, #64	@ 0x40
 8004c94:	d008      	beq.n	8004ca8 <UART_SetConfig+0x200>
 8004c96:	e00f      	b.n	8004cb8 <UART_SetConfig+0x210>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c9e:	e082      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ca6:	e07e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cae:	e07a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cb6:	e076      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cbe:	e072      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a35      	ldr	r2, [pc, #212]	@ (8004d9c <UART_SetConfig+0x2f4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d12a      	bne.n	8004d20 <UART_SetConfig+0x278>
 8004cca:	4b30      	ldr	r3, [pc, #192]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cd8:	d01a      	beq.n	8004d10 <UART_SetConfig+0x268>
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cde:	d81b      	bhi.n	8004d18 <UART_SetConfig+0x270>
 8004ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce4:	d00c      	beq.n	8004d00 <UART_SetConfig+0x258>
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cea:	d815      	bhi.n	8004d18 <UART_SetConfig+0x270>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <UART_SetConfig+0x250>
 8004cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf4:	d008      	beq.n	8004d08 <UART_SetConfig+0x260>
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x270>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cfe:	e052      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d06:	e04e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d0e:	e04a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d16:	e046      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1e:	e042      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a17      	ldr	r2, [pc, #92]	@ (8004d84 <UART_SetConfig+0x2dc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d13a      	bne.n	8004da0 <UART_SetConfig+0x2f8>
 8004d2a:	4b18      	ldr	r3, [pc, #96]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d38:	d01a      	beq.n	8004d70 <UART_SetConfig+0x2c8>
 8004d3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d3e:	d81b      	bhi.n	8004d78 <UART_SetConfig+0x2d0>
 8004d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d44:	d00c      	beq.n	8004d60 <UART_SetConfig+0x2b8>
 8004d46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d4a:	d815      	bhi.n	8004d78 <UART_SetConfig+0x2d0>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <UART_SetConfig+0x2b0>
 8004d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d54:	d008      	beq.n	8004d68 <UART_SetConfig+0x2c0>
 8004d56:	e00f      	b.n	8004d78 <UART_SetConfig+0x2d0>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d5e:	e022      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d66:	e01e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6e:	e01a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d76:	e016      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7e:	e012      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d80:	cfff69f3 	.word	0xcfff69f3
 8004d84:	40008000 	.word	0x40008000
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40004400 	.word	0x40004400
 8004d94:	40004800 	.word	0x40004800
 8004d98:	40004c00 	.word	0x40004c00
 8004d9c:	40005000 	.word	0x40005000
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4aae      	ldr	r2, [pc, #696]	@ (8005064 <UART_SetConfig+0x5bc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	f040 8097 	bne.w	8004ee0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004db2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d823      	bhi.n	8004e02 <UART_SetConfig+0x35a>
 8004dba:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <UART_SetConfig+0x318>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004e03 	.word	0x08004e03
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004e03 	.word	0x08004e03
 8004dd0:	08004df3 	.word	0x08004df3
 8004dd4:	08004e03 	.word	0x08004e03
 8004dd8:	08004e03 	.word	0x08004e03
 8004ddc:	08004e03 	.word	0x08004e03
 8004de0:	08004dfb 	.word	0x08004dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fe f9f0 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8004de8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dea:	e010      	b.n	8004e0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dec:	4b9e      	ldr	r3, [pc, #632]	@ (8005068 <UART_SetConfig+0x5c0>)
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004df0:	e00d      	b.n	8004e0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df2:	f7fe f97b 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 8004df6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004df8:	e009      	b.n	8004e0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e00:	e005      	b.n	8004e0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8130 	beq.w	8005076 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	4a94      	ldr	r2, [pc, #592]	@ (800506c <UART_SetConfig+0x5c4>)
 8004e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d305      	bcc.n	8004e46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d903      	bls.n	8004e4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e4c:	e113      	b.n	8005076 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	2200      	movs	r2, #0
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	60fa      	str	r2, [r7, #12]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	4a84      	ldr	r2, [pc, #528]	@ (800506c <UART_SetConfig+0x5c4>)
 8004e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2200      	movs	r2, #0
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e70:	f7fb fa26 	bl	80002c0 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	020b      	lsls	r3, r1, #8
 8004e86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e8a:	0202      	lsls	r2, r0, #8
 8004e8c:	6979      	ldr	r1, [r7, #20]
 8004e8e:	6849      	ldr	r1, [r1, #4]
 8004e90:	0849      	lsrs	r1, r1, #1
 8004e92:	2000      	movs	r0, #0
 8004e94:	460c      	mov	r4, r1
 8004e96:	4605      	mov	r5, r0
 8004e98:	eb12 0804 	adds.w	r8, r2, r4
 8004e9c:	eb43 0905 	adc.w	r9, r3, r5
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	469a      	mov	sl, r3
 8004ea8:	4693      	mov	fp, r2
 8004eaa:	4652      	mov	r2, sl
 8004eac:	465b      	mov	r3, fp
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	f7fb fa05 	bl	80002c0 <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4613      	mov	r3, r2
 8004ebc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ec4:	d308      	bcc.n	8004ed8 <UART_SetConfig+0x430>
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ecc:	d204      	bcs.n	8004ed8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a3a      	ldr	r2, [r7, #32]
 8004ed4:	60da      	str	r2, [r3, #12]
 8004ed6:	e0ce      	b.n	8005076 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ede:	e0ca      	b.n	8005076 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee8:	d166      	bne.n	8004fb8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004eea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d827      	bhi.n	8004f42 <UART_SetConfig+0x49a>
 8004ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef8 <UART_SetConfig+0x450>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f1d 	.word	0x08004f1d
 8004efc:	08004f25 	.word	0x08004f25
 8004f00:	08004f2d 	.word	0x08004f2d
 8004f04:	08004f43 	.word	0x08004f43
 8004f08:	08004f33 	.word	0x08004f33
 8004f0c:	08004f43 	.word	0x08004f43
 8004f10:	08004f43 	.word	0x08004f43
 8004f14:	08004f43 	.word	0x08004f43
 8004f18:	08004f3b 	.word	0x08004f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f1c:	f7fe f954 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8004f20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f22:	e014      	b.n	8004f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7fe f966 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8004f28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f2a:	e010      	b.n	8004f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8005068 <UART_SetConfig+0x5c0>)
 8004f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f30:	e00d      	b.n	8004f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f32:	f7fe f8db 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 8004f36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f38:	e009      	b.n	8004f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f40:	e005      	b.n	8004f4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8090 	beq.w	8005076 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	4a44      	ldr	r2, [pc, #272]	@ (800506c <UART_SetConfig+0x5c4>)
 8004f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f60:	461a      	mov	r2, r3
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f68:	005a      	lsls	r2, r3, #1
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	441a      	add	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2b0f      	cmp	r3, #15
 8004f80:	d916      	bls.n	8004fb0 <UART_SetConfig+0x508>
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f88:	d212      	bcs.n	8004fb0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f023 030f 	bic.w	r3, r3, #15
 8004f92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	8bfb      	ldrh	r3, [r7, #30]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	8bfa      	ldrh	r2, [r7, #30]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	e062      	b.n	8005076 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fb6:	e05e      	b.n	8005076 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d828      	bhi.n	8005012 <UART_SetConfig+0x56a>
 8004fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc8 <UART_SetConfig+0x520>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	08005013 	.word	0x08005013
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005013 	.word	0x08005013
 8004fe4:	08005013 	.word	0x08005013
 8004fe8:	0800500b 	.word	0x0800500b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fec:	f7fe f8ec 	bl	80031c8 <HAL_RCC_GetPCLK1Freq>
 8004ff0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ff2:	e014      	b.n	800501e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7fe f8fe 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8004ff8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ffa:	e010      	b.n	800501e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8005068 <UART_SetConfig+0x5c0>)
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005000:	e00d      	b.n	800501e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fe f873 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 8005006:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005008:	e009      	b.n	800501e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005010:	e005      	b.n	800501e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800501c:	bf00      	nop
    }

    if (pclk != 0U)
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d028      	beq.n	8005076 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	4a10      	ldr	r2, [pc, #64]	@ (800506c <UART_SetConfig+0x5c4>)
 800502a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800502e:	461a      	mov	r2, r3
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	fbb3 f2f2 	udiv	r2, r3, r2
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	441a      	add	r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	2b0f      	cmp	r3, #15
 800504c:	d910      	bls.n	8005070 <UART_SetConfig+0x5c8>
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005054:	d20c      	bcs.n	8005070 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	b29a      	uxth	r2, r3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60da      	str	r2, [r3, #12]
 8005060:	e009      	b.n	8005076 <UART_SetConfig+0x5ce>
 8005062:	bf00      	nop
 8005064:	40008000 	.word	0x40008000
 8005068:	00f42400 	.word	0x00f42400
 800506c:	080068d8 	.word	0x080068d8
      }
      else
      {
        ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2201      	movs	r2, #1
 800507a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2201      	movs	r2, #1
 8005082:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2200      	movs	r2, #0
 8005090:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005092:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005096:	4618      	mov	r0, r3
 8005098:	3730      	adds	r7, #48	@ 0x30
 800509a:	46bd      	mov	sp, r7
 800509c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800519e:	d10a      	bne.n	80051b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b098      	sub	sp, #96	@ 0x60
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f4:	f7fc f966 	bl	80014c4 <HAL_GetTick>
 80051f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d12f      	bne.n	8005268 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005208:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005210:	2200      	movs	r2, #0
 8005212:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f88e 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d022      	beq.n	8005268 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005236:	653b      	str	r3, [r7, #80]	@ 0x50
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005240:	647b      	str	r3, [r7, #68]	@ 0x44
 8005242:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800524e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e6      	bne.n	8005222 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e063      	b.n	8005330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b04      	cmp	r3, #4
 8005274:	d149      	bne.n	800530a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005276:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527e:	2200      	movs	r2, #0
 8005280:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f857 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d03c      	beq.n	800530a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	623b      	str	r3, [r7, #32]
   return(result);
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e6      	bne.n	8005290 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3308      	adds	r3, #8
 80052c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e2:	61fa      	str	r2, [r7, #28]
 80052e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	69b9      	ldr	r1, [r7, #24]
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	617b      	str	r3, [r7, #20]
   return(result);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e5      	bne.n	80052c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e012      	b.n	8005330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3758      	adds	r7, #88	@ 0x58
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005348:	e04f      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d04b      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fc f8b7 	bl	80014c4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <UART_WaitOnFlagUntilTimeout+0x30>
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e04e      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d037      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b80      	cmp	r3, #128	@ 0x80
 800537e:	d034      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b40      	cmp	r3, #64	@ 0x40
 8005384:	d031      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b08      	cmp	r3, #8
 8005392:	d110      	bne.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2208      	movs	r2, #8
 800539a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f838 	bl	8005412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2208      	movs	r2, #8
 80053a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e029      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053c4:	d111      	bne.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f81e 	bl	8005412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e00f      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	429a      	cmp	r2, r3
 8005406:	d0a0      	beq.n	800534a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005412:	b480      	push	{r7}
 8005414:	b095      	sub	sp, #84	@ 0x54
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800542e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005438:	643b      	str	r3, [r7, #64]	@ 0x40
 800543a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800543e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e6      	bne.n	800541a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	61fb      	str	r3, [r7, #28]
   return(result);
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005470:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e3      	bne.n	800544c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d118      	bne.n	80054be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	60bb      	str	r3, [r7, #8]
   return(result);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0310 	bic.w	r3, r3, #16
 80054a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6979      	ldr	r1, [r7, #20]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	613b      	str	r3, [r7, #16]
   return(result);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054d2:	bf00      	nop
 80054d4:	3754      	adds	r7, #84	@ 0x54
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fabd 	bl	8004a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b088      	sub	sp, #32
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6979      	ldr	r1, [r7, #20]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	613b      	str	r3, [r7, #16]
   return(result);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e6      	bne.n	8005512 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fa88 	bl	8004a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005558:	bf00      	nop
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e027      	b.n	8005602 <HAL_UARTEx_DisableFifoMode+0x66>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2224      	movs	r2, #36	@ 0x24
 80055be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80055e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005622:	2302      	movs	r3, #2
 8005624:	e02d      	b.n	8005682 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2224      	movs	r2, #36	@ 0x24
 8005632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f850 	bl	8005708 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800569e:	2302      	movs	r3, #2
 80056a0:	e02d      	b.n	80056fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2224      	movs	r2, #36	@ 0x24
 80056ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f812 	bl	8005708 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005714:	2b00      	cmp	r3, #0
 8005716:	d108      	bne.n	800572a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005728:	e031      	b.n	800578e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800572a:	2308      	movs	r3, #8
 800572c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800572e:	2308      	movs	r3, #8
 8005730:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	0e5b      	lsrs	r3, r3, #25
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	0f5b      	lsrs	r3, r3, #29
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005752:	7bbb      	ldrb	r3, [r7, #14]
 8005754:	7b3a      	ldrb	r2, [r7, #12]
 8005756:	4911      	ldr	r1, [pc, #68]	@ (800579c <UARTEx_SetNbDataToProcess+0x94>)
 8005758:	5c8a      	ldrb	r2, [r1, r2]
 800575a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800575e:	7b3a      	ldrb	r2, [r7, #12]
 8005760:	490f      	ldr	r1, [pc, #60]	@ (80057a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005762:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005764:	fb93 f3f2 	sdiv	r3, r3, r2
 8005768:	b29a      	uxth	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	7b7a      	ldrb	r2, [r7, #13]
 8005774:	4909      	ldr	r1, [pc, #36]	@ (800579c <UARTEx_SetNbDataToProcess+0x94>)
 8005776:	5c8a      	ldrb	r2, [r1, r2]
 8005778:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800577c:	7b7a      	ldrb	r2, [r7, #13]
 800577e:	4908      	ldr	r1, [pc, #32]	@ (80057a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005780:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005782:	fb93 f3f2 	sdiv	r3, r3, r2
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	080068f0 	.word	0x080068f0
 80057a0:	080068f8 	.word	0x080068f8

080057a4 <std>:
 80057a4:	2300      	movs	r3, #0
 80057a6:	b510      	push	{r4, lr}
 80057a8:	4604      	mov	r4, r0
 80057aa:	e9c0 3300 	strd	r3, r3, [r0]
 80057ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057b2:	6083      	str	r3, [r0, #8]
 80057b4:	8181      	strh	r1, [r0, #12]
 80057b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057b8:	81c2      	strh	r2, [r0, #14]
 80057ba:	6183      	str	r3, [r0, #24]
 80057bc:	4619      	mov	r1, r3
 80057be:	2208      	movs	r2, #8
 80057c0:	305c      	adds	r0, #92	@ 0x5c
 80057c2:	f000 fab5 	bl	8005d30 <memset>
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <std+0x58>)
 80057c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <std+0x5c>)
 80057cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <std+0x60>)
 80057d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <std+0x64>)
 80057d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <std+0x68>)
 80057d8:	6224      	str	r4, [r4, #32]
 80057da:	429c      	cmp	r4, r3
 80057dc:	d006      	beq.n	80057ec <std+0x48>
 80057de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057e2:	4294      	cmp	r4, r2
 80057e4:	d002      	beq.n	80057ec <std+0x48>
 80057e6:	33d0      	adds	r3, #208	@ 0xd0
 80057e8:	429c      	cmp	r4, r3
 80057ea:	d105      	bne.n	80057f8 <std+0x54>
 80057ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f4:	f000 bb14 	b.w	8005e20 <__retarget_lock_init_recursive>
 80057f8:	bd10      	pop	{r4, pc}
 80057fa:	bf00      	nop
 80057fc:	08005b81 	.word	0x08005b81
 8005800:	08005ba3 	.word	0x08005ba3
 8005804:	08005bdb 	.word	0x08005bdb
 8005808:	08005bff 	.word	0x08005bff
 800580c:	20000340 	.word	0x20000340

08005810 <stdio_exit_handler>:
 8005810:	4a02      	ldr	r2, [pc, #8]	@ (800581c <stdio_exit_handler+0xc>)
 8005812:	4903      	ldr	r1, [pc, #12]	@ (8005820 <stdio_exit_handler+0x10>)
 8005814:	4803      	ldr	r0, [pc, #12]	@ (8005824 <stdio_exit_handler+0x14>)
 8005816:	f000 b869 	b.w	80058ec <_fwalk_sglue>
 800581a:	bf00      	nop
 800581c:	20000018 	.word	0x20000018
 8005820:	080066d1 	.word	0x080066d1
 8005824:	20000028 	.word	0x20000028

08005828 <cleanup_stdio>:
 8005828:	6841      	ldr	r1, [r0, #4]
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <cleanup_stdio+0x34>)
 800582c:	4299      	cmp	r1, r3
 800582e:	b510      	push	{r4, lr}
 8005830:	4604      	mov	r4, r0
 8005832:	d001      	beq.n	8005838 <cleanup_stdio+0x10>
 8005834:	f000 ff4c 	bl	80066d0 <_fflush_r>
 8005838:	68a1      	ldr	r1, [r4, #8]
 800583a:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <cleanup_stdio+0x38>)
 800583c:	4299      	cmp	r1, r3
 800583e:	d002      	beq.n	8005846 <cleanup_stdio+0x1e>
 8005840:	4620      	mov	r0, r4
 8005842:	f000 ff45 	bl	80066d0 <_fflush_r>
 8005846:	68e1      	ldr	r1, [r4, #12]
 8005848:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <cleanup_stdio+0x3c>)
 800584a:	4299      	cmp	r1, r3
 800584c:	d004      	beq.n	8005858 <cleanup_stdio+0x30>
 800584e:	4620      	mov	r0, r4
 8005850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005854:	f000 bf3c 	b.w	80066d0 <_fflush_r>
 8005858:	bd10      	pop	{r4, pc}
 800585a:	bf00      	nop
 800585c:	20000340 	.word	0x20000340
 8005860:	200003a8 	.word	0x200003a8
 8005864:	20000410 	.word	0x20000410

08005868 <global_stdio_init.part.0>:
 8005868:	b510      	push	{r4, lr}
 800586a:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <global_stdio_init.part.0+0x30>)
 800586c:	4c0b      	ldr	r4, [pc, #44]	@ (800589c <global_stdio_init.part.0+0x34>)
 800586e:	4a0c      	ldr	r2, [pc, #48]	@ (80058a0 <global_stdio_init.part.0+0x38>)
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	4620      	mov	r0, r4
 8005874:	2200      	movs	r2, #0
 8005876:	2104      	movs	r1, #4
 8005878:	f7ff ff94 	bl	80057a4 <std>
 800587c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005880:	2201      	movs	r2, #1
 8005882:	2109      	movs	r1, #9
 8005884:	f7ff ff8e 	bl	80057a4 <std>
 8005888:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800588c:	2202      	movs	r2, #2
 800588e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005892:	2112      	movs	r1, #18
 8005894:	f7ff bf86 	b.w	80057a4 <std>
 8005898:	20000478 	.word	0x20000478
 800589c:	20000340 	.word	0x20000340
 80058a0:	08005811 	.word	0x08005811

080058a4 <__sfp_lock_acquire>:
 80058a4:	4801      	ldr	r0, [pc, #4]	@ (80058ac <__sfp_lock_acquire+0x8>)
 80058a6:	f000 babc 	b.w	8005e22 <__retarget_lock_acquire_recursive>
 80058aa:	bf00      	nop
 80058ac:	20000481 	.word	0x20000481

080058b0 <__sfp_lock_release>:
 80058b0:	4801      	ldr	r0, [pc, #4]	@ (80058b8 <__sfp_lock_release+0x8>)
 80058b2:	f000 bab7 	b.w	8005e24 <__retarget_lock_release_recursive>
 80058b6:	bf00      	nop
 80058b8:	20000481 	.word	0x20000481

080058bc <__sinit>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	4604      	mov	r4, r0
 80058c0:	f7ff fff0 	bl	80058a4 <__sfp_lock_acquire>
 80058c4:	6a23      	ldr	r3, [r4, #32]
 80058c6:	b11b      	cbz	r3, 80058d0 <__sinit+0x14>
 80058c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058cc:	f7ff bff0 	b.w	80058b0 <__sfp_lock_release>
 80058d0:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <__sinit+0x28>)
 80058d2:	6223      	str	r3, [r4, #32]
 80058d4:	4b04      	ldr	r3, [pc, #16]	@ (80058e8 <__sinit+0x2c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f5      	bne.n	80058c8 <__sinit+0xc>
 80058dc:	f7ff ffc4 	bl	8005868 <global_stdio_init.part.0>
 80058e0:	e7f2      	b.n	80058c8 <__sinit+0xc>
 80058e2:	bf00      	nop
 80058e4:	08005829 	.word	0x08005829
 80058e8:	20000478 	.word	0x20000478

080058ec <_fwalk_sglue>:
 80058ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f0:	4607      	mov	r7, r0
 80058f2:	4688      	mov	r8, r1
 80058f4:	4614      	mov	r4, r2
 80058f6:	2600      	movs	r6, #0
 80058f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058fc:	f1b9 0901 	subs.w	r9, r9, #1
 8005900:	d505      	bpl.n	800590e <_fwalk_sglue+0x22>
 8005902:	6824      	ldr	r4, [r4, #0]
 8005904:	2c00      	cmp	r4, #0
 8005906:	d1f7      	bne.n	80058f8 <_fwalk_sglue+0xc>
 8005908:	4630      	mov	r0, r6
 800590a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800590e:	89ab      	ldrh	r3, [r5, #12]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d907      	bls.n	8005924 <_fwalk_sglue+0x38>
 8005914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005918:	3301      	adds	r3, #1
 800591a:	d003      	beq.n	8005924 <_fwalk_sglue+0x38>
 800591c:	4629      	mov	r1, r5
 800591e:	4638      	mov	r0, r7
 8005920:	47c0      	blx	r8
 8005922:	4306      	orrs	r6, r0
 8005924:	3568      	adds	r5, #104	@ 0x68
 8005926:	e7e9      	b.n	80058fc <_fwalk_sglue+0x10>

08005928 <iprintf>:
 8005928:	b40f      	push	{r0, r1, r2, r3}
 800592a:	b507      	push	{r0, r1, r2, lr}
 800592c:	4906      	ldr	r1, [pc, #24]	@ (8005948 <iprintf+0x20>)
 800592e:	ab04      	add	r3, sp, #16
 8005930:	6808      	ldr	r0, [r1, #0]
 8005932:	f853 2b04 	ldr.w	r2, [r3], #4
 8005936:	6881      	ldr	r1, [r0, #8]
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	f000 fb9f 	bl	800607c <_vfiprintf_r>
 800593e:	b003      	add	sp, #12
 8005940:	f85d eb04 	ldr.w	lr, [sp], #4
 8005944:	b004      	add	sp, #16
 8005946:	4770      	bx	lr
 8005948:	20000024 	.word	0x20000024

0800594c <_puts_r>:
 800594c:	6a03      	ldr	r3, [r0, #32]
 800594e:	b570      	push	{r4, r5, r6, lr}
 8005950:	6884      	ldr	r4, [r0, #8]
 8005952:	4605      	mov	r5, r0
 8005954:	460e      	mov	r6, r1
 8005956:	b90b      	cbnz	r3, 800595c <_puts_r+0x10>
 8005958:	f7ff ffb0 	bl	80058bc <__sinit>
 800595c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800595e:	07db      	lsls	r3, r3, #31
 8005960:	d405      	bmi.n	800596e <_puts_r+0x22>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	0598      	lsls	r0, r3, #22
 8005966:	d402      	bmi.n	800596e <_puts_r+0x22>
 8005968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800596a:	f000 fa5a 	bl	8005e22 <__retarget_lock_acquire_recursive>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	0719      	lsls	r1, r3, #28
 8005972:	d502      	bpl.n	800597a <_puts_r+0x2e>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d135      	bne.n	80059e6 <_puts_r+0x9a>
 800597a:	4621      	mov	r1, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f000 f981 	bl	8005c84 <__swsetup_r>
 8005982:	b380      	cbz	r0, 80059e6 <_puts_r+0x9a>
 8005984:	f04f 35ff 	mov.w	r5, #4294967295
 8005988:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800598a:	07da      	lsls	r2, r3, #31
 800598c:	d405      	bmi.n	800599a <_puts_r+0x4e>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	059b      	lsls	r3, r3, #22
 8005992:	d402      	bmi.n	800599a <_puts_r+0x4e>
 8005994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005996:	f000 fa45 	bl	8005e24 <__retarget_lock_release_recursive>
 800599a:	4628      	mov	r0, r5
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da04      	bge.n	80059ac <_puts_r+0x60>
 80059a2:	69a2      	ldr	r2, [r4, #24]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	dc17      	bgt.n	80059d8 <_puts_r+0x8c>
 80059a8:	290a      	cmp	r1, #10
 80059aa:	d015      	beq.n	80059d8 <_puts_r+0x8c>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	7019      	strb	r1, [r3, #0]
 80059b4:	68a3      	ldr	r3, [r4, #8]
 80059b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059ba:	3b01      	subs	r3, #1
 80059bc:	60a3      	str	r3, [r4, #8]
 80059be:	2900      	cmp	r1, #0
 80059c0:	d1ed      	bne.n	800599e <_puts_r+0x52>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	da11      	bge.n	80059ea <_puts_r+0x9e>
 80059c6:	4622      	mov	r2, r4
 80059c8:	210a      	movs	r1, #10
 80059ca:	4628      	mov	r0, r5
 80059cc:	f000 f91b 	bl	8005c06 <__swbuf_r>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d0d7      	beq.n	8005984 <_puts_r+0x38>
 80059d4:	250a      	movs	r5, #10
 80059d6:	e7d7      	b.n	8005988 <_puts_r+0x3c>
 80059d8:	4622      	mov	r2, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 f913 	bl	8005c06 <__swbuf_r>
 80059e0:	3001      	adds	r0, #1
 80059e2:	d1e7      	bne.n	80059b4 <_puts_r+0x68>
 80059e4:	e7ce      	b.n	8005984 <_puts_r+0x38>
 80059e6:	3e01      	subs	r6, #1
 80059e8:	e7e4      	b.n	80059b4 <_puts_r+0x68>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	6022      	str	r2, [r4, #0]
 80059f0:	220a      	movs	r2, #10
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e7ee      	b.n	80059d4 <_puts_r+0x88>
	...

080059f8 <puts>:
 80059f8:	4b02      	ldr	r3, [pc, #8]	@ (8005a04 <puts+0xc>)
 80059fa:	4601      	mov	r1, r0
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	f7ff bfa5 	b.w	800594c <_puts_r>
 8005a02:	bf00      	nop
 8005a04:	20000024 	.word	0x20000024

08005a08 <setbuf>:
 8005a08:	fab1 f281 	clz	r2, r1
 8005a0c:	0952      	lsrs	r2, r2, #5
 8005a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a12:	0052      	lsls	r2, r2, #1
 8005a14:	f000 b800 	b.w	8005a18 <setvbuf>

08005a18 <setvbuf>:
 8005a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a1c:	461d      	mov	r5, r3
 8005a1e:	4b57      	ldr	r3, [pc, #348]	@ (8005b7c <setvbuf+0x164>)
 8005a20:	681f      	ldr	r7, [r3, #0]
 8005a22:	4604      	mov	r4, r0
 8005a24:	460e      	mov	r6, r1
 8005a26:	4690      	mov	r8, r2
 8005a28:	b127      	cbz	r7, 8005a34 <setvbuf+0x1c>
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	b913      	cbnz	r3, 8005a34 <setvbuf+0x1c>
 8005a2e:	4638      	mov	r0, r7
 8005a30:	f7ff ff44 	bl	80058bc <__sinit>
 8005a34:	f1b8 0f02 	cmp.w	r8, #2
 8005a38:	d006      	beq.n	8005a48 <setvbuf+0x30>
 8005a3a:	f1b8 0f01 	cmp.w	r8, #1
 8005a3e:	f200 809a 	bhi.w	8005b76 <setvbuf+0x15e>
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	f2c0 8097 	blt.w	8005b76 <setvbuf+0x15e>
 8005a48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a4a:	07d9      	lsls	r1, r3, #31
 8005a4c:	d405      	bmi.n	8005a5a <setvbuf+0x42>
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	059a      	lsls	r2, r3, #22
 8005a52:	d402      	bmi.n	8005a5a <setvbuf+0x42>
 8005a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a56:	f000 f9e4 	bl	8005e22 <__retarget_lock_acquire_recursive>
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	f000 fe37 	bl	80066d0 <_fflush_r>
 8005a62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a64:	b141      	cbz	r1, 8005a78 <setvbuf+0x60>
 8005a66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a6a:	4299      	cmp	r1, r3
 8005a6c:	d002      	beq.n	8005a74 <setvbuf+0x5c>
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f000 f9da 	bl	8005e28 <_free_r>
 8005a74:	2300      	movs	r3, #0
 8005a76:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61a3      	str	r3, [r4, #24]
 8005a7c:	6063      	str	r3, [r4, #4]
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	061b      	lsls	r3, r3, #24
 8005a82:	d503      	bpl.n	8005a8c <setvbuf+0x74>
 8005a84:	6921      	ldr	r1, [r4, #16]
 8005a86:	4638      	mov	r0, r7
 8005a88:	f000 f9ce 	bl	8005e28 <_free_r>
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	f1b8 0f02 	cmp.w	r8, #2
 8005a9a:	81a3      	strh	r3, [r4, #12]
 8005a9c:	d061      	beq.n	8005b62 <setvbuf+0x14a>
 8005a9e:	ab01      	add	r3, sp, #4
 8005aa0:	466a      	mov	r2, sp
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f000 fe3b 	bl	8006720 <__swhatbuf_r>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	4318      	orrs	r0, r3
 8005aae:	81a0      	strh	r0, [r4, #12]
 8005ab0:	bb2d      	cbnz	r5, 8005afe <setvbuf+0xe6>
 8005ab2:	9d00      	ldr	r5, [sp, #0]
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 fa01 	bl	8005ebc <malloc>
 8005aba:	4606      	mov	r6, r0
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d152      	bne.n	8005b66 <setvbuf+0x14e>
 8005ac0:	f8dd 9000 	ldr.w	r9, [sp]
 8005ac4:	45a9      	cmp	r9, r5
 8005ac6:	d140      	bne.n	8005b4a <setvbuf+0x132>
 8005ac8:	f04f 35ff 	mov.w	r5, #4294967295
 8005acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad0:	f043 0202 	orr.w	r2, r3, #2
 8005ad4:	81a2      	strh	r2, [r4, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	60a2      	str	r2, [r4, #8]
 8005ada:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	6122      	str	r2, [r4, #16]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	6162      	str	r2, [r4, #20]
 8005ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ae8:	07d6      	lsls	r6, r2, #31
 8005aea:	d404      	bmi.n	8005af6 <setvbuf+0xde>
 8005aec:	0598      	lsls	r0, r3, #22
 8005aee:	d402      	bmi.n	8005af6 <setvbuf+0xde>
 8005af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005af2:	f000 f997 	bl	8005e24 <__retarget_lock_release_recursive>
 8005af6:	4628      	mov	r0, r5
 8005af8:	b003      	add	sp, #12
 8005afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005afe:	2e00      	cmp	r6, #0
 8005b00:	d0d8      	beq.n	8005ab4 <setvbuf+0x9c>
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	b913      	cbnz	r3, 8005b0c <setvbuf+0xf4>
 8005b06:	4638      	mov	r0, r7
 8005b08:	f7ff fed8 	bl	80058bc <__sinit>
 8005b0c:	f1b8 0f01 	cmp.w	r8, #1
 8005b10:	bf08      	it	eq
 8005b12:	89a3      	ldrheq	r3, [r4, #12]
 8005b14:	6026      	str	r6, [r4, #0]
 8005b16:	bf04      	itt	eq
 8005b18:	f043 0301 	orreq.w	r3, r3, #1
 8005b1c:	81a3      	strheq	r3, [r4, #12]
 8005b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b22:	f013 0208 	ands.w	r2, r3, #8
 8005b26:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005b2a:	d01e      	beq.n	8005b6a <setvbuf+0x152>
 8005b2c:	07d9      	lsls	r1, r3, #31
 8005b2e:	bf41      	itttt	mi
 8005b30:	2200      	movmi	r2, #0
 8005b32:	426d      	negmi	r5, r5
 8005b34:	60a2      	strmi	r2, [r4, #8]
 8005b36:	61a5      	strmi	r5, [r4, #24]
 8005b38:	bf58      	it	pl
 8005b3a:	60a5      	strpl	r5, [r4, #8]
 8005b3c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b3e:	07d2      	lsls	r2, r2, #31
 8005b40:	d401      	bmi.n	8005b46 <setvbuf+0x12e>
 8005b42:	059b      	lsls	r3, r3, #22
 8005b44:	d513      	bpl.n	8005b6e <setvbuf+0x156>
 8005b46:	2500      	movs	r5, #0
 8005b48:	e7d5      	b.n	8005af6 <setvbuf+0xde>
 8005b4a:	4648      	mov	r0, r9
 8005b4c:	f000 f9b6 	bl	8005ebc <malloc>
 8005b50:	4606      	mov	r6, r0
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d0b8      	beq.n	8005ac8 <setvbuf+0xb0>
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b5c:	81a3      	strh	r3, [r4, #12]
 8005b5e:	464d      	mov	r5, r9
 8005b60:	e7cf      	b.n	8005b02 <setvbuf+0xea>
 8005b62:	2500      	movs	r5, #0
 8005b64:	e7b2      	b.n	8005acc <setvbuf+0xb4>
 8005b66:	46a9      	mov	r9, r5
 8005b68:	e7f5      	b.n	8005b56 <setvbuf+0x13e>
 8005b6a:	60a2      	str	r2, [r4, #8]
 8005b6c:	e7e6      	b.n	8005b3c <setvbuf+0x124>
 8005b6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b70:	f000 f958 	bl	8005e24 <__retarget_lock_release_recursive>
 8005b74:	e7e7      	b.n	8005b46 <setvbuf+0x12e>
 8005b76:	f04f 35ff 	mov.w	r5, #4294967295
 8005b7a:	e7bc      	b.n	8005af6 <setvbuf+0xde>
 8005b7c:	20000024 	.word	0x20000024

08005b80 <__sread>:
 8005b80:	b510      	push	{r4, lr}
 8005b82:	460c      	mov	r4, r1
 8005b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b88:	f000 f8fc 	bl	8005d84 <_read_r>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	bfab      	itete	ge
 8005b90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b92:	89a3      	ldrhlt	r3, [r4, #12]
 8005b94:	181b      	addge	r3, r3, r0
 8005b96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b9a:	bfac      	ite	ge
 8005b9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b9e:	81a3      	strhlt	r3, [r4, #12]
 8005ba0:	bd10      	pop	{r4, pc}

08005ba2 <__swrite>:
 8005ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba6:	461f      	mov	r7, r3
 8005ba8:	898b      	ldrh	r3, [r1, #12]
 8005baa:	05db      	lsls	r3, r3, #23
 8005bac:	4605      	mov	r5, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	d505      	bpl.n	8005bc0 <__swrite+0x1e>
 8005bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb8:	2302      	movs	r3, #2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f000 f8d0 	bl	8005d60 <_lseek_r>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	4632      	mov	r2, r6
 8005bce:	463b      	mov	r3, r7
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	f000 b8e7 	b.w	8005da8 <_write_r>

08005bda <__sseek>:
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	460c      	mov	r4, r1
 8005bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be2:	f000 f8bd 	bl	8005d60 <_lseek_r>
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	bf15      	itete	ne
 8005bec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bf6:	81a3      	strheq	r3, [r4, #12]
 8005bf8:	bf18      	it	ne
 8005bfa:	81a3      	strhne	r3, [r4, #12]
 8005bfc:	bd10      	pop	{r4, pc}

08005bfe <__sclose>:
 8005bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c02:	f000 b89d 	b.w	8005d40 <_close_r>

08005c06 <__swbuf_r>:
 8005c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c08:	460e      	mov	r6, r1
 8005c0a:	4614      	mov	r4, r2
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	b118      	cbz	r0, 8005c18 <__swbuf_r+0x12>
 8005c10:	6a03      	ldr	r3, [r0, #32]
 8005c12:	b90b      	cbnz	r3, 8005c18 <__swbuf_r+0x12>
 8005c14:	f7ff fe52 	bl	80058bc <__sinit>
 8005c18:	69a3      	ldr	r3, [r4, #24]
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	071a      	lsls	r2, r3, #28
 8005c20:	d501      	bpl.n	8005c26 <__swbuf_r+0x20>
 8005c22:	6923      	ldr	r3, [r4, #16]
 8005c24:	b943      	cbnz	r3, 8005c38 <__swbuf_r+0x32>
 8005c26:	4621      	mov	r1, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 f82b 	bl	8005c84 <__swsetup_r>
 8005c2e:	b118      	cbz	r0, 8005c38 <__swbuf_r+0x32>
 8005c30:	f04f 37ff 	mov.w	r7, #4294967295
 8005c34:	4638      	mov	r0, r7
 8005c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	6922      	ldr	r2, [r4, #16]
 8005c3c:	1a98      	subs	r0, r3, r2
 8005c3e:	6963      	ldr	r3, [r4, #20]
 8005c40:	b2f6      	uxtb	r6, r6
 8005c42:	4283      	cmp	r3, r0
 8005c44:	4637      	mov	r7, r6
 8005c46:	dc05      	bgt.n	8005c54 <__swbuf_r+0x4e>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 fd40 	bl	80066d0 <_fflush_r>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d1ed      	bne.n	8005c30 <__swbuf_r+0x2a>
 8005c54:	68a3      	ldr	r3, [r4, #8]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	60a3      	str	r3, [r4, #8]
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	6022      	str	r2, [r4, #0]
 8005c60:	701e      	strb	r6, [r3, #0]
 8005c62:	6962      	ldr	r2, [r4, #20]
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d004      	beq.n	8005c74 <__swbuf_r+0x6e>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	07db      	lsls	r3, r3, #31
 8005c6e:	d5e1      	bpl.n	8005c34 <__swbuf_r+0x2e>
 8005c70:	2e0a      	cmp	r6, #10
 8005c72:	d1df      	bne.n	8005c34 <__swbuf_r+0x2e>
 8005c74:	4621      	mov	r1, r4
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 fd2a 	bl	80066d0 <_fflush_r>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d0d9      	beq.n	8005c34 <__swbuf_r+0x2e>
 8005c80:	e7d6      	b.n	8005c30 <__swbuf_r+0x2a>
	...

08005c84 <__swsetup_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4b29      	ldr	r3, [pc, #164]	@ (8005d2c <__swsetup_r+0xa8>)
 8005c88:	4605      	mov	r5, r0
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	b118      	cbz	r0, 8005c98 <__swsetup_r+0x14>
 8005c90:	6a03      	ldr	r3, [r0, #32]
 8005c92:	b90b      	cbnz	r3, 8005c98 <__swsetup_r+0x14>
 8005c94:	f7ff fe12 	bl	80058bc <__sinit>
 8005c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c9c:	0719      	lsls	r1, r3, #28
 8005c9e:	d422      	bmi.n	8005ce6 <__swsetup_r+0x62>
 8005ca0:	06da      	lsls	r2, r3, #27
 8005ca2:	d407      	bmi.n	8005cb4 <__swsetup_r+0x30>
 8005ca4:	2209      	movs	r2, #9
 8005ca6:	602a      	str	r2, [r5, #0]
 8005ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cac:	81a3      	strh	r3, [r4, #12]
 8005cae:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb2:	e033      	b.n	8005d1c <__swsetup_r+0x98>
 8005cb4:	0758      	lsls	r0, r3, #29
 8005cb6:	d512      	bpl.n	8005cde <__swsetup_r+0x5a>
 8005cb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cba:	b141      	cbz	r1, 8005cce <__swsetup_r+0x4a>
 8005cbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cc0:	4299      	cmp	r1, r3
 8005cc2:	d002      	beq.n	8005cca <__swsetup_r+0x46>
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 f8af 	bl	8005e28 <_free_r>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6063      	str	r3, [r4, #4]
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	f043 0308 	orr.w	r3, r3, #8
 8005ce4:	81a3      	strh	r3, [r4, #12]
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	b94b      	cbnz	r3, 8005cfe <__swsetup_r+0x7a>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cf4:	d003      	beq.n	8005cfe <__swsetup_r+0x7a>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 fd37 	bl	800676c <__smakebuf_r>
 8005cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d02:	f013 0201 	ands.w	r2, r3, #1
 8005d06:	d00a      	beq.n	8005d1e <__swsetup_r+0x9a>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	60a2      	str	r2, [r4, #8]
 8005d0c:	6962      	ldr	r2, [r4, #20]
 8005d0e:	4252      	negs	r2, r2
 8005d10:	61a2      	str	r2, [r4, #24]
 8005d12:	6922      	ldr	r2, [r4, #16]
 8005d14:	b942      	cbnz	r2, 8005d28 <__swsetup_r+0xa4>
 8005d16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d1a:	d1c5      	bne.n	8005ca8 <__swsetup_r+0x24>
 8005d1c:	bd38      	pop	{r3, r4, r5, pc}
 8005d1e:	0799      	lsls	r1, r3, #30
 8005d20:	bf58      	it	pl
 8005d22:	6962      	ldrpl	r2, [r4, #20]
 8005d24:	60a2      	str	r2, [r4, #8]
 8005d26:	e7f4      	b.n	8005d12 <__swsetup_r+0x8e>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	e7f7      	b.n	8005d1c <__swsetup_r+0x98>
 8005d2c:	20000024 	.word	0x20000024

08005d30 <memset>:
 8005d30:	4402      	add	r2, r0
 8005d32:	4603      	mov	r3, r0
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d100      	bne.n	8005d3a <memset+0xa>
 8005d38:	4770      	bx	lr
 8005d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3e:	e7f9      	b.n	8005d34 <memset+0x4>

08005d40 <_close_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4d06      	ldr	r5, [pc, #24]	@ (8005d5c <_close_r+0x1c>)
 8005d44:	2300      	movs	r3, #0
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	f7fb faaf 	bl	80012ae <_close>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_close_r+0x1a>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_close_r+0x1a>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	2000047c 	.word	0x2000047c

08005d60 <_lseek_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4d07      	ldr	r5, [pc, #28]	@ (8005d80 <_lseek_r+0x20>)
 8005d64:	4604      	mov	r4, r0
 8005d66:	4608      	mov	r0, r1
 8005d68:	4611      	mov	r1, r2
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	602a      	str	r2, [r5, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f7fb fac4 	bl	80012fc <_lseek>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_lseek_r+0x1e>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_lseek_r+0x1e>
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	2000047c 	.word	0x2000047c

08005d84 <_read_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4d07      	ldr	r5, [pc, #28]	@ (8005da4 <_read_r+0x20>)
 8005d88:	4604      	mov	r4, r0
 8005d8a:	4608      	mov	r0, r1
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	2200      	movs	r2, #0
 8005d90:	602a      	str	r2, [r5, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	f7fb fa6e 	bl	8001274 <_read>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d102      	bne.n	8005da2 <_read_r+0x1e>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	b103      	cbz	r3, 8005da2 <_read_r+0x1e>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	2000047c 	.word	0x2000047c

08005da8 <_write_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4d07      	ldr	r5, [pc, #28]	@ (8005dc8 <_write_r+0x20>)
 8005dac:	4604      	mov	r4, r0
 8005dae:	4608      	mov	r0, r1
 8005db0:	4611      	mov	r1, r2
 8005db2:	2200      	movs	r2, #0
 8005db4:	602a      	str	r2, [r5, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	f7fa fc58 	bl	800066c <_write>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_write_r+0x1e>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_write_r+0x1e>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	2000047c 	.word	0x2000047c

08005dcc <__errno>:
 8005dcc:	4b01      	ldr	r3, [pc, #4]	@ (8005dd4 <__errno+0x8>)
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000024 	.word	0x20000024

08005dd8 <__libc_init_array>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	4d0d      	ldr	r5, [pc, #52]	@ (8005e10 <__libc_init_array+0x38>)
 8005ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8005e14 <__libc_init_array+0x3c>)
 8005dde:	1b64      	subs	r4, r4, r5
 8005de0:	10a4      	asrs	r4, r4, #2
 8005de2:	2600      	movs	r6, #0
 8005de4:	42a6      	cmp	r6, r4
 8005de6:	d109      	bne.n	8005dfc <__libc_init_array+0x24>
 8005de8:	4d0b      	ldr	r5, [pc, #44]	@ (8005e18 <__libc_init_array+0x40>)
 8005dea:	4c0c      	ldr	r4, [pc, #48]	@ (8005e1c <__libc_init_array+0x44>)
 8005dec:	f000 fd2c 	bl	8006848 <_init>
 8005df0:	1b64      	subs	r4, r4, r5
 8005df2:	10a4      	asrs	r4, r4, #2
 8005df4:	2600      	movs	r6, #0
 8005df6:	42a6      	cmp	r6, r4
 8005df8:	d105      	bne.n	8005e06 <__libc_init_array+0x2e>
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e00:	4798      	blx	r3
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7ee      	b.n	8005de4 <__libc_init_array+0xc>
 8005e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0a:	4798      	blx	r3
 8005e0c:	3601      	adds	r6, #1
 8005e0e:	e7f2      	b.n	8005df6 <__libc_init_array+0x1e>
 8005e10:	0800693c 	.word	0x0800693c
 8005e14:	0800693c 	.word	0x0800693c
 8005e18:	0800693c 	.word	0x0800693c
 8005e1c:	08006940 	.word	0x08006940

08005e20 <__retarget_lock_init_recursive>:
 8005e20:	4770      	bx	lr

08005e22 <__retarget_lock_acquire_recursive>:
 8005e22:	4770      	bx	lr

08005e24 <__retarget_lock_release_recursive>:
 8005e24:	4770      	bx	lr
	...

08005e28 <_free_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	d041      	beq.n	8005eb4 <_free_r+0x8c>
 8005e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e34:	1f0c      	subs	r4, r1, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bfb8      	it	lt
 8005e3a:	18e4      	addlt	r4, r4, r3
 8005e3c:	f000 f8e8 	bl	8006010 <__malloc_lock>
 8005e40:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb8 <_free_r+0x90>)
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	b933      	cbnz	r3, 8005e54 <_free_r+0x2c>
 8005e46:	6063      	str	r3, [r4, #4]
 8005e48:	6014      	str	r4, [r2, #0]
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e50:	f000 b8e4 	b.w	800601c <__malloc_unlock>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d908      	bls.n	8005e6a <_free_r+0x42>
 8005e58:	6820      	ldr	r0, [r4, #0]
 8005e5a:	1821      	adds	r1, r4, r0
 8005e5c:	428b      	cmp	r3, r1
 8005e5e:	bf01      	itttt	eq
 8005e60:	6819      	ldreq	r1, [r3, #0]
 8005e62:	685b      	ldreq	r3, [r3, #4]
 8005e64:	1809      	addeq	r1, r1, r0
 8005e66:	6021      	streq	r1, [r4, #0]
 8005e68:	e7ed      	b.n	8005e46 <_free_r+0x1e>
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	b10b      	cbz	r3, 8005e74 <_free_r+0x4c>
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d9fa      	bls.n	8005e6a <_free_r+0x42>
 8005e74:	6811      	ldr	r1, [r2, #0]
 8005e76:	1850      	adds	r0, r2, r1
 8005e78:	42a0      	cmp	r0, r4
 8005e7a:	d10b      	bne.n	8005e94 <_free_r+0x6c>
 8005e7c:	6820      	ldr	r0, [r4, #0]
 8005e7e:	4401      	add	r1, r0
 8005e80:	1850      	adds	r0, r2, r1
 8005e82:	4283      	cmp	r3, r0
 8005e84:	6011      	str	r1, [r2, #0]
 8005e86:	d1e0      	bne.n	8005e4a <_free_r+0x22>
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	6053      	str	r3, [r2, #4]
 8005e8e:	4408      	add	r0, r1
 8005e90:	6010      	str	r0, [r2, #0]
 8005e92:	e7da      	b.n	8005e4a <_free_r+0x22>
 8005e94:	d902      	bls.n	8005e9c <_free_r+0x74>
 8005e96:	230c      	movs	r3, #12
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	e7d6      	b.n	8005e4a <_free_r+0x22>
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	1821      	adds	r1, r4, r0
 8005ea0:	428b      	cmp	r3, r1
 8005ea2:	bf04      	itt	eq
 8005ea4:	6819      	ldreq	r1, [r3, #0]
 8005ea6:	685b      	ldreq	r3, [r3, #4]
 8005ea8:	6063      	str	r3, [r4, #4]
 8005eaa:	bf04      	itt	eq
 8005eac:	1809      	addeq	r1, r1, r0
 8005eae:	6021      	streq	r1, [r4, #0]
 8005eb0:	6054      	str	r4, [r2, #4]
 8005eb2:	e7ca      	b.n	8005e4a <_free_r+0x22>
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000488 	.word	0x20000488

08005ebc <malloc>:
 8005ebc:	4b02      	ldr	r3, [pc, #8]	@ (8005ec8 <malloc+0xc>)
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	f000 b825 	b.w	8005f10 <_malloc_r>
 8005ec6:	bf00      	nop
 8005ec8:	20000024 	.word	0x20000024

08005ecc <sbrk_aligned>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4e0f      	ldr	r6, [pc, #60]	@ (8005f0c <sbrk_aligned+0x40>)
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	6831      	ldr	r1, [r6, #0]
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	b911      	cbnz	r1, 8005ede <sbrk_aligned+0x12>
 8005ed8:	f000 fca6 	bl	8006828 <_sbrk_r>
 8005edc:	6030      	str	r0, [r6, #0]
 8005ede:	4621      	mov	r1, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 fca1 	bl	8006828 <_sbrk_r>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d103      	bne.n	8005ef2 <sbrk_aligned+0x26>
 8005eea:	f04f 34ff 	mov.w	r4, #4294967295
 8005eee:	4620      	mov	r0, r4
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
 8005ef2:	1cc4      	adds	r4, r0, #3
 8005ef4:	f024 0403 	bic.w	r4, r4, #3
 8005ef8:	42a0      	cmp	r0, r4
 8005efa:	d0f8      	beq.n	8005eee <sbrk_aligned+0x22>
 8005efc:	1a21      	subs	r1, r4, r0
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 fc92 	bl	8006828 <_sbrk_r>
 8005f04:	3001      	adds	r0, #1
 8005f06:	d1f2      	bne.n	8005eee <sbrk_aligned+0x22>
 8005f08:	e7ef      	b.n	8005eea <sbrk_aligned+0x1e>
 8005f0a:	bf00      	nop
 8005f0c:	20000484 	.word	0x20000484

08005f10 <_malloc_r>:
 8005f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f14:	1ccd      	adds	r5, r1, #3
 8005f16:	f025 0503 	bic.w	r5, r5, #3
 8005f1a:	3508      	adds	r5, #8
 8005f1c:	2d0c      	cmp	r5, #12
 8005f1e:	bf38      	it	cc
 8005f20:	250c      	movcc	r5, #12
 8005f22:	2d00      	cmp	r5, #0
 8005f24:	4606      	mov	r6, r0
 8005f26:	db01      	blt.n	8005f2c <_malloc_r+0x1c>
 8005f28:	42a9      	cmp	r1, r5
 8005f2a:	d904      	bls.n	8005f36 <_malloc_r+0x26>
 8005f2c:	230c      	movs	r3, #12
 8005f2e:	6033      	str	r3, [r6, #0]
 8005f30:	2000      	movs	r0, #0
 8005f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800600c <_malloc_r+0xfc>
 8005f3a:	f000 f869 	bl	8006010 <__malloc_lock>
 8005f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f42:	461c      	mov	r4, r3
 8005f44:	bb44      	cbnz	r4, 8005f98 <_malloc_r+0x88>
 8005f46:	4629      	mov	r1, r5
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff ffbf 	bl	8005ecc <sbrk_aligned>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	4604      	mov	r4, r0
 8005f52:	d158      	bne.n	8006006 <_malloc_r+0xf6>
 8005f54:	f8d8 4000 	ldr.w	r4, [r8]
 8005f58:	4627      	mov	r7, r4
 8005f5a:	2f00      	cmp	r7, #0
 8005f5c:	d143      	bne.n	8005fe6 <_malloc_r+0xd6>
 8005f5e:	2c00      	cmp	r4, #0
 8005f60:	d04b      	beq.n	8005ffa <_malloc_r+0xea>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	4639      	mov	r1, r7
 8005f66:	4630      	mov	r0, r6
 8005f68:	eb04 0903 	add.w	r9, r4, r3
 8005f6c:	f000 fc5c 	bl	8006828 <_sbrk_r>
 8005f70:	4581      	cmp	r9, r0
 8005f72:	d142      	bne.n	8005ffa <_malloc_r+0xea>
 8005f74:	6821      	ldr	r1, [r4, #0]
 8005f76:	1a6d      	subs	r5, r5, r1
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f7ff ffa6 	bl	8005ecc <sbrk_aligned>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d03a      	beq.n	8005ffa <_malloc_r+0xea>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	442b      	add	r3, r5
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	bb62      	cbnz	r2, 8005fec <_malloc_r+0xdc>
 8005f92:	f8c8 7000 	str.w	r7, [r8]
 8005f96:	e00f      	b.n	8005fb8 <_malloc_r+0xa8>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	1b52      	subs	r2, r2, r5
 8005f9c:	d420      	bmi.n	8005fe0 <_malloc_r+0xd0>
 8005f9e:	2a0b      	cmp	r2, #11
 8005fa0:	d917      	bls.n	8005fd2 <_malloc_r+0xc2>
 8005fa2:	1961      	adds	r1, r4, r5
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	6025      	str	r5, [r4, #0]
 8005fa8:	bf18      	it	ne
 8005faa:	6059      	strne	r1, [r3, #4]
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	bf08      	it	eq
 8005fb0:	f8c8 1000 	streq.w	r1, [r8]
 8005fb4:	5162      	str	r2, [r4, r5]
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f82f 	bl	800601c <__malloc_unlock>
 8005fbe:	f104 000b 	add.w	r0, r4, #11
 8005fc2:	1d23      	adds	r3, r4, #4
 8005fc4:	f020 0007 	bic.w	r0, r0, #7
 8005fc8:	1ac2      	subs	r2, r0, r3
 8005fca:	bf1c      	itt	ne
 8005fcc:	1a1b      	subne	r3, r3, r0
 8005fce:	50a3      	strne	r3, [r4, r2]
 8005fd0:	e7af      	b.n	8005f32 <_malloc_r+0x22>
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	bf0c      	ite	eq
 8005fd8:	f8c8 2000 	streq.w	r2, [r8]
 8005fdc:	605a      	strne	r2, [r3, #4]
 8005fde:	e7eb      	b.n	8005fb8 <_malloc_r+0xa8>
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	6864      	ldr	r4, [r4, #4]
 8005fe4:	e7ae      	b.n	8005f44 <_malloc_r+0x34>
 8005fe6:	463c      	mov	r4, r7
 8005fe8:	687f      	ldr	r7, [r7, #4]
 8005fea:	e7b6      	b.n	8005f5a <_malloc_r+0x4a>
 8005fec:	461a      	mov	r2, r3
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d1fb      	bne.n	8005fec <_malloc_r+0xdc>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	6053      	str	r3, [r2, #4]
 8005ff8:	e7de      	b.n	8005fb8 <_malloc_r+0xa8>
 8005ffa:	230c      	movs	r3, #12
 8005ffc:	6033      	str	r3, [r6, #0]
 8005ffe:	4630      	mov	r0, r6
 8006000:	f000 f80c 	bl	800601c <__malloc_unlock>
 8006004:	e794      	b.n	8005f30 <_malloc_r+0x20>
 8006006:	6005      	str	r5, [r0, #0]
 8006008:	e7d6      	b.n	8005fb8 <_malloc_r+0xa8>
 800600a:	bf00      	nop
 800600c:	20000488 	.word	0x20000488

08006010 <__malloc_lock>:
 8006010:	4801      	ldr	r0, [pc, #4]	@ (8006018 <__malloc_lock+0x8>)
 8006012:	f7ff bf06 	b.w	8005e22 <__retarget_lock_acquire_recursive>
 8006016:	bf00      	nop
 8006018:	20000480 	.word	0x20000480

0800601c <__malloc_unlock>:
 800601c:	4801      	ldr	r0, [pc, #4]	@ (8006024 <__malloc_unlock+0x8>)
 800601e:	f7ff bf01 	b.w	8005e24 <__retarget_lock_release_recursive>
 8006022:	bf00      	nop
 8006024:	20000480 	.word	0x20000480

08006028 <__sfputc_r>:
 8006028:	6893      	ldr	r3, [r2, #8]
 800602a:	3b01      	subs	r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	b410      	push	{r4}
 8006030:	6093      	str	r3, [r2, #8]
 8006032:	da08      	bge.n	8006046 <__sfputc_r+0x1e>
 8006034:	6994      	ldr	r4, [r2, #24]
 8006036:	42a3      	cmp	r3, r4
 8006038:	db01      	blt.n	800603e <__sfputc_r+0x16>
 800603a:	290a      	cmp	r1, #10
 800603c:	d103      	bne.n	8006046 <__sfputc_r+0x1e>
 800603e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006042:	f7ff bde0 	b.w	8005c06 <__swbuf_r>
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	1c58      	adds	r0, r3, #1
 800604a:	6010      	str	r0, [r2, #0]
 800604c:	7019      	strb	r1, [r3, #0]
 800604e:	4608      	mov	r0, r1
 8006050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006054:	4770      	bx	lr

08006056 <__sfputs_r>:
 8006056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006058:	4606      	mov	r6, r0
 800605a:	460f      	mov	r7, r1
 800605c:	4614      	mov	r4, r2
 800605e:	18d5      	adds	r5, r2, r3
 8006060:	42ac      	cmp	r4, r5
 8006062:	d101      	bne.n	8006068 <__sfputs_r+0x12>
 8006064:	2000      	movs	r0, #0
 8006066:	e007      	b.n	8006078 <__sfputs_r+0x22>
 8006068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606c:	463a      	mov	r2, r7
 800606e:	4630      	mov	r0, r6
 8006070:	f7ff ffda 	bl	8006028 <__sfputc_r>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d1f3      	bne.n	8006060 <__sfputs_r+0xa>
 8006078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800607c <_vfiprintf_r>:
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	460d      	mov	r5, r1
 8006082:	b09d      	sub	sp, #116	@ 0x74
 8006084:	4614      	mov	r4, r2
 8006086:	4698      	mov	r8, r3
 8006088:	4606      	mov	r6, r0
 800608a:	b118      	cbz	r0, 8006094 <_vfiprintf_r+0x18>
 800608c:	6a03      	ldr	r3, [r0, #32]
 800608e:	b90b      	cbnz	r3, 8006094 <_vfiprintf_r+0x18>
 8006090:	f7ff fc14 	bl	80058bc <__sinit>
 8006094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006096:	07d9      	lsls	r1, r3, #31
 8006098:	d405      	bmi.n	80060a6 <_vfiprintf_r+0x2a>
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	059a      	lsls	r2, r3, #22
 800609e:	d402      	bmi.n	80060a6 <_vfiprintf_r+0x2a>
 80060a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060a2:	f7ff febe 	bl	8005e22 <__retarget_lock_acquire_recursive>
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	071b      	lsls	r3, r3, #28
 80060aa:	d501      	bpl.n	80060b0 <_vfiprintf_r+0x34>
 80060ac:	692b      	ldr	r3, [r5, #16]
 80060ae:	b99b      	cbnz	r3, 80060d8 <_vfiprintf_r+0x5c>
 80060b0:	4629      	mov	r1, r5
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7ff fde6 	bl	8005c84 <__swsetup_r>
 80060b8:	b170      	cbz	r0, 80060d8 <_vfiprintf_r+0x5c>
 80060ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060bc:	07dc      	lsls	r4, r3, #31
 80060be:	d504      	bpl.n	80060ca <_vfiprintf_r+0x4e>
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295
 80060c4:	b01d      	add	sp, #116	@ 0x74
 80060c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ca:	89ab      	ldrh	r3, [r5, #12]
 80060cc:	0598      	lsls	r0, r3, #22
 80060ce:	d4f7      	bmi.n	80060c0 <_vfiprintf_r+0x44>
 80060d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060d2:	f7ff fea7 	bl	8005e24 <__retarget_lock_release_recursive>
 80060d6:	e7f3      	b.n	80060c0 <_vfiprintf_r+0x44>
 80060d8:	2300      	movs	r3, #0
 80060da:	9309      	str	r3, [sp, #36]	@ 0x24
 80060dc:	2320      	movs	r3, #32
 80060de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80060e6:	2330      	movs	r3, #48	@ 0x30
 80060e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006298 <_vfiprintf_r+0x21c>
 80060ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060f0:	f04f 0901 	mov.w	r9, #1
 80060f4:	4623      	mov	r3, r4
 80060f6:	469a      	mov	sl, r3
 80060f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060fc:	b10a      	cbz	r2, 8006102 <_vfiprintf_r+0x86>
 80060fe:	2a25      	cmp	r2, #37	@ 0x25
 8006100:	d1f9      	bne.n	80060f6 <_vfiprintf_r+0x7a>
 8006102:	ebba 0b04 	subs.w	fp, sl, r4
 8006106:	d00b      	beq.n	8006120 <_vfiprintf_r+0xa4>
 8006108:	465b      	mov	r3, fp
 800610a:	4622      	mov	r2, r4
 800610c:	4629      	mov	r1, r5
 800610e:	4630      	mov	r0, r6
 8006110:	f7ff ffa1 	bl	8006056 <__sfputs_r>
 8006114:	3001      	adds	r0, #1
 8006116:	f000 80a7 	beq.w	8006268 <_vfiprintf_r+0x1ec>
 800611a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800611c:	445a      	add	r2, fp
 800611e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006120:	f89a 3000 	ldrb.w	r3, [sl]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 809f 	beq.w	8006268 <_vfiprintf_r+0x1ec>
 800612a:	2300      	movs	r3, #0
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006134:	f10a 0a01 	add.w	sl, sl, #1
 8006138:	9304      	str	r3, [sp, #16]
 800613a:	9307      	str	r3, [sp, #28]
 800613c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006140:	931a      	str	r3, [sp, #104]	@ 0x68
 8006142:	4654      	mov	r4, sl
 8006144:	2205      	movs	r2, #5
 8006146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614a:	4853      	ldr	r0, [pc, #332]	@ (8006298 <_vfiprintf_r+0x21c>)
 800614c:	f7fa f868 	bl	8000220 <memchr>
 8006150:	9a04      	ldr	r2, [sp, #16]
 8006152:	b9d8      	cbnz	r0, 800618c <_vfiprintf_r+0x110>
 8006154:	06d1      	lsls	r1, r2, #27
 8006156:	bf44      	itt	mi
 8006158:	2320      	movmi	r3, #32
 800615a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800615e:	0713      	lsls	r3, r2, #28
 8006160:	bf44      	itt	mi
 8006162:	232b      	movmi	r3, #43	@ 0x2b
 8006164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006168:	f89a 3000 	ldrb.w	r3, [sl]
 800616c:	2b2a      	cmp	r3, #42	@ 0x2a
 800616e:	d015      	beq.n	800619c <_vfiprintf_r+0x120>
 8006170:	9a07      	ldr	r2, [sp, #28]
 8006172:	4654      	mov	r4, sl
 8006174:	2000      	movs	r0, #0
 8006176:	f04f 0c0a 	mov.w	ip, #10
 800617a:	4621      	mov	r1, r4
 800617c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006180:	3b30      	subs	r3, #48	@ 0x30
 8006182:	2b09      	cmp	r3, #9
 8006184:	d94b      	bls.n	800621e <_vfiprintf_r+0x1a2>
 8006186:	b1b0      	cbz	r0, 80061b6 <_vfiprintf_r+0x13a>
 8006188:	9207      	str	r2, [sp, #28]
 800618a:	e014      	b.n	80061b6 <_vfiprintf_r+0x13a>
 800618c:	eba0 0308 	sub.w	r3, r0, r8
 8006190:	fa09 f303 	lsl.w	r3, r9, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	46a2      	mov	sl, r4
 800619a:	e7d2      	b.n	8006142 <_vfiprintf_r+0xc6>
 800619c:	9b03      	ldr	r3, [sp, #12]
 800619e:	1d19      	adds	r1, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	9103      	str	r1, [sp, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfbb      	ittet	lt
 80061a8:	425b      	neglt	r3, r3
 80061aa:	f042 0202 	orrlt.w	r2, r2, #2
 80061ae:	9307      	strge	r3, [sp, #28]
 80061b0:	9307      	strlt	r3, [sp, #28]
 80061b2:	bfb8      	it	lt
 80061b4:	9204      	strlt	r2, [sp, #16]
 80061b6:	7823      	ldrb	r3, [r4, #0]
 80061b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ba:	d10a      	bne.n	80061d2 <_vfiprintf_r+0x156>
 80061bc:	7863      	ldrb	r3, [r4, #1]
 80061be:	2b2a      	cmp	r3, #42	@ 0x2a
 80061c0:	d132      	bne.n	8006228 <_vfiprintf_r+0x1ac>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	1d1a      	adds	r2, r3, #4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	9203      	str	r2, [sp, #12]
 80061ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061ce:	3402      	adds	r4, #2
 80061d0:	9305      	str	r3, [sp, #20]
 80061d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062a8 <_vfiprintf_r+0x22c>
 80061d6:	7821      	ldrb	r1, [r4, #0]
 80061d8:	2203      	movs	r2, #3
 80061da:	4650      	mov	r0, sl
 80061dc:	f7fa f820 	bl	8000220 <memchr>
 80061e0:	b138      	cbz	r0, 80061f2 <_vfiprintf_r+0x176>
 80061e2:	9b04      	ldr	r3, [sp, #16]
 80061e4:	eba0 000a 	sub.w	r0, r0, sl
 80061e8:	2240      	movs	r2, #64	@ 0x40
 80061ea:	4082      	lsls	r2, r0
 80061ec:	4313      	orrs	r3, r2
 80061ee:	3401      	adds	r4, #1
 80061f0:	9304      	str	r3, [sp, #16]
 80061f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f6:	4829      	ldr	r0, [pc, #164]	@ (800629c <_vfiprintf_r+0x220>)
 80061f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061fc:	2206      	movs	r2, #6
 80061fe:	f7fa f80f 	bl	8000220 <memchr>
 8006202:	2800      	cmp	r0, #0
 8006204:	d03f      	beq.n	8006286 <_vfiprintf_r+0x20a>
 8006206:	4b26      	ldr	r3, [pc, #152]	@ (80062a0 <_vfiprintf_r+0x224>)
 8006208:	bb1b      	cbnz	r3, 8006252 <_vfiprintf_r+0x1d6>
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	3307      	adds	r3, #7
 800620e:	f023 0307 	bic.w	r3, r3, #7
 8006212:	3308      	adds	r3, #8
 8006214:	9303      	str	r3, [sp, #12]
 8006216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006218:	443b      	add	r3, r7
 800621a:	9309      	str	r3, [sp, #36]	@ 0x24
 800621c:	e76a      	b.n	80060f4 <_vfiprintf_r+0x78>
 800621e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006222:	460c      	mov	r4, r1
 8006224:	2001      	movs	r0, #1
 8006226:	e7a8      	b.n	800617a <_vfiprintf_r+0xfe>
 8006228:	2300      	movs	r3, #0
 800622a:	3401      	adds	r4, #1
 800622c:	9305      	str	r3, [sp, #20]
 800622e:	4619      	mov	r1, r3
 8006230:	f04f 0c0a 	mov.w	ip, #10
 8006234:	4620      	mov	r0, r4
 8006236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800623a:	3a30      	subs	r2, #48	@ 0x30
 800623c:	2a09      	cmp	r2, #9
 800623e:	d903      	bls.n	8006248 <_vfiprintf_r+0x1cc>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0c6      	beq.n	80061d2 <_vfiprintf_r+0x156>
 8006244:	9105      	str	r1, [sp, #20]
 8006246:	e7c4      	b.n	80061d2 <_vfiprintf_r+0x156>
 8006248:	fb0c 2101 	mla	r1, ip, r1, r2
 800624c:	4604      	mov	r4, r0
 800624e:	2301      	movs	r3, #1
 8006250:	e7f0      	b.n	8006234 <_vfiprintf_r+0x1b8>
 8006252:	ab03      	add	r3, sp, #12
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	462a      	mov	r2, r5
 8006258:	4b12      	ldr	r3, [pc, #72]	@ (80062a4 <_vfiprintf_r+0x228>)
 800625a:	a904      	add	r1, sp, #16
 800625c:	4630      	mov	r0, r6
 800625e:	f3af 8000 	nop.w
 8006262:	4607      	mov	r7, r0
 8006264:	1c78      	adds	r0, r7, #1
 8006266:	d1d6      	bne.n	8006216 <_vfiprintf_r+0x19a>
 8006268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800626a:	07d9      	lsls	r1, r3, #31
 800626c:	d405      	bmi.n	800627a <_vfiprintf_r+0x1fe>
 800626e:	89ab      	ldrh	r3, [r5, #12]
 8006270:	059a      	lsls	r2, r3, #22
 8006272:	d402      	bmi.n	800627a <_vfiprintf_r+0x1fe>
 8006274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006276:	f7ff fdd5 	bl	8005e24 <__retarget_lock_release_recursive>
 800627a:	89ab      	ldrh	r3, [r5, #12]
 800627c:	065b      	lsls	r3, r3, #25
 800627e:	f53f af1f 	bmi.w	80060c0 <_vfiprintf_r+0x44>
 8006282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006284:	e71e      	b.n	80060c4 <_vfiprintf_r+0x48>
 8006286:	ab03      	add	r3, sp, #12
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	462a      	mov	r2, r5
 800628c:	4b05      	ldr	r3, [pc, #20]	@ (80062a4 <_vfiprintf_r+0x228>)
 800628e:	a904      	add	r1, sp, #16
 8006290:	4630      	mov	r0, r6
 8006292:	f000 f879 	bl	8006388 <_printf_i>
 8006296:	e7e4      	b.n	8006262 <_vfiprintf_r+0x1e6>
 8006298:	08006900 	.word	0x08006900
 800629c:	0800690a 	.word	0x0800690a
 80062a0:	00000000 	.word	0x00000000
 80062a4:	08006057 	.word	0x08006057
 80062a8:	08006906 	.word	0x08006906

080062ac <_printf_common>:
 80062ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b0:	4616      	mov	r6, r2
 80062b2:	4698      	mov	r8, r3
 80062b4:	688a      	ldr	r2, [r1, #8]
 80062b6:	690b      	ldr	r3, [r1, #16]
 80062b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062bc:	4293      	cmp	r3, r2
 80062be:	bfb8      	it	lt
 80062c0:	4613      	movlt	r3, r2
 80062c2:	6033      	str	r3, [r6, #0]
 80062c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062c8:	4607      	mov	r7, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	b10a      	cbz	r2, 80062d2 <_printf_common+0x26>
 80062ce:	3301      	adds	r3, #1
 80062d0:	6033      	str	r3, [r6, #0]
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	0699      	lsls	r1, r3, #26
 80062d6:	bf42      	ittt	mi
 80062d8:	6833      	ldrmi	r3, [r6, #0]
 80062da:	3302      	addmi	r3, #2
 80062dc:	6033      	strmi	r3, [r6, #0]
 80062de:	6825      	ldr	r5, [r4, #0]
 80062e0:	f015 0506 	ands.w	r5, r5, #6
 80062e4:	d106      	bne.n	80062f4 <_printf_common+0x48>
 80062e6:	f104 0a19 	add.w	sl, r4, #25
 80062ea:	68e3      	ldr	r3, [r4, #12]
 80062ec:	6832      	ldr	r2, [r6, #0]
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dc26      	bgt.n	8006342 <_printf_common+0x96>
 80062f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	3b00      	subs	r3, #0
 80062fc:	bf18      	it	ne
 80062fe:	2301      	movne	r3, #1
 8006300:	0692      	lsls	r2, r2, #26
 8006302:	d42b      	bmi.n	800635c <_printf_common+0xb0>
 8006304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006308:	4641      	mov	r1, r8
 800630a:	4638      	mov	r0, r7
 800630c:	47c8      	blx	r9
 800630e:	3001      	adds	r0, #1
 8006310:	d01e      	beq.n	8006350 <_printf_common+0xa4>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	6922      	ldr	r2, [r4, #16]
 8006316:	f003 0306 	and.w	r3, r3, #6
 800631a:	2b04      	cmp	r3, #4
 800631c:	bf02      	ittt	eq
 800631e:	68e5      	ldreq	r5, [r4, #12]
 8006320:	6833      	ldreq	r3, [r6, #0]
 8006322:	1aed      	subeq	r5, r5, r3
 8006324:	68a3      	ldr	r3, [r4, #8]
 8006326:	bf0c      	ite	eq
 8006328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800632c:	2500      	movne	r5, #0
 800632e:	4293      	cmp	r3, r2
 8006330:	bfc4      	itt	gt
 8006332:	1a9b      	subgt	r3, r3, r2
 8006334:	18ed      	addgt	r5, r5, r3
 8006336:	2600      	movs	r6, #0
 8006338:	341a      	adds	r4, #26
 800633a:	42b5      	cmp	r5, r6
 800633c:	d11a      	bne.n	8006374 <_printf_common+0xc8>
 800633e:	2000      	movs	r0, #0
 8006340:	e008      	b.n	8006354 <_printf_common+0xa8>
 8006342:	2301      	movs	r3, #1
 8006344:	4652      	mov	r2, sl
 8006346:	4641      	mov	r1, r8
 8006348:	4638      	mov	r0, r7
 800634a:	47c8      	blx	r9
 800634c:	3001      	adds	r0, #1
 800634e:	d103      	bne.n	8006358 <_printf_common+0xac>
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006358:	3501      	adds	r5, #1
 800635a:	e7c6      	b.n	80062ea <_printf_common+0x3e>
 800635c:	18e1      	adds	r1, r4, r3
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	2030      	movs	r0, #48	@ 0x30
 8006362:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006366:	4422      	add	r2, r4
 8006368:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800636c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006370:	3302      	adds	r3, #2
 8006372:	e7c7      	b.n	8006304 <_printf_common+0x58>
 8006374:	2301      	movs	r3, #1
 8006376:	4622      	mov	r2, r4
 8006378:	4641      	mov	r1, r8
 800637a:	4638      	mov	r0, r7
 800637c:	47c8      	blx	r9
 800637e:	3001      	adds	r0, #1
 8006380:	d0e6      	beq.n	8006350 <_printf_common+0xa4>
 8006382:	3601      	adds	r6, #1
 8006384:	e7d9      	b.n	800633a <_printf_common+0x8e>
	...

08006388 <_printf_i>:
 8006388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	7e0f      	ldrb	r7, [r1, #24]
 800638e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006390:	2f78      	cmp	r7, #120	@ 0x78
 8006392:	4691      	mov	r9, r2
 8006394:	4680      	mov	r8, r0
 8006396:	460c      	mov	r4, r1
 8006398:	469a      	mov	sl, r3
 800639a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800639e:	d807      	bhi.n	80063b0 <_printf_i+0x28>
 80063a0:	2f62      	cmp	r7, #98	@ 0x62
 80063a2:	d80a      	bhi.n	80063ba <_printf_i+0x32>
 80063a4:	2f00      	cmp	r7, #0
 80063a6:	f000 80d2 	beq.w	800654e <_printf_i+0x1c6>
 80063aa:	2f58      	cmp	r7, #88	@ 0x58
 80063ac:	f000 80b9 	beq.w	8006522 <_printf_i+0x19a>
 80063b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063b8:	e03a      	b.n	8006430 <_printf_i+0xa8>
 80063ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063be:	2b15      	cmp	r3, #21
 80063c0:	d8f6      	bhi.n	80063b0 <_printf_i+0x28>
 80063c2:	a101      	add	r1, pc, #4	@ (adr r1, 80063c8 <_printf_i+0x40>)
 80063c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006435 	.word	0x08006435
 80063d0:	080063b1 	.word	0x080063b1
 80063d4:	080063b1 	.word	0x080063b1
 80063d8:	080063b1 	.word	0x080063b1
 80063dc:	080063b1 	.word	0x080063b1
 80063e0:	08006435 	.word	0x08006435
 80063e4:	080063b1 	.word	0x080063b1
 80063e8:	080063b1 	.word	0x080063b1
 80063ec:	080063b1 	.word	0x080063b1
 80063f0:	080063b1 	.word	0x080063b1
 80063f4:	08006535 	.word	0x08006535
 80063f8:	0800645f 	.word	0x0800645f
 80063fc:	080064ef 	.word	0x080064ef
 8006400:	080063b1 	.word	0x080063b1
 8006404:	080063b1 	.word	0x080063b1
 8006408:	08006557 	.word	0x08006557
 800640c:	080063b1 	.word	0x080063b1
 8006410:	0800645f 	.word	0x0800645f
 8006414:	080063b1 	.word	0x080063b1
 8006418:	080063b1 	.word	0x080063b1
 800641c:	080064f7 	.word	0x080064f7
 8006420:	6833      	ldr	r3, [r6, #0]
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6032      	str	r2, [r6, #0]
 8006428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800642c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006430:	2301      	movs	r3, #1
 8006432:	e09d      	b.n	8006570 <_printf_i+0x1e8>
 8006434:	6833      	ldr	r3, [r6, #0]
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	1d19      	adds	r1, r3, #4
 800643a:	6031      	str	r1, [r6, #0]
 800643c:	0606      	lsls	r6, r0, #24
 800643e:	d501      	bpl.n	8006444 <_printf_i+0xbc>
 8006440:	681d      	ldr	r5, [r3, #0]
 8006442:	e003      	b.n	800644c <_printf_i+0xc4>
 8006444:	0645      	lsls	r5, r0, #25
 8006446:	d5fb      	bpl.n	8006440 <_printf_i+0xb8>
 8006448:	f9b3 5000 	ldrsh.w	r5, [r3]
 800644c:	2d00      	cmp	r5, #0
 800644e:	da03      	bge.n	8006458 <_printf_i+0xd0>
 8006450:	232d      	movs	r3, #45	@ 0x2d
 8006452:	426d      	negs	r5, r5
 8006454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006458:	4859      	ldr	r0, [pc, #356]	@ (80065c0 <_printf_i+0x238>)
 800645a:	230a      	movs	r3, #10
 800645c:	e011      	b.n	8006482 <_printf_i+0xfa>
 800645e:	6821      	ldr	r1, [r4, #0]
 8006460:	6833      	ldr	r3, [r6, #0]
 8006462:	0608      	lsls	r0, r1, #24
 8006464:	f853 5b04 	ldr.w	r5, [r3], #4
 8006468:	d402      	bmi.n	8006470 <_printf_i+0xe8>
 800646a:	0649      	lsls	r1, r1, #25
 800646c:	bf48      	it	mi
 800646e:	b2ad      	uxthmi	r5, r5
 8006470:	2f6f      	cmp	r7, #111	@ 0x6f
 8006472:	4853      	ldr	r0, [pc, #332]	@ (80065c0 <_printf_i+0x238>)
 8006474:	6033      	str	r3, [r6, #0]
 8006476:	bf14      	ite	ne
 8006478:	230a      	movne	r3, #10
 800647a:	2308      	moveq	r3, #8
 800647c:	2100      	movs	r1, #0
 800647e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006482:	6866      	ldr	r6, [r4, #4]
 8006484:	60a6      	str	r6, [r4, #8]
 8006486:	2e00      	cmp	r6, #0
 8006488:	bfa2      	ittt	ge
 800648a:	6821      	ldrge	r1, [r4, #0]
 800648c:	f021 0104 	bicge.w	r1, r1, #4
 8006490:	6021      	strge	r1, [r4, #0]
 8006492:	b90d      	cbnz	r5, 8006498 <_printf_i+0x110>
 8006494:	2e00      	cmp	r6, #0
 8006496:	d04b      	beq.n	8006530 <_printf_i+0x1a8>
 8006498:	4616      	mov	r6, r2
 800649a:	fbb5 f1f3 	udiv	r1, r5, r3
 800649e:	fb03 5711 	mls	r7, r3, r1, r5
 80064a2:	5dc7      	ldrb	r7, [r0, r7]
 80064a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064a8:	462f      	mov	r7, r5
 80064aa:	42bb      	cmp	r3, r7
 80064ac:	460d      	mov	r5, r1
 80064ae:	d9f4      	bls.n	800649a <_printf_i+0x112>
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d10b      	bne.n	80064cc <_printf_i+0x144>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	07df      	lsls	r7, r3, #31
 80064b8:	d508      	bpl.n	80064cc <_printf_i+0x144>
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	6861      	ldr	r1, [r4, #4]
 80064be:	4299      	cmp	r1, r3
 80064c0:	bfde      	ittt	le
 80064c2:	2330      	movle	r3, #48	@ 0x30
 80064c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064cc:	1b92      	subs	r2, r2, r6
 80064ce:	6122      	str	r2, [r4, #16]
 80064d0:	f8cd a000 	str.w	sl, [sp]
 80064d4:	464b      	mov	r3, r9
 80064d6:	aa03      	add	r2, sp, #12
 80064d8:	4621      	mov	r1, r4
 80064da:	4640      	mov	r0, r8
 80064dc:	f7ff fee6 	bl	80062ac <_printf_common>
 80064e0:	3001      	adds	r0, #1
 80064e2:	d14a      	bne.n	800657a <_printf_i+0x1f2>
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295
 80064e8:	b004      	add	sp, #16
 80064ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	f043 0320 	orr.w	r3, r3, #32
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	4833      	ldr	r0, [pc, #204]	@ (80065c4 <_printf_i+0x23c>)
 80064f8:	2778      	movs	r7, #120	@ 0x78
 80064fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	6831      	ldr	r1, [r6, #0]
 8006502:	061f      	lsls	r7, r3, #24
 8006504:	f851 5b04 	ldr.w	r5, [r1], #4
 8006508:	d402      	bmi.n	8006510 <_printf_i+0x188>
 800650a:	065f      	lsls	r7, r3, #25
 800650c:	bf48      	it	mi
 800650e:	b2ad      	uxthmi	r5, r5
 8006510:	6031      	str	r1, [r6, #0]
 8006512:	07d9      	lsls	r1, r3, #31
 8006514:	bf44      	itt	mi
 8006516:	f043 0320 	orrmi.w	r3, r3, #32
 800651a:	6023      	strmi	r3, [r4, #0]
 800651c:	b11d      	cbz	r5, 8006526 <_printf_i+0x19e>
 800651e:	2310      	movs	r3, #16
 8006520:	e7ac      	b.n	800647c <_printf_i+0xf4>
 8006522:	4827      	ldr	r0, [pc, #156]	@ (80065c0 <_printf_i+0x238>)
 8006524:	e7e9      	b.n	80064fa <_printf_i+0x172>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	f023 0320 	bic.w	r3, r3, #32
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	e7f6      	b.n	800651e <_printf_i+0x196>
 8006530:	4616      	mov	r6, r2
 8006532:	e7bd      	b.n	80064b0 <_printf_i+0x128>
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	6825      	ldr	r5, [r4, #0]
 8006538:	6961      	ldr	r1, [r4, #20]
 800653a:	1d18      	adds	r0, r3, #4
 800653c:	6030      	str	r0, [r6, #0]
 800653e:	062e      	lsls	r6, r5, #24
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	d501      	bpl.n	8006548 <_printf_i+0x1c0>
 8006544:	6019      	str	r1, [r3, #0]
 8006546:	e002      	b.n	800654e <_printf_i+0x1c6>
 8006548:	0668      	lsls	r0, r5, #25
 800654a:	d5fb      	bpl.n	8006544 <_printf_i+0x1bc>
 800654c:	8019      	strh	r1, [r3, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	4616      	mov	r6, r2
 8006554:	e7bc      	b.n	80064d0 <_printf_i+0x148>
 8006556:	6833      	ldr	r3, [r6, #0]
 8006558:	1d1a      	adds	r2, r3, #4
 800655a:	6032      	str	r2, [r6, #0]
 800655c:	681e      	ldr	r6, [r3, #0]
 800655e:	6862      	ldr	r2, [r4, #4]
 8006560:	2100      	movs	r1, #0
 8006562:	4630      	mov	r0, r6
 8006564:	f7f9 fe5c 	bl	8000220 <memchr>
 8006568:	b108      	cbz	r0, 800656e <_printf_i+0x1e6>
 800656a:	1b80      	subs	r0, r0, r6
 800656c:	6060      	str	r0, [r4, #4]
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	6123      	str	r3, [r4, #16]
 8006572:	2300      	movs	r3, #0
 8006574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006578:	e7aa      	b.n	80064d0 <_printf_i+0x148>
 800657a:	6923      	ldr	r3, [r4, #16]
 800657c:	4632      	mov	r2, r6
 800657e:	4649      	mov	r1, r9
 8006580:	4640      	mov	r0, r8
 8006582:	47d0      	blx	sl
 8006584:	3001      	adds	r0, #1
 8006586:	d0ad      	beq.n	80064e4 <_printf_i+0x15c>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	079b      	lsls	r3, r3, #30
 800658c:	d413      	bmi.n	80065b6 <_printf_i+0x22e>
 800658e:	68e0      	ldr	r0, [r4, #12]
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	4298      	cmp	r0, r3
 8006594:	bfb8      	it	lt
 8006596:	4618      	movlt	r0, r3
 8006598:	e7a6      	b.n	80064e8 <_printf_i+0x160>
 800659a:	2301      	movs	r3, #1
 800659c:	4632      	mov	r2, r6
 800659e:	4649      	mov	r1, r9
 80065a0:	4640      	mov	r0, r8
 80065a2:	47d0      	blx	sl
 80065a4:	3001      	adds	r0, #1
 80065a6:	d09d      	beq.n	80064e4 <_printf_i+0x15c>
 80065a8:	3501      	adds	r5, #1
 80065aa:	68e3      	ldr	r3, [r4, #12]
 80065ac:	9903      	ldr	r1, [sp, #12]
 80065ae:	1a5b      	subs	r3, r3, r1
 80065b0:	42ab      	cmp	r3, r5
 80065b2:	dcf2      	bgt.n	800659a <_printf_i+0x212>
 80065b4:	e7eb      	b.n	800658e <_printf_i+0x206>
 80065b6:	2500      	movs	r5, #0
 80065b8:	f104 0619 	add.w	r6, r4, #25
 80065bc:	e7f5      	b.n	80065aa <_printf_i+0x222>
 80065be:	bf00      	nop
 80065c0:	08006911 	.word	0x08006911
 80065c4:	08006922 	.word	0x08006922

080065c8 <__sflush_r>:
 80065c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	0716      	lsls	r6, r2, #28
 80065d2:	4605      	mov	r5, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	d454      	bmi.n	8006682 <__sflush_r+0xba>
 80065d8:	684b      	ldr	r3, [r1, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dc02      	bgt.n	80065e4 <__sflush_r+0x1c>
 80065de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dd48      	ble.n	8006676 <__sflush_r+0xae>
 80065e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d045      	beq.n	8006676 <__sflush_r+0xae>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065f0:	682f      	ldr	r7, [r5, #0]
 80065f2:	6a21      	ldr	r1, [r4, #32]
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	d030      	beq.n	800665a <__sflush_r+0x92>
 80065f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	0759      	lsls	r1, r3, #29
 80065fe:	d505      	bpl.n	800660c <__sflush_r+0x44>
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006606:	b10b      	cbz	r3, 800660c <__sflush_r+0x44>
 8006608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006610:	6a21      	ldr	r1, [r4, #32]
 8006612:	4628      	mov	r0, r5
 8006614:	47b0      	blx	r6
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	d106      	bne.n	800662a <__sflush_r+0x62>
 800661c:	6829      	ldr	r1, [r5, #0]
 800661e:	291d      	cmp	r1, #29
 8006620:	d82b      	bhi.n	800667a <__sflush_r+0xb2>
 8006622:	4a2a      	ldr	r2, [pc, #168]	@ (80066cc <__sflush_r+0x104>)
 8006624:	410a      	asrs	r2, r1
 8006626:	07d6      	lsls	r6, r2, #31
 8006628:	d427      	bmi.n	800667a <__sflush_r+0xb2>
 800662a:	2200      	movs	r2, #0
 800662c:	6062      	str	r2, [r4, #4]
 800662e:	04d9      	lsls	r1, r3, #19
 8006630:	6922      	ldr	r2, [r4, #16]
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	d504      	bpl.n	8006640 <__sflush_r+0x78>
 8006636:	1c42      	adds	r2, r0, #1
 8006638:	d101      	bne.n	800663e <__sflush_r+0x76>
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	b903      	cbnz	r3, 8006640 <__sflush_r+0x78>
 800663e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006642:	602f      	str	r7, [r5, #0]
 8006644:	b1b9      	cbz	r1, 8006676 <__sflush_r+0xae>
 8006646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800664a:	4299      	cmp	r1, r3
 800664c:	d002      	beq.n	8006654 <__sflush_r+0x8c>
 800664e:	4628      	mov	r0, r5
 8006650:	f7ff fbea 	bl	8005e28 <_free_r>
 8006654:	2300      	movs	r3, #0
 8006656:	6363      	str	r3, [r4, #52]	@ 0x34
 8006658:	e00d      	b.n	8006676 <__sflush_r+0xae>
 800665a:	2301      	movs	r3, #1
 800665c:	4628      	mov	r0, r5
 800665e:	47b0      	blx	r6
 8006660:	4602      	mov	r2, r0
 8006662:	1c50      	adds	r0, r2, #1
 8006664:	d1c9      	bne.n	80065fa <__sflush_r+0x32>
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0c6      	beq.n	80065fa <__sflush_r+0x32>
 800666c:	2b1d      	cmp	r3, #29
 800666e:	d001      	beq.n	8006674 <__sflush_r+0xac>
 8006670:	2b16      	cmp	r3, #22
 8006672:	d11e      	bne.n	80066b2 <__sflush_r+0xea>
 8006674:	602f      	str	r7, [r5, #0]
 8006676:	2000      	movs	r0, #0
 8006678:	e022      	b.n	80066c0 <__sflush_r+0xf8>
 800667a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667e:	b21b      	sxth	r3, r3
 8006680:	e01b      	b.n	80066ba <__sflush_r+0xf2>
 8006682:	690f      	ldr	r7, [r1, #16]
 8006684:	2f00      	cmp	r7, #0
 8006686:	d0f6      	beq.n	8006676 <__sflush_r+0xae>
 8006688:	0793      	lsls	r3, r2, #30
 800668a:	680e      	ldr	r6, [r1, #0]
 800668c:	bf08      	it	eq
 800668e:	694b      	ldreq	r3, [r1, #20]
 8006690:	600f      	str	r7, [r1, #0]
 8006692:	bf18      	it	ne
 8006694:	2300      	movne	r3, #0
 8006696:	eba6 0807 	sub.w	r8, r6, r7
 800669a:	608b      	str	r3, [r1, #8]
 800669c:	f1b8 0f00 	cmp.w	r8, #0
 80066a0:	dde9      	ble.n	8006676 <__sflush_r+0xae>
 80066a2:	6a21      	ldr	r1, [r4, #32]
 80066a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066a6:	4643      	mov	r3, r8
 80066a8:	463a      	mov	r2, r7
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b0      	blx	r6
 80066ae:	2800      	cmp	r0, #0
 80066b0:	dc08      	bgt.n	80066c4 <__sflush_r+0xfc>
 80066b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c4:	4407      	add	r7, r0
 80066c6:	eba8 0800 	sub.w	r8, r8, r0
 80066ca:	e7e7      	b.n	800669c <__sflush_r+0xd4>
 80066cc:	dfbffffe 	.word	0xdfbffffe

080066d0 <_fflush_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	690b      	ldr	r3, [r1, #16]
 80066d4:	4605      	mov	r5, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b913      	cbnz	r3, 80066e0 <_fflush_r+0x10>
 80066da:	2500      	movs	r5, #0
 80066dc:	4628      	mov	r0, r5
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	b118      	cbz	r0, 80066ea <_fflush_r+0x1a>
 80066e2:	6a03      	ldr	r3, [r0, #32]
 80066e4:	b90b      	cbnz	r3, 80066ea <_fflush_r+0x1a>
 80066e6:	f7ff f8e9 	bl	80058bc <__sinit>
 80066ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f3      	beq.n	80066da <_fflush_r+0xa>
 80066f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066f4:	07d0      	lsls	r0, r2, #31
 80066f6:	d404      	bmi.n	8006702 <_fflush_r+0x32>
 80066f8:	0599      	lsls	r1, r3, #22
 80066fa:	d402      	bmi.n	8006702 <_fflush_r+0x32>
 80066fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066fe:	f7ff fb90 	bl	8005e22 <__retarget_lock_acquire_recursive>
 8006702:	4628      	mov	r0, r5
 8006704:	4621      	mov	r1, r4
 8006706:	f7ff ff5f 	bl	80065c8 <__sflush_r>
 800670a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800670c:	07da      	lsls	r2, r3, #31
 800670e:	4605      	mov	r5, r0
 8006710:	d4e4      	bmi.n	80066dc <_fflush_r+0xc>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	059b      	lsls	r3, r3, #22
 8006716:	d4e1      	bmi.n	80066dc <_fflush_r+0xc>
 8006718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800671a:	f7ff fb83 	bl	8005e24 <__retarget_lock_release_recursive>
 800671e:	e7dd      	b.n	80066dc <_fflush_r+0xc>

08006720 <__swhatbuf_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	460c      	mov	r4, r1
 8006724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006728:	2900      	cmp	r1, #0
 800672a:	b096      	sub	sp, #88	@ 0x58
 800672c:	4615      	mov	r5, r2
 800672e:	461e      	mov	r6, r3
 8006730:	da0d      	bge.n	800674e <__swhatbuf_r+0x2e>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006738:	f04f 0100 	mov.w	r1, #0
 800673c:	bf14      	ite	ne
 800673e:	2340      	movne	r3, #64	@ 0x40
 8006740:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006744:	2000      	movs	r0, #0
 8006746:	6031      	str	r1, [r6, #0]
 8006748:	602b      	str	r3, [r5, #0]
 800674a:	b016      	add	sp, #88	@ 0x58
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	466a      	mov	r2, sp
 8006750:	f000 f848 	bl	80067e4 <_fstat_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	dbec      	blt.n	8006732 <__swhatbuf_r+0x12>
 8006758:	9901      	ldr	r1, [sp, #4]
 800675a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800675e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006762:	4259      	negs	r1, r3
 8006764:	4159      	adcs	r1, r3
 8006766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800676a:	e7eb      	b.n	8006744 <__swhatbuf_r+0x24>

0800676c <__smakebuf_r>:
 800676c:	898b      	ldrh	r3, [r1, #12]
 800676e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006770:	079d      	lsls	r5, r3, #30
 8006772:	4606      	mov	r6, r0
 8006774:	460c      	mov	r4, r1
 8006776:	d507      	bpl.n	8006788 <__smakebuf_r+0x1c>
 8006778:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	2301      	movs	r3, #1
 8006782:	6163      	str	r3, [r4, #20]
 8006784:	b003      	add	sp, #12
 8006786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006788:	ab01      	add	r3, sp, #4
 800678a:	466a      	mov	r2, sp
 800678c:	f7ff ffc8 	bl	8006720 <__swhatbuf_r>
 8006790:	9f00      	ldr	r7, [sp, #0]
 8006792:	4605      	mov	r5, r0
 8006794:	4639      	mov	r1, r7
 8006796:	4630      	mov	r0, r6
 8006798:	f7ff fbba 	bl	8005f10 <_malloc_r>
 800679c:	b948      	cbnz	r0, 80067b2 <__smakebuf_r+0x46>
 800679e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a2:	059a      	lsls	r2, r3, #22
 80067a4:	d4ee      	bmi.n	8006784 <__smakebuf_r+0x18>
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	f043 0302 	orr.w	r3, r3, #2
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	e7e2      	b.n	8006778 <__smakebuf_r+0xc>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	6020      	str	r0, [r4, #0]
 80067b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	9b01      	ldr	r3, [sp, #4]
 80067be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067c2:	b15b      	cbz	r3, 80067dc <__smakebuf_r+0x70>
 80067c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 f81d 	bl	8006808 <_isatty_r>
 80067ce:	b128      	cbz	r0, 80067dc <__smakebuf_r+0x70>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	431d      	orrs	r5, r3
 80067e0:	81a5      	strh	r5, [r4, #12]
 80067e2:	e7cf      	b.n	8006784 <__smakebuf_r+0x18>

080067e4 <_fstat_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d07      	ldr	r5, [pc, #28]	@ (8006804 <_fstat_r+0x20>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f7fa fd68 	bl	80012c6 <_fstat>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d102      	bne.n	8006800 <_fstat_r+0x1c>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	b103      	cbz	r3, 8006800 <_fstat_r+0x1c>
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	bd38      	pop	{r3, r4, r5, pc}
 8006802:	bf00      	nop
 8006804:	2000047c 	.word	0x2000047c

08006808 <_isatty_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d06      	ldr	r5, [pc, #24]	@ (8006824 <_isatty_r+0x1c>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fa fd67 	bl	80012e6 <_isatty>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_isatty_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_isatty_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	2000047c 	.word	0x2000047c

08006828 <_sbrk_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d06      	ldr	r5, [pc, #24]	@ (8006844 <_sbrk_r+0x1c>)
 800682c:	2300      	movs	r3, #0
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	f7fa fd70 	bl	8001318 <_sbrk>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_sbrk_r+0x1a>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_sbrk_r+0x1a>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	2000047c 	.word	0x2000047c

08006848 <_init>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	bf00      	nop
 800684c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684e:	bc08      	pop	{r3}
 8006850:	469e      	mov	lr, r3
 8006852:	4770      	bx	lr

08006854 <_fini>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	bf00      	nop
 8006858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685a:	bc08      	pop	{r3}
 800685c:	469e      	mov	lr, r3
 800685e:	4770      	bx	lr
